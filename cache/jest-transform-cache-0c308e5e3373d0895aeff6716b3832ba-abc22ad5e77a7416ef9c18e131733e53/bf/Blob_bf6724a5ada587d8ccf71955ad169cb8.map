{"version":3,"names":["Blob","parts","options","_data","BlobManager","require","data","createFromParts","Error","start","end","offset","size","createFromOptions","blobId","release","type","module","exports"],"sources":["Blob.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  // $FlowFixMe[unsafe-getters-setters]\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number): Blob {\n    const BlobManager = require('./BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        // $FlowFixMe[reassign-const]\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          // $FlowFixMe[reassign-const]\n          end = this.size + end;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"],"mappings":"AAUA,YAAY;;AAAC;AAAA;AAAA;AAAA,IAyCPA,IAAI;EAQR,gBAAqE;IAAA,IAAzDC,KAA2B,uEAAG,EAAE;IAAA,IAAEC,OAAqB;IAAA;IAAA,KAPnEC,KAAK;IAQH,IAAMC,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;IAC5C,IAAI,CAACC,IAAI,GAAGF,WAAW,CAACG,eAAe,CAACN,KAAK,EAAEC,OAAO,CAAC,CAACI,IAAI;EAC9D;EAAC;IAAA;IAAA,KAaD,eAAqB;MACnB,IAAI,CAAC,IAAI,CAACH,KAAK,EAAE;QACf,MAAM,IAAIK,KAAK,CAAC,iDAAiD,CAAC;MACpE;MAEA,OAAO,IAAI,CAACL,KAAK;IACnB,CAAC;IAAA,KAXD,aAASG,IAAe,EAAE;MACxB,IAAI,CAACH,KAAK,GAAGG,IAAI;IACnB;EAAC;IAAA;IAAA,OAWD,eAAMG,KAAc,EAAEC,GAAY,EAAQ;MACxC,IAAMN,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;MAC5C,iBAAqB,IAAI,CAACC,IAAI;QAAzBK,MAAM,cAANA,MAAM;QAAEC,IAAI,cAAJA,IAAI;MAEjB,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIA,KAAK,GAAGG,IAAI,EAAE;UAEhBH,KAAK,GAAGG,IAAI;QACd;QACAD,MAAM,IAAIF,KAAK;QACfG,IAAI,IAAIH,KAAK;QAEb,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;UAC3B,IAAIA,GAAG,GAAG,CAAC,EAAE;YAEXA,GAAG,GAAG,IAAI,CAACE,IAAI,GAAGF,GAAG;UACvB;UACAE,IAAI,GAAGF,GAAG,GAAGD,KAAK;QACpB;MACF;MACA,OAAOL,WAAW,CAACS,iBAAiB,CAAC;QACnCC,MAAM,EAAE,IAAI,CAACR,IAAI,CAACQ,MAAM;QACxBH,MAAM,EAANA,MAAM;QACNC,IAAI,EAAJA;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAcD,iBAAQ;MACN,IAAMR,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;MAC5CD,WAAW,CAACW,OAAO,CAAC,IAAI,CAACT,IAAI,CAACQ,MAAM,CAAC;MACrC,IAAI,CAACR,IAAI,GAAG,IAAI;IAClB;EAAC;IAAA;IAAA,KAMD,eAAmB;MACjB,OAAO,IAAI,CAACA,IAAI,CAACM,IAAI;IACvB;EAAC;IAAA;IAAA,KAOD,eAAmB;MACjB,OAAO,IAAI,CAACN,IAAI,CAACU,IAAI,IAAI,EAAE;IAC7B;EAAC;EAAA;AAAA;AAGHC,MAAM,CAACC,OAAO,GAAGlB,IAAI"}