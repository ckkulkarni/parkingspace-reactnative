8bf48610f18272c314d5ca0215e2cfc0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var Blob = function () {
  function Blob() {
    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 ? arguments[1] : undefined;
    (0, _classCallCheck2.default)(this, Blob);
    this._data = void 0;
    var BlobManager = require('./BlobManager');
    this.data = BlobManager.createFromParts(parts, options).data;
  }
  (0, _createClass2.default)(Blob, [{
    key: "data",
    get: function get() {
      if (!this._data) {
        throw new Error('Blob has been closed and is no longer available');
      }
      return this._data;
    },
    set: function set(data) {
      this._data = data;
    }
  }, {
    key: "slice",
    value: function slice(start, end) {
      var BlobManager = require('./BlobManager');
      var _this$data = this.data,
        offset = _this$data.offset,
        size = _this$data.size;
      if (typeof start === 'number') {
        if (start > size) {
          start = size;
        }
        offset += start;
        size -= start;
        if (typeof end === 'number') {
          if (end < 0) {
            end = this.size + end;
          }
          size = end - start;
        }
      }
      return BlobManager.createFromOptions({
        blobId: this.data.blobId,
        offset: offset,
        size: size
      });
    }
  }, {
    key: "close",
    value: function close() {
      var BlobManager = require('./BlobManager');
      BlobManager.release(this.data.blobId);
      this.data = null;
    }
  }, {
    key: "size",
    get: function get() {
      return this.data.size;
    }
  }, {
    key: "type",
    get: function get() {
      return this.data.type || '';
    }
  }]);
  return Blob;
}();
module.exports = Blob;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCbG9iIiwicGFydHMiLCJvcHRpb25zIiwiX2RhdGEiLCJCbG9iTWFuYWdlciIsInJlcXVpcmUiLCJkYXRhIiwiY3JlYXRlRnJvbVBhcnRzIiwiRXJyb3IiLCJzdGFydCIsImVuZCIsIm9mZnNldCIsInNpemUiLCJjcmVhdGVGcm9tT3B0aW9ucyIsImJsb2JJZCIsInJlbGVhc2UiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkJsb2IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge0Jsb2JEYXRhLCBCbG9iT3B0aW9uc30gZnJvbSAnLi9CbG9iVHlwZXMnO1xuXG4vKipcbiAqIE9wYXF1ZSBKUyByZXByZXNlbnRhdGlvbiBvZiBzb21lIGJpbmFyeSBkYXRhIGluIG5hdGl2ZS5cbiAqXG4gKiBUaGUgQVBJIGlzIG1vZGVsZWQgYWZ0ZXIgdGhlIFczQyBCbG9iIEFQSSwgd2l0aCBvbmUgY2F2ZWF0XG4gKiByZWdhcmRpbmcgZXhwbGljaXQgZGVhbGxvY2F0aW9uLiBSZWZlciB0byB0aGUgYGNsb3NlKClgXG4gKiBtZXRob2QgZm9yIGZ1cnRoZXIgZGV0YWlscy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlIGluIGEgUmVhY3QgY29tcG9uZW50OlxuICpcbiAqICAgY2xhc3MgV2ViU29ja2V0SW1hZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICAgICBzdGF0ZSA9IHtibG9iOiBudWxsfTtcbiAqICAgICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gKiAgICAgICAgbGV0IHdzID0gdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQoLi4uKTtcbiAqICAgICAgICB3cy5iaW5hcnlUeXBlID0gJ2Jsb2InO1xuICogICAgICAgIHdzLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICogICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxvYikge1xuICogICAgICAgICAgICB0aGlzLnN0YXRlLmJsb2IuY2xvc2UoKTtcbiAqICAgICAgICAgIH1cbiAqICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2Jsb2I6IGV2ZW50LmRhdGF9KTtcbiAqICAgICAgICB9O1xuICogICAgICB9XG4gKiAgICAgIGNvbXBvbmVudFVubW91bnQoKSB7XG4gKiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxvYikge1xuICogICAgICAgICAgdGhpcy5zdGF0ZS5ibG9iLmNsb3NlKCk7XG4gKiAgICAgICAgfVxuICogICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAqICAgICAgfVxuICogICAgICByZW5kZXIoKSB7XG4gKiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmJsb2IpIHtcbiAqICAgICAgICAgIHJldHVybiA8VmlldyAvPjtcbiAqICAgICAgICB9XG4gKiAgICAgICAgcmV0dXJuIDxJbWFnZSBzb3VyY2U9e3t1cmk6IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5zdGF0ZS5ibG9iKX19IC8+O1xuICogICAgICB9XG4gKiAgIH1cbiAqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9CbG9iXG4gKi9cbmNsYXNzIEJsb2Ige1xuICBfZGF0YTogP0Jsb2JEYXRhO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgSlMgY29uc3VtZXJzLlxuICAgKiBDdXJyZW50bHkgd2Ugb25seSBzdXBwb3J0IGNyZWF0aW5nIEJsb2JzIGZyb20gb3RoZXIgQmxvYnMuXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2IvQmxvYlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFydHM6IEFycmF5PEJsb2IgfCBzdHJpbmc+ID0gW10sIG9wdGlvbnM/OiBCbG9iT3B0aW9ucykge1xuICAgIGNvbnN0IEJsb2JNYW5hZ2VyID0gcmVxdWlyZSgnLi9CbG9iTWFuYWdlcicpO1xuICAgIHRoaXMuZGF0YSA9IEJsb2JNYW5hZ2VyLmNyZWF0ZUZyb21QYXJ0cyhwYXJ0cywgb3B0aW9ucykuZGF0YTtcbiAgfVxuXG4gIC8qXG4gICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gY3JlYXRlIGEgbmV3IEJsb2Igb2JqZWN0IGNvbnRhaW5pbmdcbiAgICogdGhlIGRhdGEgaW4gdGhlIHNwZWNpZmllZCByYW5nZSBvZiBieXRlcyBvZiB0aGUgc291cmNlIEJsb2IuXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2Ivc2xpY2VcbiAgICovXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgc2V0IGRhdGEoZGF0YTogP0Jsb2JEYXRhKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBkYXRhKCk6IEJsb2JEYXRhIHtcbiAgICBpZiAoIXRoaXMuX2RhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmxvYiBoYXMgYmVlbiBjbG9zZWQgYW5kIGlzIG5vIGxvbmdlciBhdmFpbGFibGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfVxuXG4gIHNsaWNlKHN0YXJ0PzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBCbG9iIHtcbiAgICBjb25zdCBCbG9iTWFuYWdlciA9IHJlcXVpcmUoJy4vQmxvYk1hbmFnZXInKTtcbiAgICBsZXQge29mZnNldCwgc2l6ZX0gPSB0aGlzLmRhdGE7XG5cbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKHN0YXJ0ID4gc2l6ZSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW3JlYXNzaWduLWNvbnN0XVxuICAgICAgICBzdGFydCA9IHNpemU7XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gc3RhcnQ7XG4gICAgICBzaXplIC09IHN0YXJ0O1xuXG4gICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lW3JlYXNzaWduLWNvbnN0XVxuICAgICAgICAgIGVuZCA9IHRoaXMuc2l6ZSArIGVuZDtcbiAgICAgICAgfVxuICAgICAgICBzaXplID0gZW5kIC0gc3RhcnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCbG9iTWFuYWdlci5jcmVhdGVGcm9tT3B0aW9ucyh7XG4gICAgICBibG9iSWQ6IHRoaXMuZGF0YS5ibG9iSWQsXG4gICAgICBvZmZzZXQsXG4gICAgICBzaXplLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGluIHRoZSBzdGFuZGFyZCwgYnV0IG5vdCBhY3R1YWxseSBpbXBsZW1lbnRlZCBieVxuICAgKiBhbnkgYnJvd3NlcnMgYXQgdGhpcyBwb2ludC4gSXQncyBpbXBvcnRhbnQgZm9yIGhvdyBCbG9icyB3b3JrIGluXG4gICAqIFJlYWN0IE5hdGl2ZSwgaG93ZXZlciwgc2luY2Ugd2UgY2Fubm90IGRlLWFsbG9jYXRlIHJlc291cmNlcyBhdXRvbWF0aWNhbGx5LFxuICAgKiBzbyBjb25zdW1lcnMgbmVlZCB0byBleHBsaWNpdGx5IGRlLWFsbG9jYXRlIHRoZW0uXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgc2VtYW50aWNzIGFyb3VuZCBCbG9icyBjcmVhdGVkIHZpYSBgYmxvYi5zbGljZSgpYFxuICAgKiBhbmQgYG5ldyBCbG9iKFtibG9iXSlgIGFyZSBkaWZmZXJlbnQuIGBibG9iLnNsaWNlKClgIGNyZWF0ZXMgYVxuICAgKiBuZXcgKnZpZXcqIG9udG8gdGhlIHNhbWUgYmluYXJ5IGRhdGEsIHNvIGNhbGxpbmcgYGNsb3NlKClgIG9uIGFueVxuICAgKiBvZiB0aG9zZSB2aWV3cyBpcyBlbm91Z2ggdG8gZGVhbGxvY2F0ZSB0aGUgZGF0YSwgd2hlcmVhc1xuICAgKiBgbmV3IEJsb2IoW2Jsb2IsIC4uLl0pYCBhY3R1YWxseSBjb3BpZXMgdGhlIGRhdGEgaW4gbWVtb3J5LlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgY29uc3QgQmxvYk1hbmFnZXIgPSByZXF1aXJlKCcuL0Jsb2JNYW5hZ2VyJyk7XG4gICAgQmxvYk1hbmFnZXIucmVsZWFzZSh0aGlzLmRhdGEuYmxvYklkKTtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGRhdGEgY29udGFpbmVkIGluIHRoZSBCbG9iIG9iamVjdCwgaW4gYnl0ZXMuXG4gICAqL1xuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zaXplO1xuICB9XG5cbiAgLypcbiAgICogU3RyaW5nIGluZGljYXRpbmcgdGhlIE1JTUUgdHlwZSBvZiB0aGUgZGF0YSBjb250YWluZWQgaW4gdGhlIEJsb2IuXG4gICAqIElmIHRoZSB0eXBlIGlzIHVua25vd24sIHRoaXMgc3RyaW5nIGlzIGVtcHR5LlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXVxuICBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRhdGEudHlwZSB8fCAnJztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2I7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUM7QUFBQTtBQUFBO0FBQUEsSUF5Q1BBLElBQUk7RUFRUixnQkFBcUU7SUFBQSxJQUF6REMsS0FBMkIsdUVBQUcsRUFBRTtJQUFBLElBQUVDLE9BQXFCO0lBQUE7SUFBQSxLQVBuRUMsS0FBSztJQVFILElBQU1DLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUM1QyxJQUFJLENBQUNDLElBQUksR0FBR0YsV0FBVyxDQUFDRyxlQUFlLENBQUNOLEtBQUssRUFBRUMsT0FBTyxDQUFDLENBQUNJLElBQUk7RUFDOUQ7RUFBQztJQUFBO0lBQUEsS0FhRCxlQUFxQjtNQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDSCxLQUFLLEVBQUU7UUFDZixNQUFNLElBQUlLLEtBQUssQ0FBQyxpREFBaUQsQ0FBQztNQUNwRTtNQUVBLE9BQU8sSUFBSSxDQUFDTCxLQUFLO0lBQ25CLENBQUM7SUFBQSxLQVhELGFBQVNHLElBQWUsRUFBRTtNQUN4QixJQUFJLENBQUNILEtBQUssR0FBR0csSUFBSTtJQUNuQjtFQUFDO0lBQUE7SUFBQSxPQVdELGVBQU1HLEtBQWMsRUFBRUMsR0FBWSxFQUFRO01BQ3hDLElBQU1OLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztNQUM1QyxpQkFBcUIsSUFBSSxDQUFDQyxJQUFJO1FBQXpCSyxNQUFNLGNBQU5BLE1BQU07UUFBRUMsSUFBSSxjQUFKQSxJQUFJO01BRWpCLElBQUksT0FBT0gsS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixJQUFJQSxLQUFLLEdBQUdHLElBQUksRUFBRTtVQUVoQkgsS0FBSyxHQUFHRyxJQUFJO1FBQ2Q7UUFDQUQsTUFBTSxJQUFJRixLQUFLO1FBQ2ZHLElBQUksSUFBSUgsS0FBSztRQUViLElBQUksT0FBT0MsR0FBRyxLQUFLLFFBQVEsRUFBRTtVQUMzQixJQUFJQSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBRVhBLEdBQUcsR0FBRyxJQUFJLENBQUNFLElBQUksR0FBR0YsR0FBRztVQUN2QjtVQUNBRSxJQUFJLEdBQUdGLEdBQUcsR0FBR0QsS0FBSztRQUNwQjtNQUNGO01BQ0EsT0FBT0wsV0FBVyxDQUFDUyxpQkFBaUIsQ0FBQztRQUNuQ0MsTUFBTSxFQUFFLElBQUksQ0FBQ1IsSUFBSSxDQUFDUSxNQUFNO1FBQ3hCSCxNQUFNLEVBQU5BLE1BQU07UUFDTkMsSUFBSSxFQUFKQTtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQUM7SUFBQTtJQUFBLE9BY0QsaUJBQVE7TUFDTixJQUFNUixXQUFXLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7TUFDNUNELFdBQVcsQ0FBQ1csT0FBTyxDQUFDLElBQUksQ0FBQ1QsSUFBSSxDQUFDUSxNQUFNLENBQUM7TUFDckMsSUFBSSxDQUFDUixJQUFJLEdBQUcsSUFBSTtJQUNsQjtFQUFDO0lBQUE7SUFBQSxLQU1ELGVBQW1CO01BQ2pCLE9BQU8sSUFBSSxDQUFDQSxJQUFJLENBQUNNLElBQUk7SUFDdkI7RUFBQztJQUFBO0lBQUEsS0FPRCxlQUFtQjtNQUNqQixPQUFPLElBQUksQ0FBQ04sSUFBSSxDQUFDVSxJQUFJLElBQUksRUFBRTtJQUM3QjtFQUFDO0VBQUE7QUFBQTtBQUdIQyxNQUFNLENBQUNDLE9BQU8sR0FBR2xCLElBQUkifQ==