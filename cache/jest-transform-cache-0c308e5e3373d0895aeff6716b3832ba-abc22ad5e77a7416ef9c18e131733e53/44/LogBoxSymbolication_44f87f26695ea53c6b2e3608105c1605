ccedc54ddc34adc72a4a8b1fad442d5c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteStack = deleteStack;
exports.symbolicate = symbolicate;
var _symbolicateStackTrace = _interopRequireDefault(require("../../Core/Devtools/symbolicateStackTrace"));
var cache = new Map();
var sanitize = function sanitize(_ref) {
  var maybeStack = _ref.stack,
    codeFrame = _ref.codeFrame;
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }
  var stack = [];
  for (var maybeFrame of maybeStack) {
    var collapse = false;
    if ('collapse' in maybeFrame) {
      if (typeof maybeFrame.collapse !== 'boolean') {
        throw new Error('Expected stack frame `collapse` to be a boolean.');
      }
      collapse = maybeFrame.collapse;
    }
    stack.push({
      column: maybeFrame.column,
      file: maybeFrame.file,
      lineNumber: maybeFrame.lineNumber,
      methodName: maybeFrame.methodName,
      collapse: collapse
    });
  }
  return {
    stack: stack,
    codeFrame: codeFrame
  };
};
function deleteStack(stack) {
  cache.delete(stack);
}
function symbolicate(stack) {
  var promise = cache.get(stack);
  if (promise == null) {
    promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);
    cache.set(stack, promise);
  }
  return promise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWNoZSIsIk1hcCIsInNhbml0aXplIiwibWF5YmVTdGFjayIsInN0YWNrIiwiY29kZUZyYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJtYXliZUZyYW1lIiwiY29sbGFwc2UiLCJwdXNoIiwiY29sdW1uIiwiZmlsZSIsImxpbmVOdW1iZXIiLCJtZXRob2ROYW1lIiwiZGVsZXRlU3RhY2siLCJkZWxldGUiLCJzeW1ib2xpY2F0ZSIsInByb21pc2UiLCJnZXQiLCJzeW1ib2xpY2F0ZVN0YWNrVHJhY2UiLCJ0aGVuIiwic2V0Il0sInNvdXJjZXMiOlsiTG9nQm94U3ltYm9saWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1N5bWJvbGljYXRlZFN0YWNrVHJhY2V9IGZyb20gJy4uLy4uL0NvcmUvRGV2dG9vbHMvc3ltYm9saWNhdGVTdGFja1RyYWNlJztcbmltcG9ydCB0eXBlIHtTdGFja0ZyYW1lfSBmcm9tICcuLi8uLi9Db3JlL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcblxuaW1wb3J0IHN5bWJvbGljYXRlU3RhY2tUcmFjZSBmcm9tICcuLi8uLi9Db3JlL0RldnRvb2xzL3N5bWJvbGljYXRlU3RhY2tUcmFjZSc7XG5cbmV4cG9ydCB0eXBlIFN0YWNrID0gQXJyYXk8U3RhY2tGcmFtZT47XG5cbmNvbnN0IGNhY2hlOiBNYXA8U3RhY2ssIFByb21pc2U8U3ltYm9saWNhdGVkU3RhY2tUcmFjZT4+ID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIFNhbml0aXplIGJlY2F1c2Ugc29tZXRpbWVzLCBgc3ltYm9saWNhdGVTdGFja1RyYWNlYCBnaXZlcyB1cyBpbnZhbGlkIHZhbHVlcy5cbiAqL1xuY29uc3Qgc2FuaXRpemUgPSAoe1xuICBzdGFjazogbWF5YmVTdGFjayxcbiAgY29kZUZyYW1lLFxufTogU3ltYm9saWNhdGVkU3RhY2tUcmFjZSk6IFN5bWJvbGljYXRlZFN0YWNrVHJhY2UgPT4ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobWF5YmVTdGFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIHRvIGJlIGFuIGFycmF5LicpO1xuICB9XG4gIGNvbnN0IHN0YWNrOiBBcnJheTxTdGFja0ZyYW1lPiA9IFtdO1xuICBmb3IgKGNvbnN0IG1heWJlRnJhbWUgb2YgbWF5YmVTdGFjaykge1xuICAgIGxldCBjb2xsYXBzZSA9IGZhbHNlO1xuICAgIGlmICgnY29sbGFwc2UnIGluIG1heWJlRnJhbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZS5jb2xsYXBzZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGNvbGxhcHNlYCB0byBiZSBhIGJvb2xlYW4uJyk7XG4gICAgICB9XG4gICAgICBjb2xsYXBzZSA9IG1heWJlRnJhbWUuY29sbGFwc2U7XG4gICAgfVxuICAgIHN0YWNrLnB1c2goe1xuICAgICAgY29sdW1uOiBtYXliZUZyYW1lLmNvbHVtbixcbiAgICAgIGZpbGU6IG1heWJlRnJhbWUuZmlsZSxcbiAgICAgIGxpbmVOdW1iZXI6IG1heWJlRnJhbWUubGluZU51bWJlcixcbiAgICAgIG1ldGhvZE5hbWU6IG1heWJlRnJhbWUubWV0aG9kTmFtZSxcbiAgICAgIGNvbGxhcHNlLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7c3RhY2ssIGNvZGVGcmFtZX07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlU3RhY2soc3RhY2s6IFN0YWNrKTogdm9pZCB7XG4gIGNhY2hlLmRlbGV0ZShzdGFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzeW1ib2xpY2F0ZShzdGFjazogU3RhY2spOiBQcm9taXNlPFN5bWJvbGljYXRlZFN0YWNrVHJhY2U+IHtcbiAgbGV0IHByb21pc2UgPSBjYWNoZS5nZXQoc3RhY2spO1xuICBpZiAocHJvbWlzZSA9PSBudWxsKSB7XG4gICAgcHJvbWlzZSA9IHN5bWJvbGljYXRlU3RhY2tUcmFjZShzdGFjaykudGhlbihzYW5pdGl6ZSk7XG4gICAgY2FjaGUuc2V0KHN0YWNrLCBwcm9taXNlKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFhQTtBQUlBLElBQU1BLEtBQWtELEdBQUcsSUFBSUMsR0FBRyxFQUFFO0FBS3BFLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFRLE9BR3dDO0VBQUEsSUFGN0NDLFVBQVUsUUFBakJDLEtBQUs7SUFDTEMsU0FBUyxRQUFUQSxTQUFTO0VBRVQsSUFBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osVUFBVSxDQUFDLEVBQUU7SUFDOUIsTUFBTSxJQUFJSyxLQUFLLENBQUMsZ0NBQWdDLENBQUM7RUFDbkQ7RUFDQSxJQUFNSixLQUF3QixHQUFHLEVBQUU7RUFDbkMsS0FBSyxJQUFNSyxVQUFVLElBQUlOLFVBQVUsRUFBRTtJQUNuQyxJQUFJTyxRQUFRLEdBQUcsS0FBSztJQUNwQixJQUFJLFVBQVUsSUFBSUQsVUFBVSxFQUFFO01BQzVCLElBQUksT0FBT0EsVUFBVSxDQUFDQyxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzVDLE1BQU0sSUFBSUYsS0FBSyxDQUFDLGtEQUFrRCxDQUFDO01BQ3JFO01BQ0FFLFFBQVEsR0FBR0QsVUFBVSxDQUFDQyxRQUFRO0lBQ2hDO0lBQ0FOLEtBQUssQ0FBQ08sSUFBSSxDQUFDO01BQ1RDLE1BQU0sRUFBRUgsVUFBVSxDQUFDRyxNQUFNO01BQ3pCQyxJQUFJLEVBQUVKLFVBQVUsQ0FBQ0ksSUFBSTtNQUNyQkMsVUFBVSxFQUFFTCxVQUFVLENBQUNLLFVBQVU7TUFDakNDLFVBQVUsRUFBRU4sVUFBVSxDQUFDTSxVQUFVO01BQ2pDTCxRQUFRLEVBQVJBO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7RUFDQSxPQUFPO0lBQUNOLEtBQUssRUFBTEEsS0FBSztJQUFFQyxTQUFTLEVBQVRBO0VBQVMsQ0FBQztBQUMzQixDQUFDO0FBRU0sU0FBU1csV0FBVyxDQUFDWixLQUFZLEVBQVE7RUFDOUNKLEtBQUssQ0FBQ2lCLE1BQU0sQ0FBQ2IsS0FBSyxDQUFDO0FBQ3JCO0FBRU8sU0FBU2MsV0FBVyxDQUFDZCxLQUFZLEVBQW1DO0VBQ3pFLElBQUllLE9BQU8sR0FBR25CLEtBQUssQ0FBQ29CLEdBQUcsQ0FBQ2hCLEtBQUssQ0FBQztFQUM5QixJQUFJZSxPQUFPLElBQUksSUFBSSxFQUFFO0lBQ25CQSxPQUFPLEdBQUcsSUFBQUUsOEJBQXFCLEVBQUNqQixLQUFLLENBQUMsQ0FBQ2tCLElBQUksQ0FBQ3BCLFFBQVEsQ0FBQztJQUNyREYsS0FBSyxDQUFDdUIsR0FBRyxDQUFDbkIsS0FBSyxFQUFFZSxPQUFPLENBQUM7RUFDM0I7RUFFQSxPQUFPQSxPQUFPO0FBQ2hCIn0=