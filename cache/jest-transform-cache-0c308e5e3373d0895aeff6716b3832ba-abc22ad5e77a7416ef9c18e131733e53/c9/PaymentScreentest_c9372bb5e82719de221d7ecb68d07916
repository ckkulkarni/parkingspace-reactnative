710a404056a0e875777ffceaf8ad9a32
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  var mockMarkSpaceAsUnoccupied = jest.fn();
  var mockRoute = {
    params: {
      details: {
        reg: 'ABC123',
        time: '21-02-2023'
      },
      space: 1,
      markSpaceAsUnoccupied: mockMarkSpaceAsUnoccupied
    }
  };
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn(function () {
      return Promise.resolve({
        ok: true
      });
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('deregester-payment-button');
    });
    _reactNative.fireEvent.press(getByTestId('deregester-payment-button'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledTimes(1);
    });
    expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledWith(1);
  }));
  it('should navigate to the previous screen on press of Go Back button', function () {
    var navigation = {
      goBack: jest.fn()
    };
    var route = {
      params: {
        spaces: [],
        space: 1,
        details: {
          reg: 'ABC',
          time: '22-02-2023'
        },
        markSpaceAsUnoccupied: jest.fn()
      }
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render4.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    console.log(navigation.goBack.mock.calls.length);
    expect(navigation.goBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIm1vY2tNYXJrU3BhY2VBc1Vub2NjdXBpZWQiLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJkZXRhaWxzIiwicmVnIiwidGltZSIsInNwYWNlIiwibWFya1NwYWNlQXNVbm9jY3VwaWVkIiwiaXQiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsImdsb2JhbCIsImZldGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvayIsIndhaXRGb3IiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibmF2aWdhdGlvbiIsInNwYWNlcyIsImdvQmFja0J1dHRvbiIsImNhbGxzIiwibGVuZ3RoIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIlBheW1lbnRTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBheW1lbnRTY3JlZW4gZnJvbSAnLi4vUGF5bWVudFNjcmVlbic7XHJcbmltcG9ydCB7cmVuZGVyLCB3YWl0Rm9yLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3QnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCB7TmF2aWdhdGlvbkNvbnRhaW5lciwgdXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmNvbnN0IGNhbGN1bGF0ZUNoYXJnZXNNb2NrID0gamVzdC5mbigpO1xyXG5kZXNjcmliZSgnUGF5bWVudCBTY3JlZW4vRGVyZWdpc3RlciBQYXJraW5nJywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tNYXJrU3BhY2VBc1Vub2NjdXBpZWQgPSBqZXN0LmZuKCk7XHJcbiAgY29uc3QgbW9ja1JvdXRlID0ge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICAgIHRpbWU6ICcyMS0wMi0yMDIzJyxcclxuICAgICAgfSxcclxuICAgICAgc3BhY2U6IDEsXHJcbiAgICAgIG1hcmtTcGFjZUFzVW5vY2N1cGllZDogbW9ja01hcmtTcGFjZUFzVW5vY2N1cGllZCxcclxuICAgIH0sXHJcbiAgfTtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT5cclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICBvazogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17bW9ja1JvdXRlfSAvPik7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLXBheW1lbnQtYnV0dG9uJykpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLXBheW1lbnQtYnV0dG9uJykpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gICAgICBleHBlY3QobW9ja01hcmtTcGFjZUFzVW5vY2N1cGllZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpLFxyXG4gICAgKTtcclxuICAgIGV4cGVjdChtb2NrTWFya1NwYWNlQXNVbm9jY3VwaWVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIG5hdmlnYXRlIHRvIHRoZSBwcmV2aW91cyBzY3JlZW4gb24gcHJlc3Mgb2YgR28gQmFjayBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uID0ge1xyXG4gICAgICBnb0JhY2s6IGplc3QuZm4oKSxcclxuICAgIH07XHJcbiAgICBjb25zdCByb3V0ZSA9IHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgc3BhY2VzOiBbXSxcclxuICAgICAgICBzcGFjZTogMSxcclxuICAgICAgICBkZXRhaWxzOiB7cmVnOiAnQUJDJywgdGltZTogJzIyLTAyLTIwMjMnfSxcclxuICAgICAgICBtYXJrU3BhY2VBc1Vub2NjdXBpZWQ6IGplc3QuZm4oKSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxQYXltZW50U2NyZWVuIHJvdXRlPXtyb3V0ZX0gLz4pO1xyXG4gICAgY29uc3QgZ29CYWNrQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItYmFjaycpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdvQmFja0J1dHRvbik7XHJcbiAgICBjb25zb2xlLmxvZyhuYXZpZ2F0aW9uLmdvQmFjay5tb2NrLmNhbGxzLmxlbmd0aCk7XHJcbiAgICBleHBlY3QobmF2aWdhdGlvbi5nb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBT0EsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUNuQkcsTUFBTSxFQUFFSixJQUFJLENBQUNDLEVBQUU7SUFDakIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQUFBO0FBZEg7QUFDQTtBQUNBO0FBQ0E7QUFBb0Q7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBYXBELElBQU1JLG9CQUFvQixHQUFHTCxJQUFJLENBQUNDLEVBQUUsRUFBRTtBQUN0Q0ssUUFBUSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07RUFDbEQsSUFBTUMseUJBQXlCLEdBQUdQLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBQzNDLElBQU1PLFNBQVMsR0FBRztJQUNoQkMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRTtRQUNQQyxHQUFHLEVBQUUsUUFBUTtRQUNiQyxJQUFJLEVBQUU7TUFDUixDQUFDO01BQ0RDLEtBQUssRUFBRSxDQUFDO01BQ1JDLHFCQUFxQixFQUFFUDtJQUN6QjtFQUNGLENBQUM7RUFDRFEsRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQU07SUFDbEMsSUFBTUwsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUks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