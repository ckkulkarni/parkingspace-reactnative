6a48bd954593cc124cc4d8f55ed6061f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _NativeRedBox = _interopRequireDefault(require("../NativeModules/specs/NativeRedBox"));
var _NativeBugReporting = _interopRequireDefault(require("./NativeBugReporting"));
function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require('./dumpReactTree')();
  });
}
var BugReporting = function () {
  function BugReporting() {
    (0, _classCallCheck2.default)(this, BugReporting);
  }
  (0, _createClass2.default)(BugReporting, null, [{
    key: "_maybeInit",
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }
      if (!BugReporting._redboxSubscription) {
        BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
      }
    }
  }, {
    key: "addSource",
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: "addFileSource",
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: "_addSource",
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();
      if (source.has(key)) {
        console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
      }
      source.set(key, callback);
      return {
        remove: function remove() {
          source.delete(key);
        }
      };
    }
  }, {
    key: "collectExtraData",
    value: function collectExtraData() {
      var extraData = {};
      for (var _ref of BugReporting._extraSources) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var _key = _ref2[0];
        var callback = _ref2[1];
        extraData[_key] = callback();
      }
      var fileData = {};
      for (var _ref3 of BugReporting._fileSources) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
        var _key2 = _ref4[0];
        var _callback = _ref4[1];
        fileData[_key2] = _callback();
      }
      if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
        _NativeBugReporting.default.setExtraData(extraData, fileData);
      }
      if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
        _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
      }
      return {
        extras: extraData,
        files: fileData
      };
    }
  }]);
  return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0RXh0cmFzIiwiQnVnUmVwb3J0aW5nIiwiYWRkRmlsZVNvdXJjZSIsInJlcXVpcmUiLCJfc3Vic2NyaXB0aW9uIiwiUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJjb2xsZWN0RXh0cmFEYXRhIiwiX3JlZGJveFN1YnNjcmlwdGlvbiIsImtleSIsImNhbGxiYWNrIiwiX2FkZFNvdXJjZSIsIl9leHRyYVNvdXJjZXMiLCJfZmlsZVNvdXJjZXMiLCJzb3VyY2UiLCJfbWF5YmVJbml0IiwiaGFzIiwiY29uc29sZSIsIndhcm4iLCJzZXQiLCJyZW1vdmUiLCJkZWxldGUiLCJleHRyYURhdGEiLCJmaWxlRGF0YSIsIk5hdGl2ZUJ1Z1JlcG9ydGluZyIsInNldEV4dHJhRGF0YSIsIk5hdGl2ZVJlZEJveCIsImV4dHJhcyIsImZpbGVzIiwiTWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkJ1Z1JlcG9ydGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IFJDVERldmljZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvUkNURGV2aWNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBOYXRpdmVSZWRCb3ggZnJvbSAnLi4vTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVSZWRCb3gnO1xuaW1wb3J0IHt0eXBlIEV2ZW50U3Vic2NyaXB0aW9ufSBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IE5hdGl2ZUJ1Z1JlcG9ydGluZyBmcm9tICcuL05hdGl2ZUJ1Z1JlcG9ydGluZyc7XG5cbnR5cGUgRXh0cmFEYXRhID0ge1trZXk6IHN0cmluZ106IHN0cmluZywgLi4ufTtcbnR5cGUgU291cmNlQ2FsbGJhY2sgPSAoKSA9PiBzdHJpbmc7XG50eXBlIERlYnVnRGF0YSA9IHtcbiAgZXh0cmFzOiBFeHRyYURhdGEsXG4gIGZpbGVzOiBFeHRyYURhdGEsXG4gIC4uLlxufTtcblxuZnVuY3Rpb24gZGVmYXVsdEV4dHJhcygpIHtcbiAgQnVnUmVwb3J0aW5nLmFkZEZpbGVTb3VyY2UoJ3JlYWN0X2hpZXJhcmNoeS50eHQnLCAoKSA9PlxuICAgIHJlcXVpcmUoJy4vZHVtcFJlYWN0VHJlZScpKCksXG4gICk7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgY2xhc3MgZm9yIGNvbGxlY3RpbmcgYnVnIHJlcG9ydCBkYXRhLiBDb21wb25lbnRzIGNhbiBhZGQgc291cmNlcyB0aGF0IHdpbGwgYmUgcXVlcmllZCB3aGVuIGEgYnVnIHJlcG9ydFxuICogaXMgY3JlYXRlZCB2aWEgYGNvbGxlY3RFeHRyYURhdGFgLiBGb3IgZXhhbXBsZSwgYSBsaXN0IGNvbXBvbmVudCBtaWdodCBhZGQgYSBzb3VyY2UgdGhhdCBwcm92aWRlcyB0aGUgbGlzdCBvZiByb3dzXG4gKiB0aGF0IGFyZSBjdXJyZW50bHkgdmlzaWJsZSBvbiBzY3JlZW4uIENvbXBvbmVudHMgc2hvdWxkIGFsc28gcmVtZW1iZXIgdG8gY2FsbCBgcmVtb3ZlKClgIG9uIHRoZSBvYmplY3QgdGhhdCBpc1xuICogcmV0dXJuZWQgYnkgYGFkZFNvdXJjZWAgd2hlbiB0aGV5IGFyZSB1bm1vdW50ZWQuXG4gKi9cbmNsYXNzIEJ1Z1JlcG9ydGluZyB7XG4gIHN0YXRpYyBfZXh0cmFTb3VyY2VzOiBNYXA8c3RyaW5nLCBTb3VyY2VDYWxsYmFjaz4gPSBuZXcgTWFwKCk7XG4gIHN0YXRpYyBfZmlsZVNvdXJjZXM6IE1hcDxzdHJpbmcsIFNvdXJjZUNhbGxiYWNrPiA9IG5ldyBNYXAoKTtcbiAgc3RhdGljIF9zdWJzY3JpcHRpb246ID9FdmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIHN0YXRpYyBfcmVkYm94U3Vic2NyaXB0aW9uOiA/RXZlbnRTdWJzY3JpcHRpb24gPSBudWxsO1xuXG4gIHN0YXRpYyBfbWF5YmVJbml0KCkge1xuICAgIGlmICghQnVnUmVwb3J0aW5nLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgIEJ1Z1JlcG9ydGluZy5fc3Vic2NyaXB0aW9uID0gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgICAnY29sbGVjdEJ1Z0V4dHJhRGF0YScsXG4gICAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbiAgICAgICAgQnVnUmVwb3J0aW5nLmNvbGxlY3RFeHRyYURhdGEsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgICAgZGVmYXVsdEV4dHJhcygpO1xuICAgIH1cblxuICAgIGlmICghQnVnUmVwb3J0aW5nLl9yZWRib3hTdWJzY3JpcHRpb24pIHtcbiAgICAgIEJ1Z1JlcG9ydGluZy5fcmVkYm94U3Vic2NyaXB0aW9uID0gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgICAnY29sbGVjdFJlZEJveEV4dHJhRGF0YScsXG4gICAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbiAgICAgICAgQnVnUmVwb3J0aW5nLmNvbGxlY3RFeHRyYURhdGEsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYXBzIGEgc3RyaW5nIGtleSB0byBhIHNpbXBsZSBjYWxsYmFjayB0aGF0IHNob3VsZCByZXR1cm4gYSBzdHJpbmcgcGF5bG9hZCB0byBiZSBhdHRhY2hlZFxuICAgKiB0byBhIGJ1ZyByZXBvcnQuIFNvdXJjZSBjYWxsYmFja3MgYXJlIGNhbGxlZCB3aGVuIGBjb2xsZWN0RXh0cmFEYXRhYCBpcyBjYWxsZWQuXG4gICAqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRvIHJlbW92ZSB0aGUgc291cmNlIHdoZW4gdGhlIGNvbXBvbmVudCB1bm1vdW50cy5cbiAgICpcbiAgICogQ29uZmxpY3RzIHRyYW1wbGUgd2l0aCBhIHdhcm5pbmcuXG4gICAqL1xuICBzdGF0aWMgYWRkU291cmNlKFxuICAgIGtleTogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiBTb3VyY2VDYWxsYmFjayxcbiAgKToge3JlbW92ZTogKCkgPT4gdm9pZCwgLi4ufSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZFNvdXJjZShrZXksIGNhbGxiYWNrLCBCdWdSZXBvcnRpbmcuX2V4dHJhU291cmNlcyk7XG4gIH1cblxuICAvKipcbiAgICogTWFwcyBhIHN0cmluZyBrZXkgdG8gYSBzaW1wbGUgY2FsbGJhY2sgdGhhdCBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHBheWxvYWQgdG8gYmUgYXR0YWNoZWRcbiAgICogdG8gYSBidWcgcmVwb3J0LiBTb3VyY2UgY2FsbGJhY2tzIGFyZSBjYWxsZWQgd2hlbiBgY29sbGVjdEV4dHJhRGF0YWAgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0byByZW1vdmUgdGhlIHNvdXJjZSB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHMuXG4gICAqXG4gICAqIENvbmZsaWN0cyB0cmFtcGxlIHdpdGggYSB3YXJuaW5nLlxuICAgKi9cbiAgc3RhdGljIGFkZEZpbGVTb3VyY2UoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IFNvdXJjZUNhbGxiYWNrLFxuICApOiB7cmVtb3ZlOiAoKSA9PiB2b2lkLCAuLi59IHtcbiAgICByZXR1cm4gdGhpcy5fYWRkU291cmNlKGtleSwgY2FsbGJhY2ssIEJ1Z1JlcG9ydGluZy5fZmlsZVNvdXJjZXMpO1xuICB9XG5cbiAgc3RhdGljIF9hZGRTb3VyY2UoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IFNvdXJjZUNhbGxiYWNrLFxuICAgIHNvdXJjZTogTWFwPHN0cmluZywgU291cmNlQ2FsbGJhY2s+LFxuICApOiB7cmVtb3ZlOiAoKSA9PiB2b2lkLCAuLi59IHtcbiAgICBCdWdSZXBvcnRpbmcuX21heWJlSW5pdCgpO1xuICAgIGlmIChzb3VyY2UuaGFzKGtleSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYEJ1Z1JlcG9ydGluZy5hZGQqIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBmb3Igc2FtZSBrZXkgJyR7a2V5fSdgLFxuICAgICAgKTtcbiAgICB9XG4gICAgc291cmNlLnNldChrZXksIGNhbGxiYWNrKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiAoKSA9PiB7XG4gICAgICAgIHNvdXJjZS5kZWxldGUoa2V5KTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNhbiBiZSBjYWxsZWQgZnJvbSBhIG5hdGl2ZSBidWcgcmVwb3J0aW5nIGZsb3csIG9yIGZyb20gSlMgY29kZS5cbiAgICpcbiAgICogSWYgYXZhaWxhYmxlLCB0aGlzIHdpbGwgY2FsbCBgTmF0aXZlTW9kdWxlcy5CdWdSZXBvcnRpbmcuc2V0RXh0cmFEYXRhKGV4dHJhRGF0YSlgXG4gICAqIGFmdGVyIGNvbGxlY3RpbmcgYGV4dHJhRGF0YWAuXG4gICAqL1xuICBzdGF0aWMgY29sbGVjdEV4dHJhRGF0YSgpOiBEZWJ1Z0RhdGEge1xuICAgIGNvbnN0IGV4dHJhRGF0YTogRXh0cmFEYXRhID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCBjYWxsYmFja10gb2YgQnVnUmVwb3J0aW5nLl9leHRyYVNvdXJjZXMpIHtcbiAgICAgIGV4dHJhRGF0YVtrZXldID0gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgY29uc3QgZmlsZURhdGE6IEV4dHJhRGF0YSA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgY2FsbGJhY2tdIG9mIEJ1Z1JlcG9ydGluZy5fZmlsZVNvdXJjZXMpIHtcbiAgICAgIGZpbGVEYXRhW2tleV0gPSBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGlmIChOYXRpdmVCdWdSZXBvcnRpbmcgIT0gbnVsbCAmJiBOYXRpdmVCdWdSZXBvcnRpbmcuc2V0RXh0cmFEYXRhICE9IG51bGwpIHtcbiAgICAgIE5hdGl2ZUJ1Z1JlcG9ydGluZy5zZXRFeHRyYURhdGEoZXh0cmFEYXRhLCBmaWxlRGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKE5hdGl2ZVJlZEJveCAhPSBudWxsICYmIE5hdGl2ZVJlZEJveC5zZXRFeHRyYURhdGEgIT0gbnVsbCkge1xuICAgICAgTmF0aXZlUmVkQm94LnNldEV4dHJhRGF0YShleHRyYURhdGEsICdGcm9tIEJ1Z1JlcG9ydGluZy5qcycpO1xuICAgIH1cblxuICAgIHJldHVybiB7ZXh0cmFzOiBleHRyYURhdGEsIGZpbGVzOiBmaWxlRGF0YX07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCdWdSZXBvcnRpbmc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFVQTtBQUNBO0FBRUE7QUFVQSxTQUFTQSxhQUFhLEdBQUc7RUFDdkJDLFlBQVksQ0FBQ0MsYUFBYSxDQUFDLHFCQUFxQixFQUFFO0lBQUEsT0FDaERDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO0VBQUEsRUFDN0I7QUFDSDtBQUFDLElBUUtGLFlBQVk7RUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUEsT0FNaEIsc0JBQW9CO01BQ2xCLElBQUksQ0FBQ0EsWUFBWSxDQUFDRyxhQUFhLEVBQUU7UUFDL0JILFlBQVksQ0FBQ0csYUFBYSxHQUFHQyw4QkFBcUIsQ0FBQ0MsV0FBVyxDQUM1RCxxQkFBcUIsRUFFckJMLFlBQVksQ0FBQ00sZ0JBQWdCLEVBQzdCLElBQUksQ0FDTDtRQUNEUCxhQUFhLEVBQUU7TUFDakI7TUFFQSxJQUFJLENBQUNDLFlBQVksQ0FBQ08sbUJBQW1CLEVBQUU7UUFDckNQLFlBQVksQ0FBQ08sbUJBQW1CLEdBQUdILDhCQUFxQixDQUFDQyxXQUFXLENBQ2xF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