eef875bd9a7258c5885e3facfa8eceb3
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTTextInlineImage',
  bubblingEventTypes: {},
  directEventTypes: {},
  validAttributes: {
    resizeMode: true,
    src: true,
    tintColor: {
      process: require('../StyleSheet/processColor')
    },
    headers: true
  }
};
exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = TextInlineImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInZhbGlkQXR0cmlidXRlcyIsInJlc2l6ZU1vZGUiLCJzcmMiLCJ0aW50Q29sb3IiLCJwcm9jZXNzIiwicmVxdWlyZSIsImhlYWRlcnMiLCJUZXh0SW5saW5lSW1hZ2UiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsImdldCJdLCJzb3VyY2VzIjpbIlRleHRJbmxpbmVJbWFnZU5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEhvc3RDb21wb25lbnQsXG4gIFBhcnRpYWxWaWV3Q29uZmlnLFxufSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge0ltYWdlUmVzaXplTW9kZX0gZnJvbSAnLi9JbWFnZVJlc2l6ZU1vZGUnO1xuXG5pbXBvcnQgKiBhcyBOYXRpdmVDb21wb25lbnRSZWdpc3RyeSBmcm9tICcuLi9OYXRpdmVDb21wb25lbnQvTmF0aXZlQ29tcG9uZW50UmVnaXN0cnknO1xuXG50eXBlIE5hdGl2ZVByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uVmlld1Byb3BzLFxuICByZXNpemVNb2RlPzogP0ltYWdlUmVzaXplTW9kZSxcbiAgc3JjPzogPyRSZWFkT25seUFycmF5PD8kUmVhZE9ubHk8e3VyaT86ID9zdHJpbmcsIC4uLn0+PixcbiAgdGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIGhlYWRlcnM/OiA/e1tzdHJpbmddOiBzdHJpbmd9LFxufT47XG5cbmV4cG9ydCBjb25zdCBfX0lOVEVSTkFMX1ZJRVdfQ09ORklHOiBQYXJ0aWFsVmlld0NvbmZpZyA9IHtcbiAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dElubGluZUltYWdlJyxcbiAgYnViYmxpbmdFdmVudFR5cGVzOiB7fSxcbiAgZGlyZWN0RXZlbnRUeXBlczoge30sXG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIHJlc2l6ZU1vZGU6IHRydWUsXG4gICAgc3JjOiB0cnVlLFxuICAgIHRpbnRDb2xvcjoge1xuICAgICAgcHJvY2VzczogcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKSxcbiAgICB9LFxuICAgIGhlYWRlcnM6IHRydWUsXG4gIH0sXG59O1xuXG5jb25zdCBUZXh0SW5saW5lSW1hZ2U6IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+ID1cbiAgTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkuZ2V0PE5hdGl2ZVByb3BzPihcbiAgICAnUkNUVGV4dElubGluZUltYWdlJyxcbiAgICAoKSA9PiBfX0lOVEVSTkFMX1ZJRVdfQ09ORklHLFxuICApO1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0SW5saW5lSW1hZ2U7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUM7RUFBQTtBQUFBO0FBQUE7QUFVYjtBQUFzRjtBQUFBO0FBVS9FLElBQU1BLHNCQUF5QyxHQUFHO0VBQ3ZEQyxlQUFlLEVBQUUsb0JBQW9CO0VBQ3JDQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7RUFDdEJDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztFQUNwQkMsZUFBZSxFQUFFO0lBQ2ZDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsSUFBSTtJQUNUQyxTQUFTLEVBQUU7TUFDVEMsT0FBTyxFQUFFQyxPQUFPLENBQUMsNEJBQTRCO0lBQy9DLENBQUM7SUFDREMsT0FBTyxFQUFFO0VBQ1g7QUFDRixDQUFDO0FBQUM7QUFFRixJQUFNQyxlQUEyQyxHQUMvQ0MsdUJBQXVCLENBQUNDLEdBQUcsQ0FDekIsb0JBQW9CLEVBQ3BCO0VBQUEsT0FBTWIsc0JBQXNCO0FBQUEsRUFDN0I7QUFBQyxlQUVXVyxlQUFlO0FBQUEifQ==