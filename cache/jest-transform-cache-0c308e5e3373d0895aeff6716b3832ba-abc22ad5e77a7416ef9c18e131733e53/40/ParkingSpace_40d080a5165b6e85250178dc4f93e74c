0ae5c4600b775046e33b9016926c8860
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ParkingSpace;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeModalDatetimePicker = _interopRequireDefault(require("react-native-modal-datetime-picker"));
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ParkingSpace(_ref) {
  var route = _ref.route;
  var numspaces = route.params.numspaces;
  var _useState = (0, _react.useState)(Array(numspaces).fill(null)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    details = _useState2[0],
    setDetails = _useState2[1];
  var navigation = (0, _native.useNavigation)();
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedSpace = _useState4[0],
    setSelected = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showPicker = _useState6[0],
    setPicker = _useState6[1];
  var _useState7 = (0, _react.useState)(new Date()),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    time = _useState8[0],
    setTime = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    reg = _useState10[0],
    setReg = _useState10[1];
  var _useState11 = (0, _react.useState)(function () {
      var spaces = [];
      for (var i = 1; i <= numspaces; i++) {
        spaces.push(i);
      }
      return spaces;
    }),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    parkingSpaces = _useState12[0],
    setParkingSpaces = _useState12[1];
  var handleAddParkingSpace = function handleAddParkingSpace() {
    setParkingSpaces(function (spaces) {
      return [].concat((0, _toConsumableArray2.default)(spaces), [spaces.length + 1]);
    });
  };
  function handleSelected(space) {
    var _details;
    var occupied = details[space - 1] && ((_details = details[space - 1]) == null ? void 0 : _details.selected) === space;
    if (occupied) {
      var _details2, _details3;
      navigation.navigate('Payment', {
        spaces: numspaces,
        space: space,
        details: {
          time: (_details2 = details[space - 1]) == null ? void 0 : _details2.time,
          reg: (_details3 = details[space - 1]) == null ? void 0 : _details3.reg
        },
        markSpaceAsUnoccupied: function markSpaceAsUnoccupied(space) {
          return _markSpaceAsUnoccupied(space);
        }
      });
    } else {
      setSelected(space);
    }
  }
  function handleParkVehicle(selectedSpace) {
    var newDetails = (0, _toConsumableArray2.default)(details);
    newDetails[selectedSpace - 1] = {
      selected: selectedSpace,
      time: time,
      reg: reg
    };
    setDetails(newDetails);
  }
  var setVehicleRegistration = function setVehicleRegistration(text) {
    setReg(text);
  };
  var hidePicker = function hidePicker() {
    setPicker(false);
  };
  var setParkingTime = function setParkingTime(selectedTime) {
    setTime(selectedTime);
    hidePicker();
  };
  function _markSpaceAsUnoccupied(space) {
    var newDetails = (0, _toConsumableArray2.default)(details);
    newDetails[space - 1] = null;
    setDetails(newDetails);
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    contentContainerStyle: styles.container,
    horizontal: true,
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "add-parking-space-button",
      style: styles.buttonStyling1,
      onPress: handleAddParkingSpace,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Create New Parking"
      })
    }), parkingSpaces.map(function (space) {
      var _details4, _details5, _details6;
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "parking-space-" + space,
        onPress: function onPress() {
          return handleSelected(space);
        },
        style: styles.parkingSpace,
        children: details[space - 1] && ((_details4 = details[space - 1]) == null ? void 0 : _details4.selected) === space ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.spaceDetails,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              color: 'white'
            },
            children: space
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              color: 'white'
            },
            children: (_details5 = details[space - 1]) == null ? void 0 : _details5.reg
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              color: 'white'
            },
            children: (_details6 = details[space - 1]) == null ? void 0 : _details6.time.toLocaleTimeString()
          })]
        }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.parkingNumber,
          children: space
        })
      }, space);
    }), selectedSpace > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.formContainer,
      testID: "selected-parking-space",
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: reg
      }), (0, _jsxRuntime.jsx)(_reactNativeModalDatetimePicker.default, {
        isVisible: showPicker,
        mode: "time",
        onConfirm: setParkingTime,
        onCancel: function onCancel() {
          return hidePicker();
        }
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        testID: "parking-time-label",
        children: "Parking Time (tap to change)"
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.setTimeButton,
        onPress: function onPress() {
          setPicker(true);
        },
        testID: "change-time-button",
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          testID: "parking-time",
          children: time.toLocaleTimeString()
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        testID: "car-registration-label",
        children: "Car Registration"
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        placeholder: "Enter vehicle registration",
        onChangeText: setVehicleRegistration,
        style: styles.formInput,
        testID: "vehicle-registration-input"
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "submit-button",
        onPress: function onPress() {
          return handleParkVehicle(selectedSpace);
        },
        style: styles.buttonStyling2,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: 'white'
          },
          children: "Submit"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.buttonStyling2,
        onPress: function onPress() {
          setSelected(0);
          setVehicleRegistration('');
          setParkingTime(new Date());
        },
        testID: "close-button",
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: 'white'
          },
          children: "Close"
        })
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flexGrow: 1,
    alignItems: 'center',
    flexDirection: 'column',
    flexWrap: 'wrap',
    justifyContent: 'center',
    backgroundColor: '#F5EFEF'
  },
  parkingSpace: {
    width: 110,
    backgroundColor: '#EFEFEF',
    height: 85,
    borderWidth: 2.5,
    borderStyle: 'dotted',
    borderColor: '#49C78C',
    margin: 5,
    marginHorizontal: 48,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 20
  },
  parkingNumber: {
    fontSize: 20
  },
  buttonStyling1: {
    top: 0,
    position: 'absolute',
    padding: 10,
    backgroundColor: '#E1EDF8'
  },
  formInput: {
    marginTop: 7,
    width: '100%',
    height: 33,
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 7,
    flex: 1,
    textAlign: 'center'
  },
  formContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 20,
    paddingVertical: 10,
    zIndex: 1
  },
  buttonStyling2: {
    marginTop: 5,
    backgroundColor: '#0551B4',
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 7,
    borderRadius: 5
  },
  setTimeButton: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'white',
    borderWidth: 1,
    padding: 5
  },
  spaceDetails: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#0551B4',
    padding: 25
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,