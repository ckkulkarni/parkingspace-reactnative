4b4a82cc3f83de8a8a68518bf183c2df
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn(function () {
      return Promise.resolve({
        ok: true
      });
    });
    var markSpaceAsUnoccupied = jest.fn();
    var navigation = {
      goBack: jest.fn()
    };
    var details = {
      reg: 'AB12CDE',
      time: new Date().toISOString()
    };
    var route = {
      params: {
        details: details,
        markSpaceAsUnoccupied: markSpaceAsUnoccupied,
        space: 1,
        spaces: [1, 2, 3]
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render3.getByTestId,
      queryByText = _render3.queryByText;
    _reactNative.fireEvent.press(getByTestId('deregester-payment-button'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(queryByText('Payment Sucessful')).not.toBeNull();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIml0IiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInBhcmFtcyIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsImdsb2JhbCIsImZldGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvayIsIm1hcmtTcGFjZUFzVW5vY2N1cGllZCIsIm5hdmlnYXRpb24iLCJzcGFjZSIsInNwYWNlcyIsInF1ZXJ5QnlUZXh0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ3YWl0Rm9yIiwibm90IiwidG9CZU51bGwiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXIsIHVzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55O1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5jb25zdCBjYWxjdWxhdGVDaGFyZ2VzTW9jayA9IGplc3QuZm4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT5cclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICBvazogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG1hcmtTcGFjZUFzVW5vY2N1cGllZCA9IGplc3QuZm4oKTtcclxuICAgIGNvbnN0IG5hdmlnYXRpb24gPSB7Z29CYWNrOiBqZXN0LmZuKCl9O1xyXG5cclxuICAgIGNvbnN0IGRldGFpbHMgPSB7XHJcbiAgICAgIHJlZzogJ0FCMTJDREUnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJvdXRlID0ge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBkZXRhaWxzLFxyXG4gICAgICAgIG1hcmtTcGFjZUFzVW5vY2N1cGllZCxcclxuICAgICAgICBzcGFjZTogMSxcclxuICAgICAgICBzcGFjZXM6IFsxLCAyLCAzXSxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dH0gPSByZW5kZXIoXHJcbiAgICAgIDxQYXltZW50U2NyZWVuIHJvdXRlPXtyb3V0ZX0gbmF2aWdhdGlvbj17bmF2aWdhdGlvbn0gLz4sXHJcbiAgICApO1xyXG5cclxuICAgIC8vIHNpbXVsYXRlIGEgcHJlc3MgZXZlbnQgb24gdGhlIHBheW1lbnQgYnV0dG9uXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItcGF5bWVudC1idXR0b24nKSk7XHJcblxyXG4gICAgLy8gd2FpdCBmb3IgdGhlIEFsZXJ0IGNvbXBvbmVudCB0byBhcHBlYXIgYW5kIHRoZW4gYXNzZXJ0IHRoYXQgdGhlIHBheW1lbnQgd2FzIHN1Y2Nlc3NmdWxcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT5cclxuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdQYXltZW50IFN1Y2Vzc2Z1bCcpKS5ub3QudG9CZU51bGwoKSxcclxuICAgICk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQU9BLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDbkJHLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFO0lBQ2pCLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQWRIO0FBQ0E7QUFDQTtBQUNBO0FBQW9EO0FBQUE7RUFBQTtJQUFBO0VBQUE7SUFBQTtFQUFBO0VBQUE7QUFBQTtBQWFwRCxJQUFNSSxvQkFBb0IsR0FBR0wsSUFBSSxDQUFDQyxFQUFFLEVBQUU7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