06751bea7e4248f0e1aaf8f13ffdaa23
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Payment Screen/Deregister Parking', function () {
  it('Shows time spent in parking', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var details = {
      reg: 'ABC123',
      time: new Date().toLocaleTimeString()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: {
          params: {
            details: details
          }
        }
      })),
      getByTestId = _render.getByTestId;
    var timer = new Date();
    timer.setHours(timer.getHours() - 1);
    details.time = timer.toISOString();
    jest.advanceTimersByTime(60 * 60 * 1000);
    var timeSpent = getByTestId('deregester-time-spent');
    yield (0, _reactNative.waitFor)(function () {
      return expect(timeSpent.props.children).toBe('Time Spent: 1 hours 0 minutes');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJ1c2VGYWtlVGltZXJzIiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicmVuZGVyIiwicGFyYW1zIiwiZ2V0QnlUZXN0SWQiLCJ0aW1lciIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJ0b0lTT1N0cmluZyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJ0aW1lU3BlbnQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwicHJvcHMiLCJjaGlsZHJlbiIsInRvQmUiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbmRlc2NyaWJlKCdQYXltZW50IFNjcmVlbi9EZXJlZ2lzdGVyIFBhcmtpbmcnLCAoKSA9PiB7XHJcbiAgaXQoJ1Nob3dzIHRpbWUgc3BlbnQgaW4gcGFya2luZycsIGFzeW5jICgpID0+IHtcclxuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xyXG4gICAgY29uc3QgZGV0YWlscyA9IHtcclxuICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgdGltZTogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSxcclxuICAgIH07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxQYXltZW50U2NyZWVuIHJvdXRlPXt7cGFyYW1zOiB7ZGV0YWlsc319fSAvPik7XHJcbiAgICBjb25zdCB0aW1lciA9IG5ldyBEYXRlKCk7XHJcbiAgICB0aW1lci5zZXRIb3Vycyh0aW1lci5nZXRIb3VycygpIC0gMSk7XHJcbiAgICBkZXRhaWxzLnRpbWUgPSB0aW1lci50b0lTT1N0cmluZygpO1xyXG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDYwICogNjAgKiAxMDAwKTtcclxuICAgIGNvbnN0IHRpbWVTcGVudCA9IGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLXRpbWUtc3BlbnQnKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT5cclxuICAgICAgZXhwZWN0KHRpbWVTcGVudC5wcm9wcy5jaGlsZHJlbikudG9CZSgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKSxcclxuICAgICk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQU1BLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQVpIO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBdUQ7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBUXZELElBQU1HLFVBQVUsR0FBRyxJQUFBTCxxQkFBYSxHQUFrQztBQUNsRU0sUUFBUSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07RUFDbERDLEVBQUUsQ0FBQyw2QkFBNkIsa0NBQUUsYUFBWTtJQUM1Q04sSUFBSSxDQUFDTyxhQUFhLEVBQUU7SUFDcEIsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLEVBQUUsQ0FBQ0Msa0JBQWtCO0lBQ3JDLENBQUM7SUFDRCxjQUFzQixJQUFBQyxtQkFBTSxFQUFDLHFCQUFDLHNCQUFhO1FBQUMsS0FBSyxFQUFFO1VBQUNDLE1BQU0sRUFBRTtZQUFDTixPQUFPLEVBQVBBO1VBQU87UUFBQztNQUFFLEVBQUcsQ0FBQztNQUFwRU8sV0FBVyxXQUFYQSxXQUFXO0lBQ2xCLElBQU1DLEtBQUssR0FBRyxJQUFJTCxJQUFJLEVBQUU7SUFDeEJLLEtBQUssQ0FBQ0MsUUFBUSxDQUFDRCxLQUFLLENBQUNFLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwQ1YsT0FBTyxDQUFDRSxJQUFJLEdBQUdNLEtBQUssQ0FBQ0csV0FBVyxFQUFFO0lBQ2xDbkIsSUFBSSxDQUFDb0IsbUJBQW1CLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDeEMsSUFBTUMsU0FBUyxHQUFHTixXQUFXLENBQUMsdUJBQXVCLENBQUM7SUFDdEQsTUFBTSxJQUFBTyxvQkFBTyxFQUFDO01BQUEsT0FDWkMsTUFBTSxDQUFDRixTQUFTLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztJQUFBLEVBQ3ZFO0VBQ0gsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIn0=