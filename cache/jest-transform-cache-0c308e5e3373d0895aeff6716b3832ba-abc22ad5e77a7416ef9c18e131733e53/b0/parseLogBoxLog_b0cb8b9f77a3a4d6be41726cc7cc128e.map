{"version":3,"names":["BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","UTFSequence","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","stringifySafe","push","offset","remainingArgs","map","arg","category","join","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","parseErrorStack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","slice","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","codeFrame","level","type","isComponentError","componentStack","babelTransformError","babelCodeFrameError","isFatal","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  // eslint-disable-next-line no-control-regex\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(args: $ReadOnlyArray<mixed>): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack: Array<mixed> = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":";;;;;;;;;;AAaA;AACA;AACA;AAEA,IAAMA,4BAA4B,GAChC,gGAAgG;AAClG,IAAMC,6BAA6B,GAEjC,k/BAAsG;AACxG,IAAMC,kBAAkB,GACtB,0hBAA6F;AAiC/F,IAAMC,YAAY,GAAGC,oBAAW,CAACC,GAAG,GAAG,IAAI;AAEpC,SAASC,kBAAkB,CAACC,IAA2B,EAG1D;EACF,IAAMC,aAAa,GAAG,EAAE;EACxB,IAAMC,YAAY,GAAG,EAAE;EACvB,IAAMC,mBAAmB,GAAG,EAAE;EAE9B,IAAMC,SAAS,oCAAOJ,IAAI,CAAC;EAC3B,IAAI,OAAOI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACpC,IAAMC,YAAY,GAAGC,MAAM,CAACF,SAAS,CAACG,KAAK,EAAE,CAAC;IAC9C,IAAMC,iBAAiB,GAAGH,YAAY,CAACI,KAAK,CAAC,IAAI,CAAC;IAClD,IAAMC,iBAAiB,GAAGF,iBAAiB,CAACG,MAAM,GAAG,CAAC;IACtD,IAAMC,aAAa,GAAGR,SAAS,CAACS,MAAM,CAAC,CAAC,EAAEH,iBAAiB,CAAC;IAE5D,IAAII,cAAc,GAAG,EAAE;IACvB,IAAIC,aAAa,GAAG,EAAE;IAEtB,IAAIC,iBAAiB,GAAG,CAAC;IACzB,KAAK,IAAMC,gBAAgB,IAAIT,iBAAiB,EAAE;MAChDM,cAAc,IAAIG,gBAAgB;MAClCF,aAAa,IAAIE,gBAAgB;MAEjC,IAAID,iBAAiB,GAAGN,iBAAiB,EAAE;QACzC,IAAIM,iBAAiB,GAAGJ,aAAa,CAACD,MAAM,EAAE;UAI5C,IAAMO,YAAY,GAChB,OAAON,aAAa,CAACI,iBAAiB,CAAC,KAAK,QAAQ,GAChDJ,aAAa,CAACI,iBAAiB,CAAC,GAChC,IAAAG,sBAAa,EAACP,aAAa,CAACI,iBAAiB,CAAC,CAAC;UACrDb,mBAAmB,CAACiB,IAAI,CAAC;YACvBT,MAAM,EAAEO,YAAY,CAACP,MAAM;YAC3BU,MAAM,EAAEN,aAAa,CAACJ;UACxB,CAAC,CAAC;UAEFG,cAAc,IAAIlB,YAAY;UAC9BmB,aAAa,IAAIG,YAAY;QAC/B,CAAC,MAAM;UACLf,mBAAmB,CAACiB,IAAI,CAAC;YACvBT,MAAM,EAAE,CAAC;YACTU,MAAM,EAAEN,aAAa,CAACJ;UACxB,CAAC,CAAC;UAEFG,cAAc,IAAI,IAAI;UACtBC,aAAa,IAAI,IAAI;QACvB;QAEAC,iBAAiB,EAAE;MACrB;IACF;IAEAf,aAAa,CAACmB,IAAI,CAACN,cAAc,CAAC;IAClCZ,YAAY,CAACkB,IAAI,CAACL,aAAa,CAAC;EAClC;EAEA,IAAMO,aAAa,GAAGlB,SAAS,CAACmB,GAAG,CAAC,UAAAC,GAAG,EAAI;IAIzC,OAAO,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,IAAAL,sBAAa,EAACK,GAAG,CAAC;EAC3D,CAAC,CAAC;EACFvB,aAAa,CAACmB,IAAI,OAAlBnB,aAAa,mCAASqB,aAAa,EAAC;EACpCpB,YAAY,CAACkB,IAAI,OAAjBlB,YAAY,mCAASoB,aAAa,EAAC;EAEnC,OAAO;IACLG,QAAQ,EAAExB,aAAa,CAACyB,IAAI,CAAC,GAAG,CAAC;IACjCC,OAAO,EAAE;MACPC,OAAO,EAAE1B,YAAY,CAACwB,IAAI,CAAC,GAAG,CAAC;MAC/Bd,aAAa,EAAET;IACjB;EACF,CAAC;AACH;AAEA,SAAS0B,gBAAgB,CAACC,eAAuB,EAAE;EACjD,IAAMC,yBAAyB,GAAG,QAAQ,CAACC,IAAI,CAACF,eAAe,CAAC;EAChE,IAAMG,yBAAyB,GAAG,QAAQ,CAACD,IAAI,CAACF,eAAe,CAAC;EAChE,IAAMI,4BAA4B,GAAG,OAAO,CAACF,IAAI,CAACF,eAAe,CAAC;EAElE,OACEC,yBAAyB,IACzBE,yBAAyB,IACzBC,4BAA4B;AAEhC;AAEO,SAASC,mBAAmB,CAACR,OAAe,EAAkB;EAInE,IAAMS,KAAK,GAAG,IAAAC,wBAAe,EAACV,OAAO,CAAC;EACtC,IAAIS,KAAK,IAAIA,KAAK,CAACzB,MAAM,GAAG,CAAC,EAAE;IAC7B,OAAOyB,KAAK,CAACb,GAAG,CAAC,UAAAe,KAAK;MAAA,OAAK;QACzBV,OAAO,EAAEU,KAAK,CAACC,UAAU;QACzBC,QAAQ,EAAEF,KAAK,CAACE,QAAQ,IAAI,KAAK;QACjCC,QAAQ,EAAEH,KAAK,CAACI,IAAI,IAAI,IAAI,GAAG,SAAS,GAAGJ,KAAK,CAACI,IAAI;QACrDC,QAAQ,EAAE;UACRC,MAAM,EAAEN,KAAK,CAACM,MAAM,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGN,KAAK,CAACM,MAAM;UAChDC,GAAG,EAAEP,KAAK,CAACQ,UAAU,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGR,KAAK,CAACQ;QAC7C;MACF,CAAC;IAAA,CAAC,CAAC;EACL;EAEA,OAAOnB,OAAO,CACXlB,KAAK,CAAC,YAAY,CAAC,CACnBc,GAAG,CAAC,UAAAwB,CAAC,EAAI;IACR,IAAI,CAACA,CAAC,EAAE;MACN,OAAO,IAAI;IACb;IACA,IAAMC,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,8BAA8B,CAAC;IACrD,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,IAAI;IACb;IAEA,mBAA+BA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;MAAA;MAAxCrB,OAAO;MAAEa,QAAQ;MAAEI,GAAG;IAC3B,OAAO;MACLjB,OAAO,EAAPA,OAAO;MACPa,QAAQ,EAARA,QAAQ;MACRE,QAAQ,EAAE;QAACC,MAAM,EAAE,CAAC,CAAC;QAAEC,GAAG,EAAEK,QAAQ,CAACL,GAAG,EAAE,EAAE;MAAC;IAC/C,CAAC;EACH,CAAC,CAAC,CACDM,MAAM,CAACC,OAAO,CAAC;AACpB;AAEO,SAASC,oBAAoB,CAClCC,KAA4B,EACb;EACf,IAAM3B,OAAO,GACX2B,KAAK,CAACC,eAAe,IAAI,IAAI,GAAGD,KAAK,CAACC,eAAe,GAAG,SAAS;EAEnE,IAAMC,kBAAkB,GAAG7B,OAAO,CAACqB,KAAK,CAACrD,kBAAkB,CAAC;EAC5D,IAAI6D,kBAAkB,EAAE;IACtB,4BACEA,kBAAkB,CAACP,KAAK,CAAC,CAAC,CAAC;MAAA;MADtBrB,OAAO;MAAEa,QAAQ;MAAEI,GAAG;MAAED,MAAM;MAAEa,SAAS;IAGhD,OAAO;MACLC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,aAAa;MACnBvB,KAAK,EAAE,EAAE;MACTwB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,QAAQ;QACRE,QAAQ,EAAE;UACRE,GAAG,EAAEK,QAAQ,CAACL,GAAG,EAAE,EAAE,CAAC;UACtBD,MAAM,EAAEM,QAAQ,CAACN,MAAM,EAAE,EAAE;QAC7B,CAAC;QACDhB,OAAO,EAAE6B;MACX,CAAC;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,OAAO;QACPhB,aAAa,EAAE;MACjB,CAAC;MACDa,QAAQ,EAAKgB,QAAQ,SAAII,GAAG,SAAID;IAClC,CAAC;EACH;EAEA,IAAMkB,mBAAmB,GAAGnC,OAAO,CAACqB,KAAK,CAACvD,4BAA4B,CAAC;EACvE,IAAIqE,mBAAmB,EAAE;IAEvB,4BACEA,mBAAmB,CAACb,KAAK,CAAC,CAAC,CAAC;MAAA;MADvBR,SAAQ;MAAEb,QAAO;MAAEiB,IAAG;MAAED,OAAM;MAAEa,UAAS;IAGhD,OAAO;MACLC,KAAK,EAAE,QAAQ;MACftB,KAAK,EAAE,EAAE;MACTwB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,SAAQ;QACRE,QAAQ,EAAE;UACRE,GAAG,EAAEK,QAAQ,CAACL,IAAG,EAAE,EAAE,CAAC;UACtBD,MAAM,EAAEM,QAAQ,CAACN,OAAM,EAAE,EAAE;QAC7B,CAAC;QACDhB,OAAO,EAAE6B;MACX,CAAC;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,QAAO;QACPhB,aAAa,EAAE;MACjB,CAAC;MACDa,QAAQ,EAAKgB,SAAQ,SAAII,IAAG,SAAID;IAClC,CAAC;EACH;EAEA,IAAMmB,mBAAmB,GAAGpC,OAAO,CAACqB,KAAK,CAACtD,6BAA6B,CAAC;EAExE,IAAIqE,mBAAmB,EAAE;IAEvB,4BAAuCA,mBAAmB,CAACd,KAAK,CAAC,CAAC,CAAC;MAAA;MAA5DR,UAAQ;MAAEb,SAAO;MAAE6B,WAAS;IACnC,OAAO;MACLC,KAAK,EAAE,QAAQ;MACftB,KAAK,EAAE,EAAE;MACTwB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,UAAQ;QACRE,QAAQ,EAAE,IAAI;QACdf,OAAO,EAAE6B;MACX,CAAC;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,SAAO;QACPhB,aAAa,EAAE;MACjB,CAAC;MACDa,QAAQ,EAAKgB,UAAQ,SAAI,CAAC,SAAI;IAChC,CAAC;EACH;EAEA,IAAId,OAAO,CAACqB,KAAK,CAAC,kBAAkB,CAAC,EAAE;IACrC,OAAO;MACLU,KAAK,EAAE,QAAQ;MACftB,KAAK,EAAEkB,KAAK,CAAClB,KAAK;MAClBwB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EAAE,EAAE;MAClBlC,OAAO,EAAE;QACPC,OAAO,EAAED,OAAO;QAChBf,aAAa,EAAE;MACjB,CAAC;MACDa,QAAQ,EAAEE;IACZ,CAAC;EACH;EAEA,IAAMkC,cAAc,GAAGP,KAAK,CAACO,cAAc;EAC3C,IAAIP,KAAK,CAACU,OAAO,IAAIV,KAAK,CAACM,gBAAgB,EAAE;IAC3C;MACEF,KAAK,EAAE,OAAO;MACdtB,KAAK,EAAEkB,KAAK,CAAClB,KAAK;MAClBwB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EACZA,cAAc,IAAI,IAAI,GAAG1B,mBAAmB,CAAC0B,cAAc,CAAC,GAAG;IAAE,GAChE9D,kBAAkB,CAAC,CAAC4B,OAAO,CAAC,CAAC;EAEpC;EAEA,IAAIkC,cAAc,IAAI,IAAI,EAAE;IAE1B;MACEH,KAAK,EAAE,OAAO;MACdtB,KAAK,EAAEkB,KAAK,CAAClB,KAAK;MAClBwB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EAAE1B,mBAAmB,CAAC0B,cAAc;IAAC,GAChD9D,kBAAkB,CAAC,CAAC4B,OAAO,CAAC,CAAC;EAEpC;EAIA;IACE+B,KAAK,EAAE,OAAO;IACdtB,KAAK,EAAEkB,KAAK,CAAClB,KAAK;IAClBwB,gBAAgB,EAAEN,KAAK,CAACM;EAAgB,GACrCK,cAAc,CAAC,CAACtC,OAAO,CAAC,CAAC;AAEhC;AAEO,SAASsC,cAAc,CAACjE,IAA2B,EAIvD;EACD,IAAM2B,OAAO,GAAG3B,IAAI,CAAC,CAAC,CAAC;EACvB,IAAIkE,yBAAuC,GAAG,EAAE;EAChD,IAAIL,cAA8B,GAAG,EAAE;EAGvC,IACE,OAAOlC,OAAO,KAAK,QAAQ,IAC3BA,OAAO,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAC1BjD,IAAI,CAACW,MAAM,GAAG,CAAC,EACf;IACA,IAAMwD,OAAO,GAAGnE,IAAI,CAACA,IAAI,CAACW,MAAM,GAAG,CAAC,CAAC;IACrC,IAAI,OAAOwD,OAAO,KAAK,QAAQ,IAAItC,gBAAgB,CAACsC,OAAO,CAAC,EAAE;MAC5DD,yBAAyB,GAAGlE,IAAI,CAACiD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC7CiB,yBAAyB,CAAC,CAAC,CAAC,GAAGvC,OAAO,CAACsB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnDY,cAAc,GAAG1B,mBAAmB,CAACgC,OAAO,CAAC;IAC/C;EACF;EAEA,IAAIN,cAAc,CAAClD,MAAM,KAAK,CAAC,EAAE;IAE/B,KAAK,IAAMa,GAAG,IAAIxB,IAAI,EAAE;MACtB,IAAI,OAAOwB,GAAG,KAAK,QAAQ,IAAIK,gBAAgB,CAACL,GAAG,CAAC,EAAE;QAEpD,IAAI4C,eAAe,GAAG5C,GAAG,CAAC6C,MAAM,CAAC,gBAAgB,CAAC;QAClD,IAAID,eAAe,GAAG,CAAC,EAAE;UAEvBA,eAAe,GAAG5C,GAAG,CAAC6C,MAAM,CAAC,IAAI,CAAC;QACpC;QACA,IAAID,eAAe,GAAG,CAAC,EAAE;UACvBF,yBAAyB,CAAC9C,IAAI,CAACI,GAAG,CAACyB,KAAK,CAAC,CAAC,EAAEmB,eAAe,CAAC,CAAC;QAC/D;QAEAP,cAAc,GAAG1B,mBAAmB,CAACX,GAAG,CAAC;MAC3C,CAAC,MAAM;QACL0C,yBAAyB,CAAC9C,IAAI,CAACI,GAAG,CAAC;MACrC;IACF;EACF;EAEA,yBACKzB,kBAAkB,CAACmE,yBAAyB,CAAC;IAChDL,cAAc,EAAdA;EAAc;AAElB"}