ea78e59cceb598c9f0bc85d39be1536d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var PixelRatio = require('../Utilities/PixelRatio');
var Platform = require('../Utilities/Platform');
var _require = require('./AssetUtils'),
  pickScale = _require.pickScale;
var _require2 = require('@react-native/assets/path-support'),
  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
  getBasePath = _require2.getBasePath;
var invariant = require('invariant');
function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawableFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawableFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = void 0;
    this.jsbundleUrl = void 0;
    this.asset = void 0;
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
  return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaXhlbFJhdGlvIiwicmVxdWlyZSIsIlBsYXRmb3JtIiwicGlja1NjYWxlIiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsImludmFyaWFudCIsImdldFNjYWxlZEFzc2V0UGF0aCIsImFzc2V0Iiwic2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwibmFtZSIsInR5cGUiLCJnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyIiwiZHJhd2FibGVGb2xkZXIiLCJmaWxlTmFtZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJzZXJ2ZXJVcmwiLCJqc2J1bmRsZVVybCIsInN0YXJ0c1dpdGgiLCJpc0xvYWRlZEZyb21TZXJ2ZXIiLCJhc3NldFNlcnZlclVSTCIsIk9TIiwiaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSIsImRyYXdhYmxlRm9sZGVySW5CdW5kbGUiLCJyZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUiLCJzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUiLCJmcm9tU291cmNlIiwiaGFzaCIsInBhdGgiLCJyZXBsYWNlIiwic291cmNlIiwiX19wYWNrYWdlcl9hc3NldCIsIndpZHRoIiwiaGVpZ2h0IiwidXJpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFzc2V0U291cmNlUmVzb2x2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHZlZEFzc2V0U291cmNlID0ge3xcbiAgK19fcGFja2FnZXJfYXNzZXQ6IGJvb2xlYW4sXG4gICt3aWR0aDogP251bWJlcixcbiAgK2hlaWdodDogP251bWJlcixcbiAgK3VyaTogc3RyaW5nLFxuICArc2NhbGU6IG51bWJlcixcbnx9O1xuXG5pbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnQHJlYWN0LW5hdGl2ZS9hc3NldHMvcmVnaXN0cnknO1xuXG5jb25zdCBQaXhlbFJhdGlvID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BpeGVsUmF0aW8nKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCB7cGlja1NjYWxlfSA9IHJlcXVpcmUoJy4vQXNzZXRVdGlscycpO1xuY29uc3Qge1xuICBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lLFxuICBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyLFxuICBnZXRCYXNlUGF0aCxcbn0gPSByZXF1aXJlKCdAcmVhY3QtbmF0aXZlL2Fzc2V0cy9wYXRoLXN1cHBvcnQnKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRTY2FsZWRBc3NldFBhdGgoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IHBpY2tTY2FsZShhc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICBjb25zdCBzY2FsZVN1ZmZpeCA9IHNjYWxlID09PSAxID8gJycgOiAnQCcgKyBzY2FsZSArICd4JztcbiAgY29uc3QgYXNzZXREaXIgPSBnZXRCYXNlUGF0aChhc3NldCk7XG4gIHJldHVybiBhc3NldERpciArICcvJyArIGFzc2V0Lm5hbWUgKyBzY2FsZVN1ZmZpeCArICcuJyArIGFzc2V0LnR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnZHJhd2FibGUtbWRwaS9pY29uLnBuZydcbiAqL1xuZnVuY3Rpb24gZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcihhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gcGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IGRyYXdhYmxlRm9sZGVyID0gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShhc3NldCwgc2NhbGUpO1xuICBjb25zdCBmaWxlTmFtZSA9IGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2FibGVGb2xkZXIgKyAnLycgKyBmaWxlTmFtZSArICcuJyArIGFzc2V0LnR5cGU7XG59XG5cbmNsYXNzIEFzc2V0U291cmNlUmVzb2x2ZXIge1xuICBzZXJ2ZXJVcmw6ID9zdHJpbmc7XG4gIC8vIHdoZXJlIHRoZSBqc2J1bmRsZSBpcyBiZWluZyBydW4gZnJvbVxuICBqc2J1bmRsZVVybDogP3N0cmluZztcbiAgLy8gdGhlIGFzc2V0IHRvIHJlc29sdmVcbiAgYXNzZXQ6IFBhY2thZ2VyQXNzZXQ7XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyVXJsOiA/c3RyaW5nLCBqc2J1bmRsZVVybDogP3N0cmluZywgYXNzZXQ6IFBhY2thZ2VyQXNzZXQpIHtcbiAgICB0aGlzLnNlcnZlclVybCA9IHNlcnZlclVybDtcbiAgICB0aGlzLmpzYnVuZGxlVXJsID0ganNidW5kbGVVcmw7XG4gICAgdGhpcy5hc3NldCA9IGFzc2V0O1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tU2VydmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc2VydmVyVXJsO1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy5qc2J1bmRsZVVybCAmJiB0aGlzLmpzYnVuZGxlVXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSk7XG4gIH1cblxuICBkZWZhdWx0QXNzZXQoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaWYgKHRoaXMuaXNMb2FkZWRGcm9tU2VydmVyKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmFzc2V0U2VydmVyVVJMKCk7XG4gICAgfVxuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKVxuICAgICAgICA/IHRoaXMuZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpXG4gICAgICAgIDogdGhpcy5yZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZldGNoIHRoZSBhc3NldFxuICAgKiBmcm9tIHRoZSBkZXZzZXJ2ZXJcbiAgICovXG4gIGFzc2V0U2VydmVyVVJMKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudCghIXRoaXMuc2VydmVyVXJsLCAnbmVlZCBzZXJ2ZXIgdG8gbG9hZCBmcm9tJyk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShcbiAgICAgIHRoaXMuc2VydmVyVXJsICtcbiAgICAgICAgZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpICtcbiAgICAgICAgJz9wbGF0Zm9ybT0nICtcbiAgICAgICAgUGxhdGZvcm0uT1MgK1xuICAgICAgICAnJmhhc2g9JyArXG4gICAgICAgIHRoaXMuYXNzZXQuaGFzaCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRvIGp1c3QgdGhlIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdhc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAgICovXG4gIHNjYWxlZEFzc2V0UGF0aCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8gd2hlcmUgdGhlIGJ1bmRsZSBpcyBydW5uaW5nIGZyb20sIHdpdGggYSBzY2FsZWQgYXNzZXQgZmlsZW5hbWVcbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvYnVuZGxlL2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsIHx8ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgLy8gQXNzZXRzIGNhbiBoYXZlIHJlbGF0aXZlIHBhdGhzIG91dHNpZGUgb2YgdGhlIHByb2plY3Qgcm9vdC5cbiAgICAgIC8vIFdoZW4gYnVuZGxpbmcgdGhlbSB3ZSByZXBsYWNlIGAuLi9gIHdpdGggYF9gIHRvIG1ha2Ugc3VyZSB0aGV5XG4gICAgICAvLyBkb24ndCBlbmQgdXAgb3V0c2lkZSBvZiB0aGUgZXhwZWN0ZWQgYXNzZXRzIGRpcmVjdG9yeS5cbiAgICAgIHBhdGggKyBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkucmVwbGFjZSgvXFwuXFwuXFwvL2csICdfJyksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBsb2NhdGlvbiBvZiBhc3NldHMgYnVuZGxlZCB3aXRoIHRoZSBhcHAsIGxvY2F0ZWQgYnlcbiAgICogcmVzb3VyY2UgaWRlbnRpZmllclxuICAgKiBUaGUgQW5kcm9pZCByZXNvdXJjZSBzeXN0ZW0gcGlja3MgdGhlIGNvcnJlY3Qgc2NhbGUuXG4gICAqIEUuZy4gJ2Fzc2V0c19hd2Vzb21lbW9kdWxlX2ljb24nXG4gICAqL1xuICByZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyxcbiAgICAgICdyZXNvdXJjZSBpZGVudGlmaWVycyB3b3JrIG9uIEFuZHJvaWQnLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUganNidW5kbGUgaXMgcnVubmluZyBmcm9tIGEgc2lkZWxvYWQgbG9jYXRpb24sIHRoaXMgcmVzb2x2ZXMgYXNzZXRzXG4gICAqIHJlbGF0aXZlIHRvIGl0cyBsb2NhdGlvblxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9Bd2Vzb21lTW9kdWxlL2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gICAqL1xuICBkcmF3YWJsZUZvbGRlckluQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsIHx8ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKHBhdGggKyBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIGZyb21Tb3VyY2Uoc291cmNlOiBzdHJpbmcpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19wYWNrYWdlcl9hc3NldDogdHJ1ZSxcbiAgICAgIHdpZHRoOiB0aGlzLmFzc2V0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmFzc2V0LmhlaWdodCxcbiAgICAgIHVyaTogc291cmNlLFxuICAgICAgc2NhbGU6IHBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGU6IChzY2FsZXM6IEFycmF5PG51bWJlcj4sIGRldmljZVNjYWxlPzogbnVtYmVyKSA9PiBudW1iZXIgPVxuICAgIHBpY2tTY2FsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NldFNvdXJjZVJlc29sdmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDO0FBQUE7QUFBQTtBQVliLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0FBQ3JELElBQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQ2pELGVBQW9CQSxPQUFPLENBQUMsY0FBYyxDQUFDO0VBQXBDRSxTQUFTLFlBQVRBLFNBQVM7QUFDaEIsZ0JBSUlGLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQztFQUg5Q0csNEJBQTRCLGFBQTVCQSw0QkFBNEI7RUFDNUJDLDRCQUE0QixhQUE1QkEsNEJBQTRCO0VBQzVCQyxXQUFXLGFBQVhBLFdBQVc7QUFFYixJQUFNQyxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFLdEMsU0FBU08sa0JBQWtCLENBQUNDLEtBQW9CLEVBQVU7RUFDeEQsSUFBTUMsS0FBSyxHQUFHUCxTQUFTLENBQUNNLEtBQUssQ0FBQ0UsTUFBTSxFQUFFWCxVQUFVLENBQUNZLEdBQUcsRUFBRSxDQUFDO0VBQ3ZELElBQU1DLFdBQVcsR0FBR0gsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHQSxLQUFLLEdBQUcsR0FBRztFQUN4RCxJQUFNSSxRQUFRLEdBQUdSLFdBQVcsQ0FBQ0csS0FBSyxDQUFDO0VBQ25DLE9BQU9LLFFBQVEsR0FBRyxHQUFHLEdBQUdMLEtBQUssQ0FBQ00sSUFBSSxHQUFHRixXQUFXLEdBQUcsR0FBRyxHQUFHSixLQUFLLENBQUNPLElBQUk7QUFDckU7QUFLQSxT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