246d12c591b39270e2e7d401c7fc6201
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
var _DebugEnvironment = require("./DebugEnvironment");
var _NativeAppearance = _interopRequireDefault(require("./NativeAppearance"));
var _invariant = _interopRequireDefault(require("invariant"));
var eventEmitter = new _EventEmitter.default();
if (_NativeAppearance.default) {
  var nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);
  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
    var colorScheme = newAppearance.colorScheme;
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    eventEmitter.emit('change', {
      colorScheme: colorScheme
    });
  });
}
module.exports = {
  getColorScheme: function getColorScheme() {
    if (__DEV__) {
      if (_DebugEnvironment.isAsyncDebugging) {
        return 'light';
      }
    }
    var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
    (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    return nativeColorScheme;
  },
  addChangeListener: function addChangeListener(listener) {
    return eventEmitter.addListener('change', listener);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJldmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJOYXRpdmVBcHBlYXJhbmNlIiwibmF0aXZlRXZlbnRFbWl0dGVyIiwiTmF0aXZlRXZlbnRFbWl0dGVyIiwiUGxhdGZvcm0iLCJPUyIsImFkZExpc3RlbmVyIiwibmV3QXBwZWFyYW5jZSIsImNvbG9yU2NoZW1lIiwiaW52YXJpYW50IiwiZW1pdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRDb2xvclNjaGVtZSIsIl9fREVWX18iLCJpc0FzeW5jRGVidWdnaW5nIiwibmF0aXZlQ29sb3JTY2hlbWUiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsImxpc3RlbmVyIl0sInNvdXJjZXMiOlsiQXBwZWFyYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IE5hdGl2ZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IEV2ZW50RW1pdHRlciwge1xuICB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uLFxufSBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHtpc0FzeW5jRGVidWdnaW5nfSBmcm9tICcuL0RlYnVnRW52aXJvbm1lbnQnO1xuaW1wb3J0IE5hdGl2ZUFwcGVhcmFuY2UsIHtcbiAgdHlwZSBBcHBlYXJhbmNlUHJlZmVyZW5jZXMsXG4gIHR5cGUgQ29sb3JTY2hlbWVOYW1lLFxufSBmcm9tICcuL05hdGl2ZUFwcGVhcmFuY2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG50eXBlIEFwcGVhcmFuY2VMaXN0ZW5lciA9IChwcmVmZXJlbmNlczogQXBwZWFyYW5jZVByZWZlcmVuY2VzKSA9PiB2b2lkO1xuY29uc3QgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gIGNoYW5nZTogW0FwcGVhcmFuY2VQcmVmZXJlbmNlc10sXG59PigpO1xuXG50eXBlIE5hdGl2ZUFwcGVhcmFuY2VFdmVudERlZmluaXRpb25zID0ge1xuICBhcHBlYXJhbmNlQ2hhbmdlZDogW0FwcGVhcmFuY2VQcmVmZXJlbmNlc10sXG59O1xuXG5pZiAoTmF0aXZlQXBwZWFyYW5jZSkge1xuICBjb25zdCBuYXRpdmVFdmVudEVtaXR0ZXIgPVxuICAgIG5ldyBOYXRpdmVFdmVudEVtaXR0ZXI8TmF0aXZlQXBwZWFyYW5jZUV2ZW50RGVmaW5pdGlvbnM+KFxuICAgICAgLy8gVDg4NzE1MDYzOiBOYXRpdmVFdmVudEVtaXR0ZXIgb25seSB1c2VkIHRoaXMgcGFyYW1ldGVyIG9uIGlPUy4gTm93IGl0IHVzZXMgaXQgb24gYWxsIHBsYXRmb3Jtcywgc28gdGhpcyBjb2RlIHdhcyBtb2RpZmllZCBhdXRvbWF0aWNhbGx5IHRvIHByZXNlcnZlIGl0cyBiZWhhdmlvclxuICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBuYXRpdmUgbW9kdWxlIG9uIG90aGVyIHBsYXRmb3JtcywgcGxlYXNlIHJlbW92ZSB0aGlzIGNvbmRpdGlvbiBhbmQgdGVzdCBpdHMgYmVoYXZpb3JcbiAgICAgIFBsYXRmb3JtLk9TICE9PSAnaW9zJyA/IG51bGwgOiBOYXRpdmVBcHBlYXJhbmNlLFxuICAgICk7XG4gIG5hdGl2ZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgICAnYXBwZWFyYW5jZUNoYW5nZWQnLFxuICAgIChuZXdBcHBlYXJhbmNlOiBBcHBlYXJhbmNlUHJlZmVyZW5jZXMpID0+IHtcbiAgICAgIGNvbnN0IHtjb2xvclNjaGVtZX0gPSBuZXdBcHBlYXJhbmNlO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBjb2xvclNjaGVtZSA9PT0gJ2RhcmsnIHx8XG4gICAgICAgICAgY29sb3JTY2hlbWUgPT09ICdsaWdodCcgfHxcbiAgICAgICAgICBjb2xvclNjaGVtZSA9PSBudWxsLFxuICAgICAgICBcIlVucmVjb2duaXplZCBjb2xvciBzY2hlbWUuIERpZCB5b3UgbWVhbiAnZGFyaycgb3IgJ2xpZ2h0Jz9cIixcbiAgICAgICk7XG4gICAgICBldmVudEVtaXR0ZXIuZW1pdCgnY2hhbmdlJywge2NvbG9yU2NoZW1lfSk7XG4gICAgfSxcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBOb3RlOiBBbHRob3VnaCBjb2xvciBzY2hlbWUgaXMgYXZhaWxhYmxlIGltbWVkaWF0ZWx5LCBpdCBtYXkgY2hhbmdlIGF0IGFueVxuICAgKiB0aW1lLiBBbnkgcmVuZGVyaW5nIGxvZ2ljIG9yIHN0eWxlcyB0aGF0IGRlcGVuZCBvbiB0aGlzIHNob3VsZCB0cnkgdG8gY2FsbFxuICAgKiB0aGlzIGZ1bmN0aW9uIG9uIGV2ZXJ5IHJlbmRlciwgcmF0aGVyIHRoYW4gY2FjaGluZyB0aGUgdmFsdWUgKGZvciBleGFtcGxlLFxuICAgKiB1c2luZyBpbmxpbmUgc3R5bGVzIHJhdGhlciB0aGFuIHNldHRpbmcgYSB2YWx1ZSBpbiBhIGBTdHlsZVNoZWV0YCkuXG4gICAqXG4gICAqIEV4YW1wbGU6IGBjb25zdCBjb2xvclNjaGVtZSA9IEFwcGVhcmFuY2UuZ2V0Q29sb3JTY2hlbWUoKTtgXG4gICAqXG4gICAqIEByZXR1cm5zIHs/Q29sb3JTY2hlbWVOYW1lfSBWYWx1ZSBmb3IgdGhlIGNvbG9yIHNjaGVtZSBwcmVmZXJlbmNlLlxuICAgKi9cbiAgZ2V0Q29sb3JTY2hlbWUoKTogP0NvbG9yU2NoZW1lTmFtZSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChpc0FzeW5jRGVidWdnaW5nKSB7XG4gICAgICAgIC8vIEhhcmQgY29kZSBsaWdodCB0aGVtZSB3aGVuIHVzaW5nIHRoZSBhc3luYyBkZWJ1Z2dlciBhc1xuICAgICAgICAvLyBzeW5jIGNhbGxzIGFyZW4ndCBzdXBwb3J0ZWRcbiAgICAgICAgcmV0dXJuICdsaWdodCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogKGhyYW1vcykgVDUyOTE5NjUyIFVzZSA/Q29sb3JTY2hlbWVOYW1lIG9uY2UgY29kZWdlbiBzdXBwb3J0cyB1bmlvblxuICAgIGNvbnN0IG5hdGl2ZUNvbG9yU2NoZW1lOiA/c3RyaW5nID1cbiAgICAgIE5hdGl2ZUFwcGVhcmFuY2UgPT0gbnVsbFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBOYXRpdmVBcHBlYXJhbmNlLmdldENvbG9yU2NoZW1lKCkgfHwgbnVsbDtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBuYXRpdmVDb2xvclNjaGVtZSA9PT0gJ2RhcmsnIHx8XG4gICAgICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09PSAnbGlnaHQnIHx8XG4gICAgICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09IG51bGwsXG4gICAgICBcIlVucmVjb2duaXplZCBjb2xvciBzY2hlbWUuIERpZCB5b3UgbWVhbiAnZGFyaycgb3IgJ2xpZ2h0Jz9cIixcbiAgICApO1xuICAgIHJldHVybiBuYXRpdmVDb2xvclNjaGVtZTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGhhbmRsZXIgdGhhdCBpcyBmaXJlZCB3aGVuIGFwcGVhcmFuY2UgcHJlZmVyZW5jZXMgY2hhbmdlLlxuICAgKi9cbiAgYWRkQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXI6IEFwcGVhcmFuY2VMaXN0ZW5lcik6IEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gZXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiO0FBVUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUlBO0FBR0EsSUFBTUEsWUFBWSxHQUFHLElBQUlDLHFCQUFZLEVBRWpDO0FBTUosSUFBSUMseUJBQWdCLEVBQUU7RUFDcEIsSUFBTUMsa0JBQWtCLEdBQ3RCLElBQUlDLDJCQUFrQixDQUdwQkMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssR0FBRyxJQUFJLEdBQUdKLHlCQUFnQixDQUNoRDtFQUNIQyxrQkFBa0IsQ0FBQ0ksV0FBVyxDQUM1QixtQkFBbUIsRUFDbkIsVUFBQ0MsYUFBb0MsRUFBSztJQUN4QyxJQUFPQyxXQUFXLEdBQUlELGFBQWEsQ0FBNUJDLFdBQVc7SUFDbEIsSUFBQUMsa0JBQVMsRUFDUEQsV0FBVyxLQUFLLE1BQU0sSUFDcEJBLFdBQVcsS0FBSyxPQUFPLElBQ3ZCQSxXQUFXLElBQUksSUFBSSxFQUNyQiw0REFBNEQsQ0FDN0Q7SUFDRFQsWUFBWSxDQUFDVyxJQUFJLENBQUMsUUFBUSxFQUFFO01BQUNGLFdBQVcsRUFBWEE7SUFBVyxDQUFDLENBQUM7RUFDNUMsQ0FBQyxDQUNGO0FBQ0g7QUFFQUcsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFXZkMsY0FBYyw0QkFBcUI7SUFDakMsSUFBSUMsT0FBTyxFQUFFO01BQ1gsSUFBSUMsa0NBQWdCLEVBQUU7UUFHcEIsT0FBTyxPQUFPO01BQ2hCO0lBQ0Y7SUFHQSxJQUFNQyxpQkFBMEIsR0FDOUJmLHlCQUFnQixJQUFJLElBQUksR0FDcEIsSUFBSSxHQUNKQSx5QkFBZ0IsQ0FBQ1ksY0FBYyxFQUFFLElBQUksSUFBSTtJQUMvQyxJQUFBSixrQkFBUyxFQUNQTyxpQkFBaUIsS0FBSyxNQUFNLElBQzFCQSxpQkFBaUIsS0FBSyxPQUFPLElBQzdCQSxpQkFBaUIsSUFBSSxJQUFJLEVBQzNCLDREQUE0RCxDQUM3RDtJQUNELE9BQU9BLGlCQUFpQjtFQUMxQixDQUFDO0VBS0RDLGlCQUFpQiw2QkFBQ0MsUUFBNEIsRUFBcUI7SUFDakUsT0FBT25CLFlBQVksQ0FBQ08sV0FBVyxDQUFDLFFBQVEsRUFBRVksUUFBUSxDQUFDO0VBQ3JEO0FBQ0YsQ0FBQyJ9