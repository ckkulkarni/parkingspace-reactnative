d1ab597f246bda3d690b0952d99d0e2a
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _ParkingSpace = _interopRequireDefault(require("../ParkingSpace"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('ParkingSpace component', function () {
  it('Renders correct number of parking spaces', function () {
    var route = {
      params: {
        numspaces: 3
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getAllByTestId = _render.getAllByTestId;
    var parkingSpaces = getAllByTestId(/parking-space-\d+/);
    expect(parkingSpaces.length).toBe(3);
  });
  it('Clicking on an unoccupied parking space shows parking form', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId,
      getByPlaceholderText = _render2.getByPlaceholderText,
      getByText = _render2.getByText,
      queryByTestId = _render2.queryByTestId;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var parkingTimeButton = getByText('Parking Time (tap to change)');
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
    expect(parkingTimeButton).toBeTruthy();
    expect(carRegistrationInput).toBeTruthy();
  });
  it('Submitting parking form marks parking space as occupied', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render3.getByTestId,
      getByPlaceholderText = _render3.getByPlaceholderText,
      getByText = _render3.getByText,
      queryByText = _render3.queryByText;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
    var submitButton = getByText('Submit');
    _reactNative.fireEvent.changeText(carRegistrationInput, 'ABC123');
    _reactNative.fireEvent.press(submitButton);
    var parkingDetails = getByTestId('parking-space-1').props.children;
    expect(parkingDetails[1].props.children).toBe('ABC123');
    expect(queryByText('tap to change')).toBeNull();
  });
  it('Clicking on an occupied parking space opens payment screen', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render4.getByTestId,
      getByPlaceholderText = _render4.getByPlaceholderText,
      getByText = _render4.getByText;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
    var submitButton = getByText('Submit');
    _reactNative.fireEvent.changeText(carRegistrationInput, 'ABC123');
    _reactNative.fireEvent.press(submitButton);
    _reactNative.fireEvent.press(parkingSpace);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,