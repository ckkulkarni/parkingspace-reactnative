42255ee869f9bfdccd4023db90010233
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _ParkingSpace = _interopRequireDefault(require("../ParkingSpace"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('ParkingSpace component', function () {
  it('Renders correct number of parking spaces', function () {
    var route = {
      params: {
        numspaces: 3
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getAllByTestId = _render.getAllByTestId;
    var parkingSpaces = getAllByTestId(/parking-space-\d+/);
    expect(parkingSpaces.length).toBe(3);
  });
  it('Clicking on an unoccupied parking space shows parking form', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId,
      getByPlaceholderText = _render2.getByPlaceholderText,
      getByText = _render2.getByText,
      queryByTestId = _render2.queryByTestId,
      queryByText = _render2.queryByText;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var parkingTimeButton = getByText('Parking Time (tap to change)');
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
    expect(parkingTimeButton).toBeTruthy();
    expect(carRegistrationInput).toBeTruthy();
    var closeButton = getByText('Close');
    _reactNative.fireEvent.press(closeButton);
    var selectedParkingSpace = queryByTestId('selected-parking-space');
    expect(selectedParkingSpace).toBeFalsy();
    var submitButton = getByText('Submit');
    _reactNative.fireEvent.changeText(carRegistrationInput, 'ABC123');
    _reactNative.fireEvent.press(submitButton);
    var parkingDetails = getByTestId('parking-space-1').props.children;
    expect(parkingDetails[1].props.children).toBe('ABC123');
    expect(queryByText('tap to change')).toBeNull();
  });
  it('Submitting parking form marks parking space as occupied', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render3.getByTestId,
      getByPlaceholderText = _render3.getByPlaceholderText,
      getByText = _render3.getByText,
      queryByText = _render3.queryByText;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
  });
  it('Clicking on an occupied parking space opens payment screen', function () {
    var route = {
      params: {
        numspaces: 1
      }
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ParkingSpace.default, {
        route: route
      })),
      getByTestId = _render4.getByTestId,
      getByPlaceholderText = _render4.getByPlaceholderText,
      getByText = _render4.getByText;
    var parkingSpace = getByTestId('parking-space-1');
    _reactNative.fireEvent.press(parkingSpace);
    var carRegistrationInput = getByPlaceholderText('Enter vehicle registration');
    var submitButton = getByText('Submit');
    _reactNative.fireEvent.changeText(carRegistrationInput, 'ABC123');
    _reactNative.fireEvent.press(submitButton);
    _reactNative.fireEvent.press(parkingSpace);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJyb3V0ZSIsInBhcmFtcyIsIm51bXNwYWNlcyIsInJlbmRlciIsImdldEFsbEJ5VGVzdElkIiwicGFya2luZ1NwYWNlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJnZXRCeVRlc3RJZCIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXh0IiwicXVlcnlCeVRlc3RJZCIsInF1ZXJ5QnlUZXh0IiwicGFya2luZ1NwYWNlIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJwYXJraW5nVGltZUJ1dHRvbiIsImNhclJlZ2lzdHJhdGlvbklucHV0IiwidG9CZVRydXRoeSIsImNsb3NlQnV0dG9uIiwic2VsZWN0ZWRQYXJraW5nU3BhY2UiLCJ0b0JlRmFsc3kiLCJzdWJtaXRCdXR0b24iLCJjaGFuZ2VUZXh0IiwicGFya2luZ0RldGFpbHMiLCJwcm9wcyIsImNoaWxkcmVuIiwidG9CZU51bGwiXSwic291cmNlcyI6WyJQYXJraW5nU3BhY2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBhcmtpbmdTcGFjZSBmcm9tICcuLi9QYXJraW5nU3BhY2UnO1xyXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbmRlc2NyaWJlKCdQYXJraW5nU3BhY2UgY29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGl0KCdSZW5kZXJzIGNvcnJlY3QgbnVtYmVyIG9mIHBhcmtpbmcgc3BhY2VzJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7bnVtc3BhY2VzOiAzfX07XHJcbiAgICBjb25zdCB7Z2V0QWxsQnlUZXN0SWR9ID0gcmVuZGVyKDxQYXJraW5nU3BhY2Ugcm91dGU9e3JvdXRlfSAvPik7XHJcbiAgICBjb25zdCBwYXJraW5nU3BhY2VzID0gZ2V0QWxsQnlUZXN0SWQoL3Bhcmtpbmctc3BhY2UtXFxkKy8pO1xyXG4gICAgZXhwZWN0KHBhcmtpbmdTcGFjZXMubGVuZ3RoKS50b0JlKDMpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnQ2xpY2tpbmcgb24gYW4gdW5vY2N1cGllZCBwYXJraW5nIHNwYWNlIHNob3dzIHBhcmtpbmcgZm9ybScsICgpID0+IHtcclxuICAgIGNvbnN0IHJvdXRlID0ge3BhcmFtczoge251bXNwYWNlczogMX19O1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBnZXRCeVRlc3RJZCxcclxuICAgICAgZ2V0QnlQbGFjZWhvbGRlclRleHQsXHJcbiAgICAgIGdldEJ5VGV4dCxcclxuICAgICAgcXVlcnlCeVRlc3RJZCxcclxuICAgICAgcXVlcnlCeVRleHQsXHJcbiAgICB9ID0gcmVuZGVyKDxQYXJraW5nU3BhY2Ugcm91dGU9e3JvdXRlfSAvPik7XHJcbiAgICBjb25zdCBwYXJraW5nU3BhY2UgPSBnZXRCeVRlc3RJZCgncGFya2luZy1zcGFjZS0xJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MocGFya2luZ1NwYWNlKTtcclxuICAgIGNvbnN0IHBhcmtpbmdUaW1lQnV0dG9uID0gZ2V0QnlUZXh0KCdQYXJraW5nIFRpbWUgKHRhcCB0byBjaGFuZ2UpJyk7XHJcbiAgICBjb25zdCBjYXJSZWdpc3RyYXRpb25JbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KFxyXG4gICAgICAnRW50ZXIgdmVoaWNsZSByZWdpc3RyYXRpb24nLFxyXG4gICAgKTtcclxuICAgIGV4cGVjdChwYXJraW5nVGltZUJ1dHRvbikudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGNhclJlZ2lzdHJhdGlvbklucHV0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGdldEJ5VGV4dCgnQ2xvc2UnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhjbG9zZUJ1dHRvbik7XHJcbiAgICBjb25zdCBzZWxlY3RlZFBhcmtpbmdTcGFjZSA9IHF1ZXJ5QnlUZXN0SWQoJ3NlbGVjdGVkLXBhcmtpbmctc3BhY2UnKTtcclxuICAgIGV4cGVjdChzZWxlY3RlZFBhcmtpbmdTcGFjZSkudG9CZUZhbHN5KCk7XHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRleHQoJ1N1Ym1pdCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoY2FyUmVnaXN0cmF0aW9uSW5wdXQsICdBQkMxMjMnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xyXG4gICAgY29uc3QgcGFya2luZ0RldGFpbHMgPSBnZXRCeVRlc3RJZCgncGFya2luZy1zcGFjZS0xJykucHJvcHMuY2hpbGRyZW47XHJcbiAgICBleHBlY3QocGFya2luZ0RldGFpbHNbMV0ucHJvcHMuY2hpbGRyZW4pLnRvQmUoJ0FCQzEyMycpO1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCd0YXAgdG8gY2hhbmdlJykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdTdWJtaXR0aW5nIHBhcmtpbmcgZm9ybSBtYXJrcyBwYXJraW5nIHNwYWNlIGFzIG9jY3VwaWVkJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7bnVtc3BhY2VzOiAxfX07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIGdldEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0fSA9IHJlbmRlcihcclxuICAgICAgPFBhcmtpbmdTcGFjZSByb3V0ZT17cm91dGV9IC8+LFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHBhcmtpbmdTcGFjZSA9IGdldEJ5VGVzdElkKCdwYXJraW5nLXNwYWNlLTEnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhwYXJraW5nU3BhY2UpO1xyXG4gICAgY29uc3QgY2FyUmVnaXN0cmF0aW9uSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dChcclxuICAgICAgJ0VudGVyIHZlaGljbGUgcmVnaXN0cmF0aW9uJyxcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdDbGlja2luZyBvbiBhbiBvY2N1cGllZCBwYXJraW5nIHNwYWNlIG9wZW5zIHBheW1lbnQgc2NyZWVuJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7bnVtc3BhY2VzOiAxfX07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIGdldEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVRleHR9ID0gcmVuZGVyKFxyXG4gICAgICA8UGFya2luZ1NwYWNlIHJvdXRlPXtyb3V0ZX0gLz4sXHJcbiAgICApO1xyXG4gICAgY29uc3QgcGFya2luZ1NwYWNlID0gZ2V0QnlUZXN0SWQoJ3Bhcmtpbmctc3BhY2UtMScpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHBhcmtpbmdTcGFjZSk7XHJcbiAgICBjb25zdCBjYXJSZWdpc3RyYXRpb25JbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KFxyXG4gICAgICAnRW50ZXIgdmVoaWNsZSByZWdpc3RyYXRpb24nLFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGV4dCgnU3VibWl0Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChjYXJSZWdpc3RyYXRpb25JbnB1dCwgJ0FCQzEyMycpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MocGFya2luZ1NwYWNlKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBTUEsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQVpIO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBb0Q7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBUXBELElBQU1HLFVBQVUsR0FBRyxJQUFBTCxxQkFBYSxHQUFrQztBQUNsRU0sUUFBUSxDQUFDLHdCQUF3QixFQUFFLFlBQU07RUFDdkNDLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0lBQ25ELElBQU1DLEtBQUssR0FBRztNQUFDQyxNQUFNLEVBQUU7UUFBQ0MsU0FBUyxFQUFFO01BQUM7SUFBQyxDQUFDO0lBQ3RDLGNBQXlCLElBQUFDLG1CQUFNLEVBQUMscUJBQUMscUJBQVk7UUFBQyxLQUFLLEVBQUVIO01BQU0sRUFBRyxDQUFDO01BQXhESSxjQUFjLFdBQWRBLGNBQWM7SUFDckIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsbUJBQW1CLENBQUM7SUFDekRFLE1BQU0sQ0FBQ0QsYUFBYSxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN0QyxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQU07SUFDckUsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDQyxTQUFTLEVBQUU7TUFBQztJQUFDLENBQUM7SUFDdEMsZUFNSSxJQUFBQyxtQkFBTSxFQUFDLHFCQUFDLHFCQUFZO1FBQUMsS0FBSyxFQUFFSDtNQUFNLEVBQUcsQ0FBQztNQUx4Q1MsV0FBVyxZQUFYQSxXQUFXO01BQ1hDLG9CQUFvQixZQUFwQkEsb0JBQW9CO01BQ3BCQyxTQUFTLFlBQVRBLFNBQVM7TUFDVEMsYUFBYSxZQUFiQSxhQUFhO01BQ2JDLFdBQVcsWUFBWEEsV0FBVztJQUViLElBQU1DLFlBQVksR0FBR0wsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQ25ETSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztJQUM3QixJQUFNRyxpQkFBaUIsR0FBR04sU0FBUyxDQUFDLDhCQUE4QixDQUFDO0lBQ25FLElBQU1PLG9CQUFvQixHQUFHUixvQkFBb0IsQ0FDL0MsNEJBQTRCLENBQzdCO0lBQ0RKLE1BQU0sQ0FBQ1csaUJBQWlCLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0lBQ3RDYixNQUFNLENBQUNZLG9CQUFvQixDQUFDLENBQUNDLFVBQVUsRUFBRTtJQUN6QyxJQUFNQyxXQUFXLEdBQUdULFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdENJLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0ksV0FBVyxDQUFDO0lBQzVCLElBQU1DLG9CQUFvQixHQUFHVCxhQUFhLENBQUMsd0JBQXdCLENBQUM7SUFDcEVOLE1BQU0sQ0FBQ2Usb0JBQW9CLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO0lBQ3hDLElBQU1DLFlBQVksR0FBR1osU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUN4Q0ksc0JBQVMsQ0FBQ1MsVUFBVSxDQUFDTixvQkFBb0IsRUFBRSxRQUFRLENBQUM7SUFDcERILHNCQUFTLENBQUNDLEtBQUssQ0FBQ08sWUFBWSxDQUFDO0lBQzdCLElBQU1FLGNBQWMsR0FBR2hCLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDaUIsS0FBSyxDQUFDQyxRQUFRO0lBQ3BFckIsTUFBTSxDQUFDbUIsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2REYsTUFBTSxDQUFDTyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQ2UsUUFBUSxFQUFFO0VBQ2pELENBQUMsQ0FBQztFQUVGN0IsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLFlBQU07SUFDbEUsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDQyxTQUFTLEVBQUU7TUFBQztJQUFDLENBQUM7SUFDdEMsZUFBb0UsSUFBQUMsbUJBQU0sRUFDeEUscUJBQUMscUJBQVk7UUFBQyxLQUFLLEVBQUVIO01BQU0sRUFBRyxDQUMvQjtNQUZNUyxXQUFXLFlBQVhBLFdBQVc7TUFBRUMsb0JBQW9CLFlBQXBCQSxvQkFBb0I7TUFBRUMsU0FBUyxZQUFUQSxTQUFTO01BQUVFLFdBQVcsWUFBWEEsV0FBVztJQUdoRSxJQUFNQyxZQUFZLEdBQUdMLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztJQUNuRE0sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixZQUFZLENBQUM7SUFDN0IsSUFBTUksb0JBQW9CLEdBQUdSLG9CQUFvQixDQUMvQyw0QkFBNEIsQ0FDN0I7RUFDSCxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQU07SUFDckUsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDQyxTQUFTLEVBQUU7TUFBQztJQUFDLENBQUM7SUFDdEMsZUFBdUQsSUFBQUMsbUJBQU0sRUFDM0QscUJBQUMscUJBQVk7UUFBQyxLQUFLLEVBQUVIO01BQU0sRUFBRyxDQUMvQjtNQUZNUyxXQUFXLFlBQVhBLFdBQVc7TUFBRUMsb0JBQW9CLFlBQXBCQSxvQkFBb0I7TUFBRUMsU0FBUyxZQUFUQSxTQUFTO0lBR25ELElBQU1HLFlBQVksR0FBR0wsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQ25ETSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztJQUM3QixJQUFNSSxvQkFBb0IsR0FBR1Isb0JBQW9CLENBQy9DLDRCQUE0QixDQUM3QjtJQUNELElBQU1hLFlBQVksR0FBR1osU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUN4Q0ksc0JBQVMsQ0FBQ1MsVUFBVSxDQUFDTixvQkFBb0IsRUFBRSxRQUFRLENBQUM7SUFDcERILHNCQUFTLENBQUNDLEtBQUssQ0FBQ08sWUFBWSxDQUFDO0lBQzdCUixzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==