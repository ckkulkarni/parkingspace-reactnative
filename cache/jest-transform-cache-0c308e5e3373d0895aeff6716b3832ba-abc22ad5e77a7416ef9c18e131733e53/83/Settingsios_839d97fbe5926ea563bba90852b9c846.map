{"version":3,"names":["subscriptions","Settings","_settings","NativeSettingsManager","getConstants","settings","get","key","set","Object","assign","setValues","watchKeys","keys","callback","invariant","Array","isArray","sid","length","push","clearWatch","watchId","_sendObservations","body","forEach","newValue","didChange","sub","indexOf","RCTDeviceEventEmitter","addListener","bind","module","exports"],"sources":["Settings.ios.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeSettingsManager from './NativeSettingsManager';\nimport invariant from 'invariant';\n\nconst subscriptions: Array<{\n  keys: Array<string>,\n  callback: ?Function,\n  ...\n}> = [];\n\nconst Settings = {\n  _settings: (NativeSettingsManager &&\n    NativeSettingsManager.getConstants().settings: any),\n\n  get(key: string): mixed {\n    // $FlowFixMe[object-this-reference]\n    return this._settings[key];\n  },\n\n  set(settings: Object) {\n    // $FlowFixMe[object-this-reference]\n    this._settings = Object.assign(this._settings, settings);\n    NativeSettingsManager.setValues(settings);\n  },\n\n  watchKeys(keys: string | Array<string>, callback: Function): number {\n    if (typeof keys === 'string') {\n      keys = [keys];\n    }\n\n    invariant(\n      Array.isArray(keys),\n      'keys should be a string or array of strings',\n    );\n\n    const sid = subscriptions.length;\n    subscriptions.push({keys: keys, callback: callback});\n    return sid;\n  },\n\n  clearWatch(watchId: number) {\n    if (watchId < subscriptions.length) {\n      subscriptions[watchId] = {keys: [], callback: null};\n    }\n  },\n\n  _sendObservations(body: Object) {\n    Object.keys(body).forEach(key => {\n      const newValue = body[key];\n      // $FlowFixMe[object-this-reference]\n      const didChange = this._settings[key] !== newValue;\n      // $FlowFixMe[object-this-reference]\n      this._settings[key] = newValue;\n\n      if (didChange) {\n        subscriptions.forEach(sub => {\n          if (sub.keys.indexOf(key) !== -1 && sub.callback) {\n            sub.callback();\n          }\n        });\n      }\n    });\n  },\n};\n\nRCTDeviceEventEmitter.addListener(\n  'settingsUpdated',\n  Settings._sendObservations.bind(Settings),\n);\n\nmodule.exports = Settings;\n"],"mappings":";AAUA;AACA;AACA;AAEA,IAAMA,aAIJ,GAAG,EAAE;AAEP,IAAMC,QAAQ,GAAG;EACfC,SAAS,EAAGC,8BAAqB,IAC/BA,8BAAqB,CAACC,YAAY,EAAE,CAACC,QAAc;EAErDC,GAAG,eAACC,GAAW,EAAS;IAEtB,OAAO,IAAI,CAACL,SAAS,CAACK,GAAG,CAAC;EAC5B,CAAC;EAEDC,GAAG,eAACH,QAAgB,EAAE;IAEpB,IAAI,CAACH,SAAS,GAAGO,MAAM,CAACC,MAAM,CAAC,IAAI,CAACR,SAAS,EAAEG,QAAQ,CAAC;IACxDF,8BAAqB,CAACQ,SAAS,CAACN,QAAQ,CAAC;EAC3C,CAAC;EAEDO,SAAS,qBAACC,IAA4B,EAAEC,QAAkB,EAAU;IAClE,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG,CAACA,IAAI,CAAC;IACf;IAEA,IAAAE,kBAAS,EACPC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EACnB,6CAA6C,CAC9C;IAED,IAAMK,GAAG,GAAGlB,aAAa,CAACmB,MAAM;IAChCnB,aAAa,CAACoB,IAAI,CAAC;MAACP,IAAI,EAAEA,IAAI;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,CAAC;IACpD,OAAOI,GAAG;EACZ,CAAC;EAEDG,UAAU,sBAACC,OAAe,EAAE;IAC1B,IAAIA,OAAO,GAAGtB,aAAa,CAACmB,MAAM,EAAE;MAClCnB,aAAa,CAACsB,OAAO,CAAC,GAAG;QAACT,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAC;IACrD;EACF,CAAC;EAEDS,iBAAiB,6BAACC,IAAY,EAAE;IAAA;IAC9Bf,MAAM,CAACI,IAAI,CAACW,IAAI,CAAC,CAACC,OAAO,CAAC,UAAAlB,GAAG,EAAI;MAC/B,IAAMmB,QAAQ,GAAGF,IAAI,CAACjB,GAAG,CAAC;MAE1B,IAAMoB,SAAS,GAAG,KAAI,CAACzB,SAAS,CAACK,GAAG,CAAC,KAAKmB,QAAQ;MAElD,KAAI,CAACxB,SAAS,CAACK,GAAG,CAAC,GAAGmB,QAAQ;MAE9B,IAAIC,SAAS,EAAE;QACb3B,aAAa,CAACyB,OAAO,CAAC,UAAAG,GAAG,EAAI;UAC3B,IAAIA,GAAG,CAACf,IAAI,CAACgB,OAAO,CAACtB,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIqB,GAAG,CAACd,QAAQ,EAAE;YAChDc,GAAG,CAACd,QAAQ,EAAE;UAChB;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAEDgB,8BAAqB,CAACC,WAAW,CAC/B,iBAAiB,EACjB9B,QAAQ,CAACsB,iBAAiB,CAACS,IAAI,CAAC/B,QAAQ,CAAC,CAC1C;AAEDgC,MAAM,CAACC,OAAO,GAAGjC,QAAQ"}