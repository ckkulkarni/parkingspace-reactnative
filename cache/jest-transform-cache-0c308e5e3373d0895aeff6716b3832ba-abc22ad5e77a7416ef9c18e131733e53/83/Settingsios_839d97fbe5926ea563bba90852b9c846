4089922d2afe12edad5d7181288a44d2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _NativeSettingsManager = _interopRequireDefault(require("./NativeSettingsManager"));
var _invariant = _interopRequireDefault(require("invariant"));
var subscriptions = [];
var Settings = {
  _settings: _NativeSettingsManager.default && _NativeSettingsManager.default.getConstants().settings,
  get: function get(key) {
    return this._settings[key];
  },
  set: function set(settings) {
    this._settings = Object.assign(this._settings, settings);
    _NativeSettingsManager.default.setValues(settings);
  },
  watchKeys: function watchKeys(keys, callback) {
    if (typeof keys === 'string') {
      keys = [keys];
    }
    (0, _invariant.default)(Array.isArray(keys), 'keys should be a string or array of strings');
    var sid = subscriptions.length;
    subscriptions.push({
      keys: keys,
      callback: callback
    });
    return sid;
  },
  clearWatch: function clearWatch(watchId) {
    if (watchId < subscriptions.length) {
      subscriptions[watchId] = {
        keys: [],
        callback: null
      };
    }
  },
  _sendObservations: function _sendObservations(body) {
    var _this = this;
    Object.keys(body).forEach(function (key) {
      var newValue = body[key];
      var didChange = _this._settings[key] !== newValue;
      _this._settings[key] = newValue;
      if (didChange) {
        subscriptions.forEach(function (sub) {
          if (sub.keys.indexOf(key) !== -1 && sub.callback) {
            sub.callback();
          }
        });
      }
    });
  }
};
_RCTDeviceEventEmitter.default.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
module.exports = Settings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdWJzY3JpcHRpb25zIiwiU2V0dGluZ3MiLCJfc2V0dGluZ3MiLCJOYXRpdmVTZXR0aW5nc01hbmFnZXIiLCJnZXRDb25zdGFudHMiLCJzZXR0aW5ncyIsImdldCIsImtleSIsInNldCIsIk9iamVjdCIsImFzc2lnbiIsInNldFZhbHVlcyIsIndhdGNoS2V5cyIsImtleXMiLCJjYWxsYmFjayIsImludmFyaWFudCIsIkFycmF5IiwiaXNBcnJheSIsInNpZCIsImxlbmd0aCIsInB1c2giLCJjbGVhcldhdGNoIiwid2F0Y2hJZCIsIl9zZW5kT2JzZXJ2YXRpb25zIiwiYm9keSIsImZvckVhY2giLCJuZXdWYWx1ZSIsImRpZENoYW5nZSIsInN1YiIsImluZGV4T2YiLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImJpbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU2V0dGluZ3MuaW9zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgTmF0aXZlU2V0dGluZ3NNYW5hZ2VyIGZyb20gJy4vTmF0aXZlU2V0dGluZ3NNYW5hZ2VyJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuY29uc3Qgc3Vic2NyaXB0aW9uczogQXJyYXk8e1xuICBrZXlzOiBBcnJheTxzdHJpbmc+LFxuICBjYWxsYmFjazogP0Z1bmN0aW9uLFxuICAuLi5cbn0+ID0gW107XG5cbmNvbnN0IFNldHRpbmdzID0ge1xuICBfc2V0dGluZ3M6IChOYXRpdmVTZXR0aW5nc01hbmFnZXIgJiZcbiAgICBOYXRpdmVTZXR0aW5nc01hbmFnZXIuZ2V0Q29uc3RhbnRzKCkuc2V0dGluZ3M6IGFueSksXG5cbiAgZ2V0KGtleTogc3RyaW5nKTogbWl4ZWQge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHJldHVybiB0aGlzLl9zZXR0aW5nc1trZXldO1xuICB9LFxuXG4gIHNldChzZXR0aW5nczogT2JqZWN0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgdGhpcy5fc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHRoaXMuX3NldHRpbmdzLCBzZXR0aW5ncyk7XG4gICAgTmF0aXZlU2V0dGluZ3NNYW5hZ2VyLnNldFZhbHVlcyhzZXR0aW5ncyk7XG4gIH0sXG5cbiAgd2F0Y2hLZXlzKGtleXM6IHN0cmluZyB8IEFycmF5PHN0cmluZz4sIGNhbGxiYWNrOiBGdW5jdGlvbik6IG51bWJlciB7XG4gICAgaWYgKHR5cGVvZiBrZXlzID09PSAnc3RyaW5nJykge1xuICAgICAga2V5cyA9IFtrZXlzXTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBBcnJheS5pc0FycmF5KGtleXMpLFxuICAgICAgJ2tleXMgc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MnLFxuICAgICk7XG5cbiAgICBjb25zdCBzaWQgPSBzdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICBzdWJzY3JpcHRpb25zLnB1c2goe2tleXM6IGtleXMsIGNhbGxiYWNrOiBjYWxsYmFja30pO1xuICAgIHJldHVybiBzaWQ7XG4gIH0sXG5cbiAgY2xlYXJXYXRjaCh3YXRjaElkOiBudW1iZXIpIHtcbiAgICBpZiAod2F0Y2hJZCA8IHN1YnNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgICBzdWJzY3JpcHRpb25zW3dhdGNoSWRdID0ge2tleXM6IFtdLCBjYWxsYmFjazogbnVsbH07XG4gICAgfVxuICB9LFxuXG4gIF9zZW5kT2JzZXJ2YXRpb25zKGJvZHk6IE9iamVjdCkge1xuICAgIE9iamVjdC5rZXlzKGJvZHkpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gYm9keVtrZXldO1xuICAgICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgICBjb25zdCBkaWRDaGFuZ2UgPSB0aGlzLl9zZXR0aW5nc1trZXldICE9PSBuZXdWYWx1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgICAgdGhpcy5fc2V0dGluZ3Nba2V5XSA9IG5ld1ZhbHVlO1xuXG4gICAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4ge1xuICAgICAgICAgIGlmIChzdWIua2V5cy5pbmRleE9mKGtleSkgIT09IC0xICYmIHN1Yi5jYWxsYmFjaykge1xuICAgICAgICAgICAgc3ViLmNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cblJDVERldmljZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgJ3NldHRpbmdzVXBkYXRlZCcsXG4gIFNldHRpbmdzLl9zZW5kT2JzZXJ2YXRpb25zLmJpbmQoU2V0dGluZ3MpLFxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXR0aW5ncztcbiJdLCJtYXBwaW5ncyI6IjtBQVVBO0FBQ0E7QUFDQTtBQUVBLElBQU1BLGFBSUosR0FBRyxFQUFFO0FBRVAsSUFBTUMsUUFBUSxHQUFHO0VBQ2ZDLFNBQVMsRUFBR0MsOEJBQXFCLElBQy9CQSw4QkFBcUIsQ0FBQ0MsWUFBWSxFQUFFLENBQUNDLFFBQWM7RUFFckRDLEdBQUcsZUFBQ0MsR0FBVyxFQUFTO0lBRXRCLE9BQU8sSUFBSSxDQUFDTCxTQUFTLENBQUNLLEdBQUcsQ0FBQztFQUM1QixDQUFDO0VBRURDLEdBQUcsZUFBQ0gsUUFBZ0IsRUFBRTtJQUVwQixJQUFJLENBQUNILFNBQVMsR0FBR08sTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDUixTQUFTLEVBQUVHLFFBQVEsQ0FBQztJQUN4REYsOEJBQXFCLENBQUNRLFNBQVMsQ0FBQ04sUUFBUSxDQUFDO0VBQzNDLENBQUM7RUFFRE8sU0FBUyxxQkFBQ0MsSUFBNEIsRUFBRUMsUUFBa0IsRUFBVTtJQUNsRSxJQUFJLE9BQU9ELElBQUksS0FBSyxRQUFRLEVBQUU7TUFDNUJBLElBQUksR0FBRyxDQUFDQSxJQUFJLENBQUM7SUFDZjtJQUVBLElBQUFFLGtCQUFTLEVBQ1BDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSixJQUFJLENBQUMsRUFDbkIsNkNBQTZDLENBQzlDO0lBRUQsSUFBTUssR0FBRyxHQUFHbEIsYUFBYSxDQUFDbUIsTUFBTTtJQUNoQ25CLGFBQWEsQ0FBQ29CLElBQUksQ0FBQztNQUFDUCxJQUFJLEVBQUVBLElBQUk7TUFBRUMsUUFBUSxFQUFFQTtJQUFRLENBQUMsQ0FBQztJQUNwRCxPQUFPSSxHQUFHO0VBQ1osQ0FBQztFQUVERyxVQUFVLHNCQUFDQyxPQUFlLEVBQUU7SUFDMUIsSUFBSUEsT0FBTyxHQUFHdEIsYUFBYSxDQUFDbUIsTUFBTSxFQUFFO01BQ2xDbkIsYUFBYSxDQUFDc0IsT0FBTyxDQUFDLEdBQUc7UUFBQ1QsSUFBSSxFQUFFLEVBQUU7UUFBRUMsUUFBUSxFQUFFO01BQUksQ0FBQztJQUNyRDtFQUNGLENBQUM7RUFFRFMsaUJBQWlCLDZCQUFDQyxJQUFZLEVBQUU7SUFBQTtJQUM5QmYsTUFBTSxDQUFDSSxJQUFJLENBQUNXLElBQUksQ0FBQyxDQUFDQyxPQUFPLENBQUMsVUFBQWxCLEdBQUcsRUFBSTtNQUMvQixJQUFNbUIsUUFBUSxHQUFHRixJQUFJLENBQUNqQixHQUFHLENBQUM7TUFFMUIsSUFBTW9CLFNBQVMsR0FBRyxLQUFJLENBQUN6QixTQUFTLENBQUNLLEdBQUcsQ0FBQyxLQUFLbUIsUUFBUTtNQUVsRCxLQUFJLENBQUN4QixTQUFTLENBQUNLLEdBQUcsQ0FBQyxHQUFHbUIsUUFBUTtNQUU5QixJQUFJQyxTQUFTLEVBQUU7UUFDYjNCLGFBQWEsQ0FBQ3lCLE9BQU8sQ0FBQyxVQUFBRyxHQUFHLEVBQUk7VUFDM0IsSUFBSUEsR0FBRyxDQUFDZixJQUFJLENBQUNnQixPQUFPLENBQUN0QixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSXFCLEdBQUcsQ0FBQ2QsUUFBUSxFQUFFO1lBQ2hEYyxHQUFHLENBQUNkLFFBQVEsRUFBRTtVQUNoQjtRQUNGLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDO0FBRURnQiw4QkFBcUIsQ0FBQ0MsV0FBVyxDQUMvQixpQkFBaUIsRUFDakI5QixRQUFRLENBQUNzQixpQkFBaUIsQ0FBQ1MsSUFBSSxDQUFDL0IsUUFBUSxDQUFDLENBQzFDO0FBRURnQyxNQUFNLENBQUNDLE9BQU8sR0FBR2pDLFFBQVEifQ==