{"version":3,"names":["ChildListCollection","_cellKeyToChildren","Map","_childrenToCellKey","list","cellKey","invariant","has","cellLists","get","Set","add","set","delete","size","fn","listSet","values"],"sources":["ChildListCollection.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection<TList> {\n  _cellKeyToChildren: Map<string, Set<TList>> = new Map();\n  _childrenToCellKey: Map<TList, string> = new Map();\n\n  add(list: TList, cellKey: string): void {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list: TList): void {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn: TList => void): void {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey: string, fn: TList => void): void {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey: string, fn: TList => boolean): boolean {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size(): number {\n    return this._childrenToCellKey.size;\n  }\n}\n"],"mappings":";;;;;;;AAUA;AAAkC,IAEbA,mBAAmB;EAAA;IAAA;IAAA,KACtCC,kBAAkB,GAA4B,IAAIC,GAAG,EAAE;IAAA,KACvDC,kBAAkB,GAAuB,IAAID,GAAG,EAAE;EAAA;EAAA;IAAA;IAAA,OAElD,aAAIE,IAAW,EAAEC,OAAe,EAAQ;MAAA;MACtC,IAAAC,kBAAS,EACP,CAAC,IAAI,CAACH,kBAAkB,CAACI,GAAG,CAACH,IAAI,CAAC,EAClC,0CAA0C,CAC3C;MAED,IAAMI,SAAS,4BAAG,IAAI,CAACP,kBAAkB,CAACQ,GAAG,CAACJ,OAAO,CAAC,oCAAI,IAAIK,GAAG,EAAE;MACnEF,SAAS,CAACG,GAAG,CAACP,IAAI,CAAC;MACnB,IAAI,CAACH,kBAAkB,CAACW,GAAG,CAACP,OAAO,EAAEG,SAAS,CAAC;MAE/C,IAAI,CAACL,kBAAkB,CAACS,GAAG,CAACR,IAAI,EAAEC,OAAO,CAAC;IAC5C;EAAC;IAAA;IAAA,OAED,gBAAOD,IAAW,EAAQ;MACxB,IAAMC,OAAO,GAAG,IAAI,CAACF,kBAAkB,CAACM,GAAG,CAACL,IAAI,CAAC;MACjD,IAAAE,kBAAS,EAACD,OAAO,IAAI,IAAI,EAAE,yCAAyC,CAAC;MACrE,IAAI,CAACF,kBAAkB,CAACU,MAAM,CAACT,IAAI,CAAC;MAEpC,IAAMI,SAAS,GAAG,IAAI,CAACP,kBAAkB,CAACQ,GAAG,CAACJ,OAAO,CAAC;MACtD,IAAAC,kBAAS,EAACE,SAAS,EAAE,2CAA2C,CAAC;MACjEA,SAAS,CAACK,MAAM,CAACT,IAAI,CAAC;MAEtB,IAAII,SAAS,CAACM,IAAI,KAAK,CAAC,EAAE;QACxB,IAAI,CAACb,kBAAkB,CAACY,MAAM,CAACR,OAAO,CAAC;MACzC;IACF;EAAC;IAAA;IAAA,OAED,iBAAQU,EAAiB,EAAQ;MAC/B,KAAK,IAAMC,OAAO,IAAI,IAAI,CAACf,kBAAkB,CAACgB,MAAM,EAAE,EAAE;QACtD,KAAK,IAAMb,IAAI,IAAIY,OAAO,EAAE;UAC1BD,EAAE,CAACX,IAAI,CAAC;QACV;MACF;IACF;EAAC;IAAA;IAAA,OAED,uBAAcC,OAAe,EAAEU,EAAiB,EAAQ;MAAA;MACtD,IAAMC,OAAO,6BAAG,IAAI,CAACf,kBAAkB,CAACQ,GAAG,CAACJ,OAAO,CAAC,qCAAI,EAAE;MAC1D,KAAK,IAAMD,IAAI,IAAIY,OAAO,EAAE;QAC1BD,EAAE,CAACX,IAAI,CAAC;MACV;IACF;EAAC;IAAA;IAAA,OAED,mBAAUC,OAAe,EAAEU,EAAoB,EAAW;MAAA;MACxD,IAAMC,OAAO,6BAAG,IAAI,CAACf,kBAAkB,CAACQ,GAAG,CAACJ,OAAO,CAAC,qCAAI,EAAE;MAC1D,KAAK,IAAMD,IAAI,IAAIY,OAAO,EAAE;QAC1B,IAAID,EAAE,CAACX,IAAI,CAAC,EAAE;UACZ,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd;EAAC;IAAA;IAAA,OAED,gBAAe;MACb,OAAO,IAAI,CAACD,kBAAkB,CAACW,IAAI;IACrC;EAAC;EAAA;AAAA;AAAA"}