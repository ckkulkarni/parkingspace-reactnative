6c009e071cc0431cd817c2b98d1ff946
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _SliderNativeComponent = _interopRequireDefault(require("./SliderNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["value", "minimumValue", "maximumValue", "step", "onValueChange", "onSlidingComplete"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Slider = function Slider(props, forwardedRef) {
  var _props$accessibilityS;
  var style = _StyleSheet.default.compose(styles.slider, props.style);
  var _props$value = props.value,
    value = _props$value === void 0 ? 0.5 : _props$value,
    _props$minimumValue = props.minimumValue,
    minimumValue = _props$minimumValue === void 0 ? 0 : _props$minimumValue,
    _props$maximumValue = props.maximumValue,
    maximumValue = _props$maximumValue === void 0 ? 1 : _props$maximumValue,
    _props$step = props.step,
    step = _props$step === void 0 ? 0 : _props$step,
    onValueChange = props.onValueChange,
    onSlidingComplete = props.onSlidingComplete,
    localProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var onValueChangeEvent = onValueChange ? function (event) {
    var userEvent = true;
    if (_Platform.default.OS === 'android') {
      userEvent = event.nativeEvent.fromUser != null && event.nativeEvent.fromUser;
    }
    userEvent && onValueChange(event.nativeEvent.value);
  } : null;
  var onSlidingCompleteEvent = onSlidingComplete ? function (event) {
    onSlidingComplete(event.nativeEvent.value);
  } : null;
  var disabled = props.disabled === true || ((_props$accessibilityS = props.accessibilityState) == null ? void 0 : _props$accessibilityS.disabled) === true;
  var accessibilityState = disabled ? Object.assign({}, props.accessibilityState, {
    disabled: true
  }) : props.accessibilityState;
  return (0, _jsxRuntime.jsx)(_SliderNativeComponent.default, Object.assign({}, localProps, {
    accessibilityState: accessibilityState,
    enabled: !disabled,
    disabled: disabled,
    maximumValue: maximumValue,
    minimumValue: minimumValue,
    onResponderTerminationRequest: function onResponderTerminationRequest() {
      return false;
    },
    onSlidingComplete: onSlidingCompleteEvent,
    onStartShouldSetResponder: function onStartShouldSetResponder() {
      return true;
    },
    onValueChange: onValueChangeEvent,
    ref: forwardedRef,
    step: step,
    style: style,
    value: value
  }));
};
var SliderWithRef = React.forwardRef(Slider);
var styles;
if (_Platform.default.OS === 'ios') {
  styles = _StyleSheet.default.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = _StyleSheet.default.create({
    slider: {}
  });
}
module.exports = SliderWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,