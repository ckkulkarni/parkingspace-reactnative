{"version":3,"names":["Slider","props","forwardedRef","style","StyleSheet","compose","styles","slider","value","minimumValue","maximumValue","step","onValueChange","onSlidingComplete","localProps","onValueChangeEvent","event","userEvent","Platform","OS","nativeEvent","fromUser","onSlidingCompleteEvent","disabled","accessibilityState","SliderWithRef","React","forwardRef","create","height","module","exports"],"sources":["Slider.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ImageSource} from '../../Image/ImageSource';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {AccessibilityState} from '../View/ViewAccessibility';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport StyleSheet, {\n  type ColorValue,\n  type ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport SliderNativeComponent from './SliderNativeComponent';\nimport * as React from 'react';\n\ntype Event = SyntheticEvent<\n  $ReadOnly<{|\n    value: number,\n    /**\n     * Android Only.\n     */\n    fromUser?: boolean,\n  |}>,\n>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Assigns a single image for the track. Only static images are supported.\n   * The center pixel of the image will be stretched to fill the track.\n   */\n  trackImage?: ?ImageSource,\n\n  /**\n   * Assigns a minimum track image. Only static images are supported. The\n   * rightmost pixel of the image will be stretched to fill the track.\n   */\n  minimumTrackImage?: ?ImageSource,\n\n  /**\n   * Assigns a maximum track image. Only static images are supported. The\n   * leftmost pixel of the image will be stretched to fill the track.\n   */\n  maximumTrackImage?: ?ImageSource,\n\n  /**\n   * Sets an image for the thumb. Only static images are supported.\n   */\n  thumbImage?: ?ImageSource,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n\n  /**\n   * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n   * `DeprecatedViewStylePropTypes.js` for more info.\n   */\n  style?: ?ViewStyleProp,\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, you don't need to update the\n   * value during dragging.\n   */\n  value?: ?number,\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * Default value is 0.\n   */\n  step?: ?number,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue?: ?number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue?: ?number,\n\n  /**\n   * The color used for the track to the left of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  minimumTrackTintColor?: ?ColorValue,\n\n  /**\n   * The color used for the track to the right of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  maximumTrackTintColor?: ?ColorValue,\n  /**\n   * The color used to tint the default thumb images on iOS, or the\n   * color of the foreground switch grip on Android.\n   */\n  thumbTintColor?: ?ColorValue,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: ?(value: number) => void,\n\n  /**\n   * Callback that is called when the user releases the slider,\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: ?(value: number) => void,\n\n  /**\n   * Used to locate this view in UI automation tests.\n   */\n  testID?: ?string,\n\n  /**\n    Indicates to accessibility services that UI Component is in a specific State.\n   */\n  accessibilityState?: ?AccessibilityState,\n|}>;\n\n/**\n * A component used to select a single value from a range of values.\n *\n * ### Usage\n *\n * The example below shows how to use `Slider` to change\n * a value used by `Text`. The value is stored using\n * the state of the root component (`App`). The same component\n * subscribes to the `onValueChange`  of `Slider` and changes\n * the value using `setState`.\n *\n *```\n * import React from 'react';\n * import { StyleSheet, Text, View, Slider } from 'react-native';\n *\n * export default class App extends React.Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       value: 50\n *     }\n *   }\n *\n *   change(value) {\n *     this.setState(() => {\n *       return {\n *         value: parseFloat(value)\n *       };\n *     });\n *   }\n *\n *   render() {\n *     const {value} = this.state;\n *     return (\n *       <View style={styles.container}>\n *         <Text style={styles.text}>{String(value)}</Text>\n *         <Slider\n *           step={1}\n *           maximumValue={100}\n *           onValueChange={this.change.bind(this)}\n *           value={value} />\n *       </View>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     flexDirection: 'column',\n *     justifyContent: 'center'\n *   },\n *   text: {\n *     fontSize: 50,\n *     textAlign: 'center'\n *   }\n * });\n *```\n *\n */\nconst Slider = (\n  props: Props,\n  forwardedRef?: ?React.Ref<typeof SliderNativeComponent>,\n) => {\n  const style = StyleSheet.compose(styles.slider, props.style);\n\n  const {\n    value = 0.5,\n    minimumValue = 0,\n    maximumValue = 1,\n    step = 0,\n    onValueChange,\n    onSlidingComplete,\n    ...localProps\n  } = props;\n\n  const onValueChangeEvent = onValueChange\n    ? (event: Event) => {\n        let userEvent = true;\n        if (Platform.OS === 'android') {\n          // On Android there's a special flag telling us the user is\n          // dragging the slider.\n          userEvent =\n            event.nativeEvent.fromUser != null && event.nativeEvent.fromUser;\n        }\n        userEvent && onValueChange(event.nativeEvent.value);\n      }\n    : null;\n\n  const onSlidingCompleteEvent = onSlidingComplete\n    ? (event: Event) => {\n        onSlidingComplete(event.nativeEvent.value);\n      }\n    : null;\n\n  const disabled =\n    props.disabled === true || props.accessibilityState?.disabled === true;\n  const accessibilityState = disabled\n    ? {...props.accessibilityState, disabled: true}\n    : props.accessibilityState;\n\n  return (\n    <SliderNativeComponent\n      {...localProps}\n      accessibilityState={accessibilityState}\n      // TODO: Reconcile these across the two platforms.\n      enabled={!disabled}\n      disabled={disabled}\n      maximumValue={maximumValue}\n      minimumValue={minimumValue}\n      onResponderTerminationRequest={() => false}\n      onSlidingComplete={onSlidingCompleteEvent}\n      onStartShouldSetResponder={() => true}\n      onValueChange={onValueChangeEvent}\n      ref={forwardedRef}\n      step={step}\n      style={style}\n      value={value}\n    />\n  );\n};\n\nconst SliderWithRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof SliderNativeComponent>,\n> = React.forwardRef(Slider);\n\nlet styles;\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40,\n    },\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {},\n  });\n}\n\nmodule.exports = SliderWithRef;\n"],"mappings":";;AAeA;AAIA;AACA;AACA;AAA+B;AAAA;AAAA;AAAA;AAoL/B,IAAMA,MAAM,GAAG,SAATA,MAAM,CACVC,KAAY,EACZC,YAAuD,EACpD;EAAA;EACH,IAAMC,KAAK,GAAGC,mBAAU,CAACC,OAAO,CAACC,MAAM,CAACC,MAAM,EAAEN,KAAK,CAACE,KAAK,CAAC;EAE5D,mBAQIF,KAAK,CAPPO,KAAK;IAALA,KAAK,6BAAG,GAAG;IAAA,sBAOTP,KAAK,CANPQ,YAAY;IAAZA,YAAY,oCAAG,CAAC;IAAA,sBAMdR,KAAK,CALPS,YAAY;IAAZA,YAAY,oCAAG,CAAC;IAAA,cAKdT,KAAK,CAJPU,IAAI;IAAJA,IAAI,4BAAG,CAAC;IACRC,aAAa,GAGXX,KAAK,CAHPW,aAAa;IACbC,iBAAiB,GAEfZ,KAAK,CAFPY,iBAAiB;IACdC,UAAU,0CACXb,KAAK;EAET,IAAMc,kBAAkB,GAAGH,aAAa,GACpC,UAACI,KAAY,EAAK;IAChB,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIC,iBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MAG7BF,SAAS,GACPD,KAAK,CAACI,WAAW,CAACC,QAAQ,IAAI,IAAI,IAAIL,KAAK,CAACI,WAAW,CAACC,QAAQ;IACpE;IACAJ,SAAS,IAAIL,aAAa,CAACI,KAAK,CAACI,WAAW,CAACZ,KAAK,CAAC;EACrD,CAAC,GACD,IAAI;EAER,IAAMc,sBAAsB,GAAGT,iBAAiB,GAC5C,UAACG,KAAY,EAAK;IAChBH,iBAAiB,CAACG,KAAK,CAACI,WAAW,CAACZ,KAAK,CAAC;EAC5C,CAAC,GACD,IAAI;EAER,IAAMe,QAAQ,GACZtB,KAAK,CAACsB,QAAQ,KAAK,IAAI,IAAI,0BAAAtB,KAAK,CAACuB,kBAAkB,qBAAxB,sBAA0BD,QAAQ,MAAK,IAAI;EACxE,IAAMC,kBAAkB,GAAGD,QAAQ,qBAC3BtB,KAAK,CAACuB,kBAAkB;IAAED,QAAQ,EAAE;EAAI,KAC5CtB,KAAK,CAACuB,kBAAkB;EAE5B,OACE,qBAAC,8BAAqB,oBAChBV,UAAU;IACd,kBAAkB,EAAEU,kBAAmB;IAEvC,OAAO,EAAE,CAACD,QAAS;IACnB,QAAQ,EAAEA,QAAS;IACnB,YAAY,EAAEb,YAAa;IAC3B,YAAY,EAAED,YAAa;IAC3B,6BAA6B,EAAE;MAAA,OAAM,KAAK;IAAA,CAAC;IAC3C,iBAAiB,EAAEa,sBAAuB;IAC1C,yBAAyB,EAAE;MAAA,OAAM,IAAI;IAAA,CAAC;IACtC,aAAa,EAAEP,kBAAmB;IAClC,GAAG,EAAEb,YAAa;IAClB,IAAI,EAAES,IAAK;IACX,KAAK,EAAER,KAAM;IACb,KAAK,EAAEK;EAAM,GACb;AAEN,CAAC;AAED,IAAMiB,aAGL,GAAGC,KAAK,CAACC,UAAU,CAAC3B,MAAM,CAAC;AAE5B,IAAIM,MAAM;AACV,IAAIY,iBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;EACzBb,MAAM,GAAGF,mBAAU,CAACwB,MAAM,CAAC;IACzBrB,MAAM,EAAE;MACNsB,MAAM,EAAE;IACV;EACF,CAAC,CAAC;AACJ,CAAC,MAAM;EACLvB,MAAM,GAAGF,mBAAU,CAACwB,MAAM,CAAC;IACzBrB,MAAM,EAAE,CAAC;EACX,CAAC,CAAC;AACJ;AAEAuB,MAAM,CAACC,OAAO,GAAGN,aAAa"}