f3880b171adbdaf6b5f1fbaca17487cb
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Payment Screen/Deregister Parking', function () {
  it('Shows time spent in parking', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var details = {
      reg: 'ABC123',
      time: new Date().toISOString()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: {
          params: {
            details: details
          }
        }
      })),
      getByTestId = _render.getByTestId;
    var timer = new Date();
    timer.setHours(timer.getHours() - 1);
    details.time = timer.toLocaleTimeString();
    jest.advanceTimersByTime(60 * 60 * 1000);
    var timeSpent = getByTestId('deregester-time-spent');
    console.log(timeSpent.props);
    yield (0, _reactNative.waitFor)(function () {
      return expect(timeSpent.props.children[1]).toBe('1 hours 0 minutes');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJ1c2VGYWtlVGltZXJzIiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZW5kZXIiLCJwYXJhbXMiLCJnZXRCeVRlc3RJZCIsInRpbWVyIiwic2V0SG91cnMiLCJnZXRIb3VycyIsInRvTG9jYWxlVGltZVN0cmluZyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJ0aW1lU3BlbnQiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwiY2hpbGRyZW4iLCJ0b0JlIl0sInNvdXJjZXMiOlsiUGF5bWVudFNjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUGF5bWVudFNjcmVlbiBmcm9tICcuLi9QYXltZW50U2NyZWVuJztcclxuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5kZXNjcmliZSgnUGF5bWVudCBTY3JlZW4vRGVyZWdpc3RlciBQYXJraW5nJywgKCkgPT4ge1xyXG4gIGl0KCdTaG93cyB0aW1lIHNwZW50IGluIHBhcmtpbmcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuICAgIGNvbnN0IGRldGFpbHMgPSB7XHJcbiAgICAgIHJlZzogJ0FCQzEyMycsXHJcbiAgICAgIHRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgIH07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxQYXltZW50U2NyZWVuIHJvdXRlPXt7cGFyYW1zOiB7ZGV0YWlsc319fSAvPik7XHJcbiAgICBjb25zdCB0aW1lciA9IG5ldyBEYXRlKCk7XHJcbiAgICB0aW1lci5zZXRIb3Vycyh0aW1lci5nZXRIb3VycygpIC0gMSk7XHJcbiAgICBkZXRhaWxzLnRpbWUgPSB0aW1lci50b0xvY2FsZVRpbWVTdHJpbmcoKTtcclxuXHJcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNjAgKiA2MCAqIDEwMDApO1xyXG4gICAgY29uc3QgdGltZVNwZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItdGltZS1zcGVudCcpO1xyXG4gICAgY29uc29sZS5sb2codGltZVNwZW50LnByb3BzKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT5cclxuICAgICAgZXhwZWN0KHRpbWVTcGVudC5wcm9wcy5jaGlsZHJlblsxXSkudG9CZSgnMSBob3VycyAwIG1pbnV0ZXMnKSxcclxuICAgICk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQU1BLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQVpIO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBdUQ7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBUXZELElBQU1HLFVBQVUsR0FBRyxJQUFBTCxxQkFBYSxHQUFrQztBQUNsRU0sUUFBUSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07RUFDbERDLEVBQUUsQ0FBQyw2QkFBNkIsa0NBQUUsYUFBWTtJQUM1Q04sSUFBSSxDQUFDTyxhQUFhLEVBQUU7SUFDcEIsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLEVBQUUsQ0FBQ0MsV0FBVztJQUM5QixDQUFDO0lBQ0QsY0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxxQkFBQyxzQkFBYTtRQUFDLEtBQUssRUFBRTtVQUFDQyxNQUFNLEVBQUU7WUFBQ04sT0FBTyxFQUFQQTtVQUFPO1FBQUM7TUFBRSxFQUFHLENBQUM7TUFBcEVPLFdBQVcsV0FBWEEsV0FBVztJQUNsQixJQUFNQyxLQUFLLEdBQUcsSUFBSUwsSUFBSSxFQUFFO0lBQ3hCSyxLQUFLLENBQUNDLFFBQVEsQ0FBQ0QsS0FBSyxDQUFDRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcENWLE9BQU8sQ0FBQ0UsSUFBSSxHQUFHTSxLQUFLLENBQUNHLGtCQUFrQixFQUFFO0lBRXpDbkIsSUFBSSxDQUFDb0IsbUJBQW1CLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDeEMsSUFBTUMsU0FBUyxHQUFHTixXQUFXLENBQUMsdUJBQXVCLENBQUM7SUFDdERPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixTQUFTLENBQUNHLEtBQUssQ0FBQztJQUM1QixNQUFNLElBQUFDLG9CQUFPLEVBQUM7TUFBQSxPQUNaQyxNQUFNLENBQUNMLFNBQVMsQ0FBQ0csS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQUEsRUFDOUQ7RUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMifQ==