ad2e278301493182ab52ca6e1a7283cc
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  var mockMarkSpaceAsUnoccupied = jest.fn();
  var mockRoute = {
    params: {
      details: {
        reg: 'ABC123',
        time: '21-02-2023'
      },
      space: 1,
      markSpaceAsUnoccupied: mockMarkSpaceAsUnoccupied
    }
  };
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn(function () {
      return Promise.resolve({
        ok: true
      });
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('deregester-payment-button');
    });
    _reactNative.fireEvent.press(getByTestId('deregester-payment-button'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledTimes(1);
    });
    expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledWith(1);
  }));
  it('should navigate to the previous screen on press of Go Back button', function () {
    var goBack = jest.fn();
    var navigation = {
      goBack: goBack
    };
    var route = {
      params: {
        spaces: [],
        space: 1,
        details: {
          reg: 'ABC',
          time: '22-02-2023'
        },
        markSpaceAsUnoccupied: jest.fn()
      }
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render4.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    console.log(navigation.goBack);
    expect(goBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,