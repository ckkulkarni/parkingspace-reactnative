421cde6661f9f780b7325abb0548b678
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['setNativeDate']
});
exports.Commands = Commands;
var _default = (0, _codegenNativeComponent.default)('DatePicker', {
  paperComponentName: 'RCTDatePicker',
  excludedPlatforms: ['android']
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21tYW5kcyIsImNvZGVnZW5OYXRpdmVDb21tYW5kcyIsInN1cHBvcnRlZENvbW1hbmRzIiwiY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsInBhcGVyQ29tcG9uZW50TmFtZSIsImV4Y2x1ZGVkUGxhdGZvcm1zIl0sInNvdXJjZXMiOlsiUkNURGF0ZVBpY2tlck5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1xuICBCdWJibGluZ0V2ZW50SGFuZGxlcixcbiAgRmxvYXQsXG4gIFdpdGhEZWZhdWx0LFxufSBmcm9tICcuLi8uLi9UeXBlcy9Db2RlZ2VuVHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcblxuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21tYW5kcyBmcm9tICcuLi8uLi9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uL1V0aWxpdGllcy9jb2RlZ2VuTmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBFdmVudCA9ICRSZWFkT25seTx7fFxuICB0aW1lc3RhbXA6IEZsb2F0LFxufH0+O1xuXG50eXBlIE5hdGl2ZVByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlZpZXdQcm9wcyxcbiAgZGF0ZT86ID9GbG9hdCxcbiAgaW5pdGlhbERhdGU/OiA/RmxvYXQsXG4gIGxvY2FsZT86ID9zdHJpbmcsXG4gIG1heGltdW1EYXRlPzogP0Zsb2F0LFxuICBtaW5pbXVtRGF0ZT86ID9GbG9hdCxcbiAgbWludXRlSW50ZXJ2YWw/OiBXaXRoRGVmYXVsdDxcbiAgICAxIHwgMiB8IDMgfCA0IHwgNSB8IDYgfCAxMCB8IDEyIHwgMTUgfCAyMCB8IDMwLFxuICAgIDEsXG4gID4sXG4gIG1vZGU/OiBXaXRoRGVmYXVsdDwnZGF0ZScgfCAndGltZScgfCAnZGF0ZXRpbWUnLCAnZGF0ZSc+LFxuICBvbkNoYW5nZT86ID9CdWJibGluZ0V2ZW50SGFuZGxlcjxFdmVudD4sXG4gIHRpbWVab25lT2Zmc2V0SW5NaW51dGVzPzogP0Zsb2F0LFxuICBwaWNrZXJTdHlsZT86IFdpdGhEZWZhdWx0PCdjb21wYWN0JyB8ICdzcGlubmVyJyB8ICdpbmxpbmUnLCAnc3Bpbm5lcic+LFxufH0+O1xuXG50eXBlIENvbXBvbmVudFR5cGUgPSBIb3N0Q29tcG9uZW50PE5hdGl2ZVByb3BzPjtcblxuaW50ZXJmYWNlIE5hdGl2ZUNvbW1hbmRzIHtcbiAgK3NldE5hdGl2ZURhdGU6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPENvbXBvbmVudFR5cGU+LFxuICAgIGRhdGU6IEZsb2F0LFxuICApID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBDb21tYW5kczogTmF0aXZlQ29tbWFuZHMgPSBjb2RlZ2VuTmF0aXZlQ29tbWFuZHM8TmF0aXZlQ29tbWFuZHM+KHtcbiAgc3VwcG9ydGVkQ29tbWFuZHM6IFsnc2V0TmF0aXZlRGF0ZSddLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPignRGF0ZVBpY2tlcicsIHtcbiAgcGFwZXJDb21wb25lbnROYW1lOiAnUkNURGF0ZVBpY2tlcicsXG4gIGV4Y2x1ZGVkUGxhdGZvcm1zOiBbJ2FuZHJvaWQnXSxcbn0pOiBIb3N0Q29tcG9uZW50PE5hdGl2ZVByb3BzPik7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBa0JBO0FBQ0E7QUFDQTtBQUErQjtBQUFBO0FBZ0N4QixJQUFNQSxRQUF3QixHQUFHLElBQUFDLDhCQUFxQixFQUFpQjtFQUM1RUMsaUJBQWlCLEVBQUUsQ0FBQyxlQUFlO0FBQ3JDLENBQUMsQ0FBQztBQUFDO0FBQUEsZUFFYSxJQUFBQywrQkFBc0IsRUFBYyxZQUFZLEVBQUU7RUFDaEVDLGtCQUFrQixFQUFFLGVBQWU7RUFDbkNDLGlCQUFpQixFQUFFLENBQUMsU0FBUztBQUMvQixDQUFDLENBQUM7QUFBQSJ9