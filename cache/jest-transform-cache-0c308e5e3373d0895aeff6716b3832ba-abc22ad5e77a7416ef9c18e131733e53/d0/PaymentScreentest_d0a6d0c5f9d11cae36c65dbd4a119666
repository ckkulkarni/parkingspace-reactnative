8b1ae137b5e6c1c00f7a1adba39c2d3e
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', function () {
    var markSpaceAsUnoccupiedMock = jest.fn();
    var navigation = {
      goBack: jest.fn()
    };
    var route = {
      params: {
        details: {
          reg: 'ABC123',
          time: '2022-02-22T10:00:00.000Z'
        },
        space: 1,
        spaces: [],
        markSpaceAsUnoccupied: markSpaceAsUnoccupiedMock
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render3.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    expect(markSpaceAsUnoccupiedMock).toHaveBeenCalled();
    expect(navigation.goBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIml0IiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInBhcmFtcyIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsIm1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2siLCJuYXZpZ2F0aW9uIiwic3BhY2UiLCJzcGFjZXMiLCJtYXJrU3BhY2VBc1Vub2NjdXBpZWQiLCJnb0JhY2tCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7YWN0fSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcclxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuY29uc3QgY2FsY3VsYXRlQ2hhcmdlc01vY2sgPSBqZXN0LmZuKCk7XHJcbmRlc2NyaWJlKCdQYXltZW50IFNjcmVlbi9EZXJlZ2lzdGVyIFBhcmtpbmcnLCAoKSA9PiB7XHJcbiAgaXQoJ0Rpc3BsYXlzIHRoZSB0aW1lIHNwZW50JywgKCkgPT4ge1xyXG4gICAgY29uc3QgZGV0YWlscyA9IHtcclxuICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgdGltZTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJvdXRlID0ge3BhcmFtczoge2RldGFpbHN9fTtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFBheW1lbnRTY3JlZW4gcm91dGU9e3JvdXRlfSAvPik7XHJcbiAgICBjb25zdCB0aW1lU3BlbnRFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItdGltZS1zcGVudCcpO1xyXG4gICAgY29uc29sZS5sb2coJ3RpbWVTcGVudEVsZW1lbnQ6JywgdGltZVNwZW50RWxlbWVudC5wcm9wcy5jaGlsZHJlblsxXSk7XHJcbiAgICBleHBlY3QodGltZVNwZW50RWxlbWVudCkudG9IYXZlVGV4dENvbnRlbnQoJ1RpbWUgU3BlbnQ6IDEgaG91cnMgMCBtaW51dGVzJyk7XHJcbiAgfSk7XHJcbiAgaXQoJ1Nob3dzIHBhcmtpbmcgY2hhcmdlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZGV0YWlscyA9IHtcclxuICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgdGltZTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJvdXRlID0ge3BhcmFtczoge2RldGFpbHN9fTtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFBheW1lbnRTY3JlZW4gcm91dGU9e3JvdXRlfSAvPik7XHJcbiAgICBjb25zdCBwYXJraW5nQ2hhcmdlRWxlbWVudCA9IGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLWNoYXJnZScpO1xyXG4gICAgZXhwZWN0KHBhcmtpbmdDaGFyZ2VFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnUGFya2luZyBDaGFyZ2VzOiAkMTAnKTtcclxuICB9KTtcclxuICBpdCgnY2FsbHMgbWFya1NwYWNlQXNVbm9jY3VwaWVkIGFuZCBuYXZpZ2F0ZXMgYmFjayB0byBwcmV2aW91cyBzY3JlZW4nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtYXJrU3BhY2VBc1Vub2NjdXBpZWRNb2NrID0gamVzdC5mbigpO1xyXG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IHtnb0JhY2s6IGplc3QuZm4oKX07XHJcbiAgICBjb25zdCByb3V0ZSA9IHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgICAgIHRpbWU6ICcyMDIyLTAyLTIyVDEwOjAwOjAwLjAwMFonLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BhY2U6IDEsXHJcbiAgICAgICAgc3BhY2VzOiBbXSxcclxuICAgICAgICBtYXJrU3BhY2VBc1Vub2NjdXBpZWQ6IG1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2ssXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcclxuICAgICAgPFBheW1lbnRTY3JlZW4gcm91dGU9e3JvdXRlfSBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9ufSAvPixcclxuICAgICk7XHJcbiAgICBjb25zdCBnb0JhY2tCdXR0b24gPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci1iYWNrJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ29CYWNrQnV0dG9uKTtcclxuICAgIGV4cGVjdChtYXJrU3BhY2VBc1Vub2NjdXBpZWRNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICBleHBlY3QobmF2aWdhdGlvbi5nb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBUUEsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUNuQkcsTUFBTSxFQUFFSixJQUFJLENBQUNDLEVBQUU7SUFDakIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQWZIO0FBQ0E7QUFDQTtBQUNBO0FBQW9EO0FBQUE7RUFBQTtJQUFBO0VBQUE7SUFBQTtFQUFBO0VBQUE7QUFBQTtBQWFwRCxJQUFNSSxvQkFBb0IsR0FBR0wsSUFBSSxDQUFDQyxFQUFFLEVBQUU7QUFDdENLLFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0VBQ2xEQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsWUFBTTtJQUNsQyxJQUFNQyxPQUFPLEdBQUc7TUFDZEMsR0FBRyxFQUFFLFFBQVE7TUFDYkMsSUFBSSxFQUFFLElBQUlDLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDQyxXQUFXO0lBQ3pELENBQUM7SUFDRCxJQUFNQyxLQUFLLEdBQUc7TUFBQ0MsTUFBTSxFQUFFO1FBQUNQLE9BQU8sRUFBUEE7TUFBTztJQUFDLENBQUM7SUFDakMsY0FBc0IsSUFBQVEsbUJBQU0sRUFBQyxxQkFBQyxzQkFBYTtRQUFDLEtBQUssRUFBRUY7TUFBTSxFQUFHLENBQUM7TUFBdERHLFdBQVcsV0FBWEEsV0FBVztJQUNsQixJQUFNQyxnQkFBZ0IsR0FBR0QsV0FBVyxDQUFDLHVCQUF1QixDQUFDO0lBQzdERSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRUYsZ0JBQWdCLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BFQyxNQUFNLENBQUNMLGdCQUFnQixDQUFDLENBQUNNLGlCQUFpQixDQUFDLCtCQUErQixDQUFDO0VBQzdFLENBQUMsQ0FBQztFQUNGakIsRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQU07SUFDL0IsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLENBQUNBLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQ0MsV0FBVztJQUN6RCxDQUFDO0lBQ0QsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDUCxPQUFPLEVBQVBBO01BQU87SUFBQyxDQUFDO0lBQ2pDLGVBQXNCLElBQUFRLG1CQUFNLEVBQUMscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUVGO01BQU0sRUFBRyxDQUFDO01BQXRERyxXQUFXLFlBQVhBLFdBQVc7SUFDbEIsSUFBTVEsb0JBQW9CLEdBQUdSLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztJQUM3RE0sTUFBTSxDQUFDRSxvQkFBb0IsQ0FBQyxDQUFDRCxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQztFQUN4RSxDQUFDLENBQUM7RUFDRmpCLEVBQUUsQ0FBQyxtRUFBbUUsRUFBRSxZQUFNO0lBQzVFLElBQU1tQix5QkFBeUIsR0FBRzFCLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzNDLElBQU0wQixVQUFVLEdBQUc7TUFBQ3ZCLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFO0lBQUUsQ0FBQztJQUN0QyxJQUFNYSxLQUFLLEdBQUc7TUFDWkMsTUFBTSxFQUFFO1FBQ05QLE9BQU8sRUFBRTtVQUNQQyxHQUFHLEVBQUUsUUFBUTtVQUNiQyxJQUFJLEVBQUU7UUFDUixDQUFDO1FBQ0RrQixLQUFLLEVBQUUsQ0FBQztRQUNSQyxNQUFNLEVBQUUsRUFBRTtRQUNWQyxxQkFBcUIsRUFBRUo7TUFDekI7SUFDRixDQUFDO0lBQ0QsZUFBc0IsSUFBQVYsbUJBQU0sRUFDMUIscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUVGLEtBQU07UUFBQyxVQUFVLEVBQUVhO01BQVcsRUFBRyxDQUN4RDtNQUZNVixXQUFXLFlBQVhBLFdBQVc7SUFHbEIsSUFBTWMsWUFBWSxHQUFHZCxXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDbkRlLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsWUFBWSxDQUFDO0lBQzdCUixNQUFNLENBQUNHLHlCQUF5QixDQUFDLENBQUNRLGdCQUFnQixFQUFFO0lBQ3BEWCxNQUFNLENBQUNJLFVBQVUsQ0FBQ3ZCLE1BQU0sQ0FBQyxDQUFDOEIsZ0JBQWdCLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=