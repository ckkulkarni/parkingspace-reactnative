9461cf2e617cf730659c387700589a98
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    var markSpaceAsUnoccupiedMock = jest.fn();
    var navigation = (0, _native.useNavigation)();
    var route = {
      params: {
        details: {
          reg: 'ABC123',
          time: '2022-02-22T10:00:00.000Z'
        },
        space: 1
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation,
        markSpaceAsUnoccupied: markSpaceAsUnoccupiedMock
      })),
      getByTestId = _render3.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(markSpaceAsUnoccupiedMock).toHaveBeenCalled();
      expect(navigation.goBack).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIml0IiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInBhcmFtcyIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsIm1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2siLCJuYXZpZ2F0aW9uIiwic3BhY2UiLCJnb0JhY2tCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiUGF5bWVudFNjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUGF5bWVudFNjcmVlbiBmcm9tICcuLi9QYXltZW50U2NyZWVuJztcclxuaW1wb3J0IHtyZW5kZXIsIHdhaXRGb3IsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmNvbnN0IGNhbGN1bGF0ZUNoYXJnZXNNb2NrID0gamVzdC5mbigpO1xyXG5cclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2sgPSBqZXN0LmZuKCk7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbiAgICBjb25zdCByb3V0ZSA9IHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgICAgIHRpbWU6ICcyMDIyLTAyLTIyVDEwOjAwOjAwLjAwMFonLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BhY2U6IDEsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcclxuICAgICAgPFBheW1lbnRTY3JlZW5cclxuICAgICAgICByb3V0ZT17cm91dGV9XHJcbiAgICAgICAgbmF2aWdhdGlvbj17bmF2aWdhdGlvbn1cclxuICAgICAgICBtYXJrU3BhY2VBc1Vub2NjdXBpZWQ9e21hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2t9XHJcbiAgICAgIC8+LFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGdvQmFja0J1dHRvbiA9IGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLWJhY2snKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnb0JhY2tCdXR0b24pO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChtYXJrU3BhY2VBc1Vub2NjdXBpZWRNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLmdvQmFjaykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQU1BLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDbkJHLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFO0lBQ2pCLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQWJIO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBdUQ7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBU3ZELElBQU1JLG9CQUFvQixHQUFHTCxJQUFJLENBQUNDLEVBQUUsRUFBRTtBQUV0Q0ssUUFBUSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07RUFDbERDLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0lBQ2xDLElBQU1DLE9BQU8sR0FBRztNQUNkQyxHQUFHLEVBQUUsUUFBUTtNQUNiQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxDQUFDQSxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUNDLFdBQVc7SUFDekQsQ0FBQztJQUNELElBQU1DLEtBQUssR0FBRztNQUFD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