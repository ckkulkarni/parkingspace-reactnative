e7d438482a3f4c54c960b46c6202fbea
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    var markSpaceAsOccupiedMock = jest.fn();
    var route = {
      params: {
        details: {
          reg: 'ABC123',
          time: '2022-02-22T10:00:00.000Z'
        },
        space: 1
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        markSpaceAsOccupied: markSpaceAsOccupiedMock
      })),
      getByTestId = _render3.getByTestId;
    var paymentButton = getByTestId('deregester-payment-button');
    _reactNative.fireEvent.press(paymentButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(markSpaceAsOccupiedMock).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIml0IiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInBhcmFtcyIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsIm1hcmtTcGFjZUFzT2NjdXBpZWRNb2NrIiwic3BhY2UiLCJwYXltZW50QnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ3YWl0Rm9yIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIlBheW1lbnRTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBheW1lbnRTY3JlZW4gZnJvbSAnLi4vUGF5bWVudFNjcmVlbic7XHJcbmltcG9ydCB7cmVuZGVyLCB3YWl0Rm9yLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3QnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCB7TmF2aWdhdGlvbkNvbnRhaW5lciwgdXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICBnb0JhY2s6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5jb25zdCBjYWxjdWxhdGVDaGFyZ2VzTW9jayA9IGplc3QuZm4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1hcmtTcGFjZUFzT2NjdXBpZWRNb2NrID0gamVzdC5mbigpO1xyXG4gICAgY29uc3Qgcm91dGUgPSB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgIHJlZzogJ0FCQzEyMycsXHJcbiAgICAgICAgICB0aW1lOiAnMjAyMi0wMi0yMlQxMDowMDowMC4wMDBaJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNwYWNlOiAxLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXHJcbiAgICAgIDxQYXltZW50U2NyZWVuXHJcbiAgICAgICAgcm91dGU9e3JvdXRlfVxyXG4gICAgICAgIG1hcmtTcGFjZUFzT2NjdXBpZWQ9e21hcmtTcGFjZUFzT2NjdXBpZWRNb2NrfVxyXG4gICAgICAvPixcclxuICAgICk7XHJcbiAgICBjb25zdCBwYXltZW50QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItcGF5bWVudC1idXR0b24nKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhwYXltZW50QnV0dG9uKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QobWFya1NwYWNlQXNPY2N1cGllZE1vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFNQSxjQUFLQSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ25CRyxNQUFNLEVBQUVKLElBQUksQ0FBQ0MsRUFBRTtJQUNqQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDO0FBQUE7QUFiSDtBQUNBO0FBQ0E7QUFDQTtBQUFvRDtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFXcEQsSUFBTUksb0JBQW9CLEdBQUdMLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0FBQ3RDSyxRQUFRLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtFQUNsREMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQU07SUFDbEMsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLENBQUNBLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQ0MsV0FBVztJQUN6RCxDQUFDO0lBQ0QsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDUCxPQUFPLEVBQVBBO01BQU87SUFBQyxDQUFDO0lBQ2pDLGNBQXNCLElBQUFRLG1CQUFNLEVBQUMscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUVGO01BQU0sRUFBRyxDQUFDO01BQXRERyxXQUFXLFdBQVhBLFdBQVc7SUFDbEIsSUFBTUMsZ0JBQWdCLEdBQUdELFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQztJQUM3REUsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLEVBQUVGLGdCQUFnQixDQUFDRyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRUMsTUFBTSxDQUFDTCxnQkFBZ0IsQ0FBQyxDQUFDTSxpQkFBaUIsQ0FBQywrQkFBK0IsQ0FBQztFQUM3RSxDQUFDLENBQUM7RUFDRmpCLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0lBQy9CLElBQU1DLE9BQU8sR0FBRztNQUNkQyxHQUFHLEVBQUUsUUFBUTtNQUNiQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxDQUFDQSxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUNDLFdBQVc7SUFDekQsQ0FBQztJQUNELElBQU1DLEtBQUssR0FBRztNQUFDQyxNQUFNLEVBQUU7UUFBQ1AsT0FBTyxFQUFQQTtNQUFPO0lBQUMsQ0FBQztJQUNqQyxlQUFzQixJQUFBUSxtQkFBTSxFQUFDLHFCQUFDLHNCQUFhO1FBQUMsS0FBSyxFQUFFRjtNQUFNLEVBQUcsQ0FBQztNQUF0REcsV0FBVyxZQUFYQSxXQUFXO0lBQ2xCLElBQU1RLG9CQUFvQixHQUFHUixXQUFXLENBQUMsbUJBQW1CLENBQUM7SUFDN0RNLE1BQU0sQ0FBQ0Usb0JBQW9CLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7RUFDeEUsQ0FBQyxDQUFDO0VBQ0ZqQixFQUFFLENBQUMsbUVBQW1FLGtDQUFFLGFBQVk7SUFDbEYsSUFBTW1CLHVCQUF1QixHQUFHMUIsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDekMsSUFBTWEsS0FBSyxHQUFHO01BQ1pDLE1BQU0sRUFBRTtRQUNOUCxPQUFPLEVBQUU7VUFDUEMsR0FBRyxFQUFFLFFBQVE7VUFDYkMsSUFBSSxFQUFFO1FBQ1IsQ0FBQztRQUNEaUIsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFDO0lBQ0QsZUFBc0IsSUFBQVgsbUJBQU0sRUFDMUIscUJBQUMsc0JBQWE7UUFDWixLQUFLLEVBQUVGLEtBQU07UUFDYixtQkFBbUIsRUFBRVk7TUFBd0IsRUFDN0MsQ0FDSDtNQUxNVCxXQUFXLFlBQVhBLFdBQVc7SUFNbEIsSUFBTVcsYUFBYSxHQUFHWCxXQUFXLENBQUMsMkJBQTJCLENBQUM7SUFDOURZLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsYUFBYSxDQUFDO0lBQzlCLE1BQU0sSUFBQUcsb0JBQU8sRUFBQyxZQUFNO01BQ2xCUixNQUFNLENBQUNHLHVCQUF1QixDQUFDLENBQUNNLGdCQUFnQixFQUFFO0lBQ3BELENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyJ9