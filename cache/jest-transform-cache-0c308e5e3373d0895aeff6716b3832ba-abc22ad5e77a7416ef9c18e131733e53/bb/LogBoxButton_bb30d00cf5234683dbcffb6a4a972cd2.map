{"version":3,"names":["LogBoxButton","props","React","useState","pressed","setPressed","backgroundColor","default","LogBoxStyle","getBackgroundColor","content","StyleSheet","compose","style","children","onPress","hitSlop"],"sources":["LogBoxButton.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nimport TouchableWithoutFeedback from '../../Components/Touchable/TouchableWithoutFeedback';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  backgroundColor: $ReadOnly<{|\n    default: string,\n    pressed: string,\n  |}>,\n  children?: React.Node,\n  hitSlop?: ?EdgeInsetsProp,\n  onPress?: ?(event: PressEvent) => void,\n  style?: ViewStyleProp,\n|}>;\n\nfunction LogBoxButton(props: Props): React.Node {\n  const [pressed, setPressed] = React.useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={StyleSheet.compose(\n        {\n          backgroundColor: pressed\n            ? backgroundColor.pressed\n            : backgroundColor.default,\n        },\n        props.style,\n      )}>\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <TouchableWithoutFeedback\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}>\n      {content}\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport default LogBoxButton;\n"],"mappings":";;;;;;AAcA;AACA;AACA;AACA;AACA;AAA+B;AAAA;AAAA;AAa/B,SAASA,YAAY,CAACC,KAAY,EAAc;EAC9C,sBAA8BC,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5CC,OAAO;IAAEC,UAAU;EAE1B,IAAIC,eAAe,GAAGL,KAAK,CAACK,eAAe;EAC3C,IAAI,CAACA,eAAe,EAAE;IACpBA,eAAe,GAAG;MAChBC,OAAO,EAAEC,WAAW,CAACC,kBAAkB,CAAC,IAAI,CAAC;MAC7CL,OAAO,EAAEI,WAAW,CAACC,kBAAkB,CAAC,GAAG;IAC7C,CAAC;EACH;EAEA,IAAMC,OAAO,GACX,qBAAC,aAAI;IACH,KAAK,EAAEC,mBAAU,CAACC,OAAO,CACvB;MACEN,eAAe,EAAEF,OAAO,GACpBE,eAAe,CAACF,OAAO,GACvBE,eAAe,CAACC;IACtB,CAAC,EACDN,KAAK,CAACY,KAAK,CACX;IAAA,UACDZ,KAAK,CAACa;EAAQ,EAElB;EAED,OAAOb,KAAK,CAACc,OAAO,IAAI,IAAI,GAC1BL,OAAO,GAEP,qBAAC,iCAAwB;IACvB,OAAO,EAAET,KAAK,CAACe,OAAQ;IACvB,OAAO,EAAEf,KAAK,CAACc,OAAQ;IACvB,SAAS,EAAE;MAAA,OAAMV,UAAU,CAAC,IAAI,CAAC;IAAA,CAAC;IAClC,UAAU,EAAE;MAAA,OAAMA,UAAU,CAAC,KAAK,CAAC;IAAA,CAAC;IAAA,UACnCK;EAAO,EAEX;AACH;AAAC,eAEcV,YAAY;AAAA"}