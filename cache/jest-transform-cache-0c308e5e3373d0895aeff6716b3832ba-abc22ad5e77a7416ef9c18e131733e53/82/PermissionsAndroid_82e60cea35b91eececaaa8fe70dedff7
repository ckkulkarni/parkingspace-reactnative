5773b0f44d94be7a4b288c1180cdee3d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeDialogManagerAndroid = _interopRequireDefault(require("../NativeModules/specs/NativeDialogManagerAndroid"));
var _NativePermissionsAndroid = _interopRequireDefault(require("./NativePermissionsAndroid"));
var _invariant = _interopRequireDefault(require("invariant"));
var Platform = require('../Utilities/Platform');
var PERMISSION_REQUEST_RESULT = Object.freeze({
  GRANTED: 'granted',
  DENIED: 'denied',
  NEVER_ASK_AGAIN: 'never_ask_again'
});
var PERMISSIONS = Object.freeze({
  READ_CALENDAR: 'android.permission.READ_CALENDAR',
  WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
  CAMERA: 'android.permission.CAMERA',
  READ_CONTACTS: 'android.permission.READ_CONTACTS',
  WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
  GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
  ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
  ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
  ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
  RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
  READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
  CALL_PHONE: 'android.permission.CALL_PHONE',
  READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
  WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
  ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
  READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
  WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
  USE_SIP: 'android.permission.USE_SIP',
  PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
  BODY_SENSORS: 'android.permission.BODY_SENSORS',
  BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
  SEND_SMS: 'android.permission.SEND_SMS',
  RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
  READ_SMS: 'android.permission.READ_SMS',
  RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
  RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
  READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
  READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
  READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
  READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
  WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
  BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
  ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
  ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
  ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
  ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
  READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
  UWB_RANGING: 'android.permission.UWB_RANGING',
  POST_NOTIFICATION: 'android.permission.POST_NOTIFICATIONS',
  POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
  NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
});
var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    (0, _classCallCheck2.default)(this, PermissionsAndroid);
    this.PERMISSIONS = PERMISSIONS;
    this.RESULTS = PERMISSION_REQUEST_RESULT;
  }
  (0, _createClass2.default)(PermissionsAndroid, [{
    key: "checkPermission",
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve(false);
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.checkPermission(permission);
    }
  }, {
    key: "check",
    value: function check(permission) {
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve(false);
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.checkPermission(permission);
    }
  }, {
    key: "requestPermission",
    value: function () {
      var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
        console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
        if (Platform.OS !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        var response = yield this.request(permission, rationale);
        return response === this.RESULTS.GRANTED;
      });
      function requestPermission(_x, _x2) {
        return _requestPermission.apply(this, arguments);
      }
      return requestPermission;
    }()
  }, {
    key: "request",
    value: function () {
      var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
        if (Platform.OS !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(this.RESULTS.DENIED);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        if (rationale) {
          var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
          if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
            return new Promise(function (resolve, reject) {
              var options = Object.assign({}, rationale);
              _NativeDialogManagerAndroid.default.showAlert(options, function () {
                return reject(new Error('Error showing rationale'));
              }, function () {
                return resolve(_NativePermissionsAndroid.default.requestPermission(permission));
              });
            });
          }
        }
        return _NativePermissionsAndroid.default.requestPermission(permission);
      });
      function request(_x3, _x4) {
        return _request.apply(this, arguments);
      }
      return request;
    }()
  }, {
    key: "requestMultiple",
    value: function requestMultiple(permissions) {
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve({});
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
    }
  }]);
  return PermissionsAndroid;
}();
var PermissionsAndroidInstance = new PermissionsAndroid();
module.exports = PermissionsAndroidInstance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF0Zm9ybSIsInJlcXVpcmUiLCJQRVJNSVNTSU9OX1JFUVVFU1RfUkVTVUxUIiwiT2JqZWN0IiwiZnJlZXplIiwiR1JBTlRFRCIsIkRFTklFRCIsIk5FVkVSX0FTS19BR0FJTiIsIlBFUk1JU1NJT05TIiwiUkVBRF9DQUxFTkRBUiIsIldSSVRFX0NBTEVOREFSIiwiQ0FNRVJBIiwiUkVBRF9DT05UQUNUUyIsIldSSVRFX0NPTlRBQ1RTIiwiR0VUX0FDQ09VTlRTIiwiQUNDRVNTX0ZJTkVfTE9DQVRJT04iLCJBQ0NFU1NfQ09BUlNFX0xPQ0FUSU9OIiwiQUNDRVNTX0JBQ0tHUk9VTkRfTE9DQVRJT04iLCJSRUNPUkRfQVVESU8iLCJSRUFEX1BIT05FX1NUQVRFIiwiQ0FMTF9QSE9ORSIsIlJFQURfQ0FMTF9MT0ciLCJXUklURV9DQUxMX0xPRyIsIkFERF9WT0lDRU1BSUwiLCJSRUFEX1ZPSUNFTUFJTCIsIldSSVRFX1ZPSUNFTUFJTCIsIlVTRV9TSVAiLCJQUk9DRVNTX09VVEdPSU5HX0NBTExTIiwiQk9EWV9TRU5TT1JTIiwiQk9EWV9TRU5TT1JTX0JBQ0tHUk9VTkQiLCJTRU5EX1NNUyIsIlJFQ0VJVkVfU01TIiwiUkVBRF9TTVMiLCJSRUNFSVZFX1dBUF9QVVNIIiwiUkVDRUlWRV9NTVMiLCJSRUFEX0VYVEVSTkFMX1NUT1JBR0UiLCJSRUFEX01FRElBX0lNQUdFUyIsIlJFQURfTUVESUFfVklERU8iLCJSRUFEX01FRElBX0FVRElPIiwiV1JJVEVfRVhURVJOQUxfU1RPUkFHRSIsIkJMVUVUT09USF9DT05ORUNUIiwiQkxVRVRPT1RIX1NDQU4iLCJCTFVFVE9PVEhfQURWRVJUSVNFIiwiQUNDRVNTX01FRElBX0xPQ0FUSU9OIiwiQUNDRVBUX0hBTkRPVkVSIiwiQUNUSVZJVFlfUkVDT0dOSVRJT04iLCJBTlNXRVJfUEhPTkVfQ0FMTFMiLCJSRUFEX1BIT05FX05VTUJFUlMiLCJVV0JfUkFOR0lORyIsIlBPU1RfTk9USUZJQ0FUSU9OIiwiUE9TVF9OT1RJRklDQVRJT05TIiwiTkVBUkJZX1dJRklfREVWSUNFUyIsIlBlcm1pc3Npb25zQW5kcm9pZCIsIlJFU1VMVFMiLCJwZXJtaXNzaW9uIiwiY29uc29sZSIsIndhcm4iLCJPUyIsIlByb21pc2UiLCJyZXNvbHZlIiwiaW52YXJpYW50IiwiTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkIiwiY2hlY2tQZXJtaXNzaW9uIiwicmF0aW9uYWxlIiwicmVzcG9uc2UiLCJyZXF1ZXN0Iiwic2hvdWxkU2hvd1JhdGlvbmFsZSIsInNob3VsZFNob3dSZXF1ZXN0UGVybWlzc2lvblJhdGlvbmFsZSIsIk5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkIiwicmVqZWN0Iiwib3B0aW9ucyIsInNob3dBbGVydCIsIkVycm9yIiwicmVxdWVzdFBlcm1pc3Npb24iLCJwZXJtaXNzaW9ucyIsInJlcXVlc3RNdWx0aXBsZVBlcm1pc3Npb25zIiwiUGVybWlzc2lvbnNBbmRyb2lkSW5zdGFuY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUGVybWlzc2lvbnNBbmRyb2lkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFBlcm1pc3Npb25TdGF0dXMsXG4gIFBlcm1pc3Npb25UeXBlLFxufSBmcm9tICcuL05hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZCc7XG5cbmltcG9ydCBOYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCBmcm9tICcuLi9OYXRpdmVNb2R1bGVzL3NwZWNzL05hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkJztcbmltcG9ydCBOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQgZnJvbSAnLi9OYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuXG5leHBvcnQgdHlwZSBSYXRpb25hbGUgPSB7XG4gIHRpdGxlOiBzdHJpbmcsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbiAgYnV0dG9uUG9zaXRpdmU/OiBzdHJpbmcsXG4gIGJ1dHRvbk5lZ2F0aXZlPzogc3RyaW5nLFxuICBidXR0b25OZXV0cmFsPzogc3RyaW5nLFxuICAuLi5cbn07XG5cbmNvbnN0IFBFUk1JU1NJT05fUkVRVUVTVF9SRVNVTFQgPSBPYmplY3QuZnJlZXplKHtcbiAgR1JBTlRFRDogJ2dyYW50ZWQnLFxuICBERU5JRUQ6ICdkZW5pZWQnLFxuICBORVZFUl9BU0tfQUdBSU46ICduZXZlcl9hc2tfYWdhaW4nLFxufSk7XG5cbmNvbnN0IFBFUk1JU1NJT05TID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFJFQURfQ0FMRU5EQVI6ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVBRF9DQUxFTkRBUicsXG4gIFdSSVRFX0NBTEVOREFSOiAnYW5kcm9pZC5wZXJtaXNzaW9uLldSSVRFX0NBTEVOREFSJyxcbiAgQ0FNRVJBOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkNBTUVSQScsXG4gIFJFQURfQ09OVEFDVFM6ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVBRF9DT05UQUNUUycsXG4gIFdSSVRFX0NPTlRBQ1RTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLldSSVRFX0NPTlRBQ1RTJyxcbiAgR0VUX0FDQ09VTlRTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkdFVF9BQ0NPVU5UUycsXG4gIEFDQ0VTU19GSU5FX0xPQ0FUSU9OOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkFDQ0VTU19GSU5FX0xPQ0FUSU9OJyxcbiAgQUNDRVNTX0NPQVJTRV9MT0NBVElPTjogJ2FuZHJvaWQucGVybWlzc2lvbi5BQ0NFU1NfQ09BUlNFX0xPQ0FUSU9OJyxcbiAgQUNDRVNTX0JBQ0tHUk9VTkRfTE9DQVRJT046ICdhbmRyb2lkLnBlcm1pc3Npb24uQUNDRVNTX0JBQ0tHUk9VTkRfTE9DQVRJT04nLFxuICBSRUNPUkRfQVVESU86ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVDT1JEX0FVRElPJyxcbiAgUkVBRF9QSE9ORV9TVEFURTogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX1BIT05FX1NUQVRFJyxcbiAgQ0FMTF9QSE9ORTogJ2FuZHJvaWQucGVybWlzc2lvbi5DQUxMX1BIT05FJyxcbiAgUkVBRF9DQUxMX0xPRzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX0NBTExfTE9HJyxcbiAgV1JJVEVfQ0FMTF9MT0c6ICdhbmRyb2lkLnBlcm1pc3Npb24uV1JJVEVfQ0FMTF9MT0cnLFxuICBBRERfVk9JQ0VNQUlMOiAnY29tLmFuZHJvaWQudm9pY2VtYWlsLnBlcm1pc3Npb24uQUREX1ZPSUNFTUFJTCcsXG4gIFJFQURfVk9JQ0VNQUlMOiAnY29tLmFuZHJvaWQudm9pY2VtYWlsLnBlcm1pc3Npb24uUkVBRF9WT0lDRU1BSUwnLFxuICBXUklURV9WT0lDRU1BSUw6ICdjb20uYW5kcm9pZC52b2ljZW1haWwucGVybWlzc2lvbi5XUklURV9WT0lDRU1BSUwnLFxuICBVU0VfU0lQOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlVTRV9TSVAnLFxuICBQUk9DRVNTX09VVEdPSU5HX0NBTExTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlBST0NFU1NfT1VUR09JTkdfQ0FMTFMnLFxuICBCT0RZX1NFTlNPUlM6ICdhbmRyb2lkLnBlcm1pc3Npb24uQk9EWV9TRU5TT1JTJyxcbiAgQk9EWV9TRU5TT1JTX0JBQ0tHUk9VTkQ6ICdhbmRyb2lkLnBlcm1pc3Npb24uQk9EWV9TRU5TT1JTX0JBQ0tHUk9VTkQnLFxuICBTRU5EX1NNUzogJ2FuZHJvaWQucGVybWlzc2lvbi5TRU5EX1NNUycsXG4gIFJFQ0VJVkVfU01TOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQ0VJVkVfU01TJyxcbiAgUkVBRF9TTVM6ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVBRF9TTVMnLFxuICBSRUNFSVZFX1dBUF9QVVNIOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQ0VJVkVfV0FQX1BVU0gnLFxuICBSRUNFSVZFX01NUzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUNFSVZFX01NUycsXG4gIFJFQURfRVhURVJOQUxfU1RPUkFHRTogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX0VYVEVSTkFMX1NUT1JBR0UnLFxuICBSRUFEX01FRElBX0lNQUdFUzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX01FRElBX0lNQUdFUycsXG4gIFJFQURfTUVESUFfVklERU86ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVBRF9NRURJQV9WSURFTycsXG4gIFJFQURfTUVESUFfQVVESU86ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVBRF9NRURJQV9BVURJTycsXG4gIFdSSVRFX0VYVEVSTkFMX1NUT1JBR0U6ICdhbmRyb2lkLnBlcm1pc3Npb24uV1JJVEVfRVhURVJOQUxfU1RPUkFHRScsXG4gIEJMVUVUT09USF9DT05ORUNUOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkJMVUVUT09USF9DT05ORUNUJyxcbiAgQkxVRVRPT1RIX1NDQU46ICdhbmRyb2lkLnBlcm1pc3Npb24uQkxVRVRPT1RIX1NDQU4nLFxuICBCTFVFVE9PVEhfQURWRVJUSVNFOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkJMVUVUT09USF9BRFZFUlRJU0UnLFxuICBBQ0NFU1NfTUVESUFfTE9DQVRJT046ICdhbmRyb2lkLnBlcm1pc3Npb24uQUNDRVNTX01FRElBX0xPQ0FUSU9OJyxcbiAgQUNDRVBUX0hBTkRPVkVSOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkFDQ0VQVF9IQU5ET1ZFUicsXG4gIEFDVElWSVRZX1JFQ09HTklUSU9OOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkFDVElWSVRZX1JFQ09HTklUSU9OJyxcbiAgQU5TV0VSX1BIT05FX0NBTExTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkFOU1dFUl9QSE9ORV9DQUxMUycsXG4gIFJFQURfUEhPTkVfTlVNQkVSUzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX1BIT05FX05VTUJFUlMnLFxuICBVV0JfUkFOR0lORzogJ2FuZHJvaWQucGVybWlzc2lvbi5VV0JfUkFOR0lORycsXG4gIFBPU1RfTk9USUZJQ0FUSU9OOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlBPU1RfTk9USUZJQ0FUSU9OUycsIC8vIFJlbW92ZSBpbiAwLjcyXG4gIFBPU1RfTk9USUZJQ0FUSU9OUzogJ2FuZHJvaWQucGVybWlzc2lvbi5QT1NUX05PVElGSUNBVElPTlMnLFxuICBORUFSQllfV0lGSV9ERVZJQ0VTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLk5FQVJCWV9XSUZJX0RFVklDRVMnLFxufSk7XG5cbi8qKlxuICogYFBlcm1pc3Npb25zQW5kcm9pZGAgcHJvdmlkZXMgYWNjZXNzIHRvIEFuZHJvaWQgTSdzIG5ldyBwZXJtaXNzaW9ucyBtb2RlbC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wZXJtaXNzaW9uc2FuZHJvaWRcbiAqL1xuXG5jbGFzcyBQZXJtaXNzaW9uc0FuZHJvaWQge1xuICBQRVJNSVNTSU9OUzoge3xcbiAgICBBQ0NFUFRfSEFORE9WRVI6IHN0cmluZyxcbiAgICBBQ0NFU1NfQkFDS0dST1VORF9MT0NBVElPTjogc3RyaW5nLFxuICAgIEFDQ0VTU19DT0FSU0VfTE9DQVRJT046IHN0cmluZyxcbiAgICBBQ0NFU1NfRklORV9MT0NBVElPTjogc3RyaW5nLFxuICAgIEFDQ0VTU19NRURJQV9MT0NBVElPTjogc3RyaW5nLFxuICAgIEFDVElWSVRZX1JFQ09HTklUSU9OOiBzdHJpbmcsXG4gICAgQUREX1ZPSUNFTUFJTDogc3RyaW5nLFxuICAgIFJFQURfVk9JQ0VNQUlMOiBzdHJpbmcsXG4gICAgV1JJVEVfVk9JQ0VNQUlMOiBzdHJpbmcsXG4gICAgQU5TV0VSX1BIT05FX0NBTExTOiBzdHJpbmcsXG4gICAgQkxVRVRPT1RIX0FEVkVSVElTRTogc3RyaW5nLFxuICAgIEJMVUVUT09USF9DT05ORUNUOiBzdHJpbmcsXG4gICAgQkxVRVRPT1RIX1NDQU46IHN0cmluZyxcbiAgICBCT0RZX1NFTlNPUlM6IHN0cmluZyxcbiAgICBCT0RZX1NFTlNPUlNfQkFDS0dST1VORDogc3RyaW5nLFxuICAgIENBTExfUEhPTkU6IHN0cmluZyxcbiAgICBDQU1FUkE6IHN0cmluZyxcbiAgICBHRVRfQUNDT1VOVFM6IHN0cmluZyxcbiAgICBORUFSQllfV0lGSV9ERVZJQ0VTOiBzdHJpbmcsXG4gICAgUE9TVF9OT1RJRklDQVRJT046IHN0cmluZywgLy8gUmVtb3ZlIGluIDAuNzJcbiAgICBQT1NUX05PVElGSUNBVElPTlM6IHN0cmluZyxcbiAgICBQUk9DRVNTX09VVEdPSU5HX0NBTExTOiBzdHJpbmcsXG4gICAgUkVBRF9DQUxFTkRBUjogc3RyaW5nLFxuICAgIFJFQURfQ0FMTF9MT0c6IHN0cmluZyxcbiAgICBSRUFEX0NPTlRBQ1RTOiBzdHJpbmcsXG4gICAgUkVBRF9FWFRFUk5BTF9TVE9SQUdFOiBzdHJpbmcsXG4gICAgUkVBRF9NRURJQV9JTUFHRVM6IHN0cmluZyxcbiAgICBSRUFEX01FRElBX1ZJREVPOiBzdHJpbmcsXG4gICAgUkVBRF9NRURJQV9BVURJTzogc3RyaW5nLFxuICAgIFJFQURfUEhPTkVfTlVNQkVSUzogc3RyaW5nLFxuICAgIFJFQURfUEhPTkVfU1RBVEU6IHN0cmluZyxcbiAgICBSRUFEX1NNUzogc3RyaW5nLFxuICAgIFJFQ0VJVkVfTU1TOiBzdHJpbmcsXG4gICAgUkVDRUlWRV9TTVM6IHN0cmluZyxcbiAgICBSRUNFSVZFX1dBUF9QVVNIOiBzdHJpbmcsXG4gICAgUkVDT1JEX0FVRElPOiBzdHJpbmcsXG4gICAgU0VORF9TTVM6IHN0cmluZyxcbiAgICBVU0VfU0lQOiBzdHJpbmcsXG4gICAgVVdCX1JBTkdJTkc6IHN0cmluZyxcbiAgICBXUklURV9DQUxFTkRBUjogc3RyaW5nLFxuICAgIFdSSVRFX0NBTExfTE9HOiBzdHJpbmcsXG4gICAgV1JJVEVfQ09OVEFDVFM6IHN0cmluZyxcbiAgICBXUklURV9FWFRFUk5BTF9TVE9SQUdFOiBzdHJpbmcsXG4gIHx9ID0gUEVSTUlTU0lPTlM7XG4gIFJFU1VMVFM6IHt8XG4gICAgREVOSUVEOiAkVEVNUE9SQVJZJHN0cmluZzwnZGVuaWVkJz4sXG4gICAgR1JBTlRFRDogJFRFTVBPUkFSWSRzdHJpbmc8J2dyYW50ZWQnPixcbiAgICBORVZFUl9BU0tfQUdBSU46ICRURU1QT1JBUlkkc3RyaW5nPCduZXZlcl9hc2tfYWdhaW4nPixcbiAgfH0gPSBQRVJNSVNTSU9OX1JFUVVFU1RfUkVTVUxUO1xuXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEIC0gdXNlIGNoZWNrXG4gICAqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byBhIGJvb2xlYW4gdmFsdWUgYXMgdG8gd2hldGhlciB0aGUgc3BlY2lmaWVkXG4gICAqIHBlcm1pc3Npb25zIGhhcyBiZWVuIGdyYW50ZWRcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGNoZWNrUGVybWlzc2lvbihwZXJtaXNzaW9uOiBQZXJtaXNzaW9uVHlwZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZC5jaGVja1Blcm1pc3Npb25cIiBpcyBkZXByZWNhdGVkLiBVc2UgXCJQZXJtaXNzaW9uc0FuZHJvaWQuY2hlY2tcIiBpbnN0ZWFkJyxcbiAgICApO1xuICAgIGlmIChQbGF0Zm9ybS5PUyAhPT0gJ2FuZHJvaWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZFwiIG1vZHVsZSB3b3JrcyBvbmx5IGZvciBBbmRyb2lkIHBsYXRmb3JtLicsXG4gICAgICApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLFxuICAgICAgJ1Blcm1pc3Npb25zQW5kcm9pZCBpcyBub3QgaW5zdGFsbGVkIGNvcnJlY3RseS4nLFxuICAgICk7XG5cbiAgICByZXR1cm4gTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLmNoZWNrUGVybWlzc2lvbihwZXJtaXNzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgdG8gYSBib29sZWFuIHZhbHVlIGFzIHRvIHdoZXRoZXIgdGhlIHNwZWNpZmllZFxuICAgKiBwZXJtaXNzaW9ucyBoYXMgYmVlbiBncmFudGVkXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3Blcm1pc3Npb25zYW5kcm9pZCNjaGVja1xuICAgKi9cbiAgY2hlY2socGVybWlzc2lvbjogUGVybWlzc2lvblR5cGUpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZCxcbiAgICAgICdQZXJtaXNzaW9uc0FuZHJvaWQgaXMgbm90IGluc3RhbGxlZCBjb3JyZWN0bHkuJyxcbiAgICApO1xuXG4gICAgcmV0dXJuIE5hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZC5jaGVja1Blcm1pc3Npb24ocGVybWlzc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogREVQUkVDQVRFRCAtIHVzZSByZXF1ZXN0XG4gICAqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgdG8gZW5hYmxlIGEgcGVybWlzc2lvbiBhbmQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHRvIGFcbiAgICogYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHVzZXIgYWxsb3dlZCBvciBkZW5pZWQgdGhlIHJlcXVlc3RcbiAgICpcbiAgICogSWYgdGhlIG9wdGlvbmFsIHJhdGlvbmFsZSBhcmd1bWVudCBpcyBpbmNsdWRlZCAod2hpY2ggaXMgYW4gb2JqZWN0IHdpdGggYVxuICAgKiBgdGl0bGVgIGFuZCBgbWVzc2FnZWApLCB0aGlzIGZ1bmN0aW9uIGNoZWNrcyB3aXRoIHRoZSBPUyB3aGV0aGVyIGl0IGlzXG4gICAqIG5lY2Vzc2FyeSB0byBzaG93IGEgZGlhbG9nIGV4cGxhaW5pbmcgd2h5IHRoZSBwZXJtaXNzaW9uIGlzIG5lZWRlZFxuICAgKiAoaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvcGVybWlzc2lvbnMvcmVxdWVzdGluZyNleHBsYWluKVxuICAgKiBhbmQgdGhlbiBzaG93cyB0aGUgc3lzdGVtIHBlcm1pc3Npb24gZGlhbG9nXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0UGVybWlzc2lvbihcbiAgICBwZXJtaXNzaW9uOiBQZXJtaXNzaW9uVHlwZSxcbiAgICByYXRpb25hbGU/OiBSYXRpb25hbGUsXG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZC5yZXF1ZXN0UGVybWlzc2lvblwiIGlzIGRlcHJlY2F0ZWQuIFVzZSBcIlBlcm1pc3Npb25zQW5kcm9pZC5yZXF1ZXN0XCIgaW5zdGVhZCcsXG4gICAgKTtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHBlcm1pc3Npb24sIHJhdGlvbmFsZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlID09PSB0aGlzLlJFU1VMVFMuR1JBTlRFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9tcHRzIHRoZSB1c2VyIHRvIGVuYWJsZSBhIHBlcm1pc3Npb24gYW5kIHJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byBhXG4gICAqIHN0cmluZyB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHVzZXIgYWxsb3dlZCBvciBkZW5pZWQgdGhlIHJlcXVlc3RcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcGVybWlzc2lvbnNhbmRyb2lkI3JlcXVlc3RcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoXG4gICAgcGVybWlzc2lvbjogUGVybWlzc2lvblR5cGUsXG4gICAgcmF0aW9uYWxlPzogUmF0aW9uYWxlLFxuICApOiBQcm9taXNlPFBlcm1pc3Npb25TdGF0dXM+IHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5SRVNVTFRTLkRFTklFRCk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLFxuICAgICAgJ1Blcm1pc3Npb25zQW5kcm9pZCBpcyBub3QgaW5zdGFsbGVkIGNvcnJlY3RseS4nLFxuICAgICk7XG5cbiAgICBpZiAocmF0aW9uYWxlKSB7XG4gICAgICBjb25zdCBzaG91bGRTaG93UmF0aW9uYWxlID1cbiAgICAgICAgYXdhaXQgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLnNob3VsZFNob3dSZXF1ZXN0UGVybWlzc2lvblJhdGlvbmFsZShcbiAgICAgICAgICBwZXJtaXNzaW9uLFxuICAgICAgICApO1xuXG4gICAgICBpZiAoc2hvdWxkU2hvd1JhdGlvbmFsZSAmJiAhIU5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnJhdGlvbmFsZSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkLnNob3dBbGVydChcbiAgICAgICAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWV4YWN0XSAoPj0wLjExMS4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKVxuICAgICAgICAgICAgICogVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjExMSB3YXNcbiAgICAgICAgICAgICAqIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0Vycm9yIHNob3dpbmcgcmF0aW9uYWxlJykpLFxuICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgcmVzb2x2ZShOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQucmVxdWVzdFBlcm1pc3Npb24ocGVybWlzc2lvbikpLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLnJlcXVlc3RQZXJtaXNzaW9uKHBlcm1pc3Npb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgdG8gZW5hYmxlIG11bHRpcGxlIHBlcm1pc3Npb25zIGluIHRoZSBzYW1lIGRpYWxvZyBhbmRcbiAgICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgcGVybWlzc2lvbnMgYXMga2V5cyBhbmQgc3RyaW5ncyBhcyB2YWx1ZXNcbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB1c2VyIGFsbG93ZWQgb3IgZGVuaWVkIHRoZSByZXF1ZXN0XG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3Blcm1pc3Npb25zYW5kcm9pZCNyZXF1ZXN0bXVsdGlwbGVcbiAgICovXG4gIHJlcXVlc3RNdWx0aXBsZShcbiAgICBwZXJtaXNzaW9uczogQXJyYXk8UGVybWlzc2lvblR5cGU+LFxuICApOiBQcm9taXNlPHtbcGVybWlzc2lvbjogUGVybWlzc2lvblR5cGVdOiBQZXJtaXNzaW9uU3RhdHVzLCAuLi59PiB7XG4gICAgaWYgKFBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1wiUGVybWlzc2lvbnNBbmRyb2lkXCIgbW9kdWxlIHdvcmtzIG9ubHkgZm9yIEFuZHJvaWQgcGxhdGZvcm0uJyxcbiAgICAgICk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQsXG4gICAgICAnUGVybWlzc2lvbnNBbmRyb2lkIGlzIG5vdCBpbnN0YWxsZWQgY29ycmVjdGx5LicsXG4gICAgKTtcblxuICAgIHJldHVybiBOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQucmVxdWVzdE11bHRpcGxlUGVybWlzc2lvbnMocGVybWlzc2lvbnMpO1xuICB9XG59XG5cbmNvbnN0IFBlcm1pc3Npb25zQW5kcm9pZEluc3RhbmNlOiBQZXJtaXNzaW9uc0FuZHJvaWQgPSBuZXcgUGVybWlzc2lvbnNBbmRyb2lkKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGVybWlzc2lvbnNBbmRyb2lkSW5zdGFuY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFlQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQVdqRCxJQUFNQyx5QkFBeUIsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUM7RUFDOUNDLE9BQU8sRUFBRSxTQUFTO0VBQ2xCQyxNQUFNLEVBQUUsUUFBUTtFQUNoQkMsZUFBZSxFQUFFO0FBQ25CLENBQUMsQ0FBQztBQUVGLElBQU1DLFdBQVcsR0FBR0wsTUFBTSxDQUFDQyxNQUFNLENBQUM7RUFDaENLLGFBQWEsRUFBRSxrQ0FBa0M7RUFDakRDLGNBQWMsRUFBRSxtQ0FBbUM7RUFDbkRDLE1BQU0sRUFBRSwyQkFBMkI7RUFDbkNDLGFBQWEsRUFBRSxrQ0FBa0M7RUFDakRDLGNBQWMsRUFBRSxtQ0FBbUM7RUFDbkRDLFlBQVksRUFBRSxpQ0FBaUM7RUFDL0NDLG9CQUFvQixFQUFFLHlDQUF5QztFQUMvREMsc0JBQXNCLEVBQUUsMkNBQTJDO0VBQ25FQywwQkFBMEIsRUFBRSwrQ0FBK0M7RUFDM0VDLFlBQVksRUFBRSxpQ0FBaUM7RUFDL0NDLGdCQUFnQixFQUFFLHFDQUFxQztFQUN2REMsVUFBVSxFQUFFLCtCQUErQjtFQUMzQ0MsYUFBYSxFQUFFLGtDQUFrQztFQUNqREMsY0FBYyxFQUFFLG1DQUFtQztFQUNuREMsYUFBYSxFQUFFLGdEQUFnRDtFQUMvREMsY0FBYyxFQUFFLGlEQUFpRDtFQUNqRUMsZUFBZSxFQUFFLGtEQUFrRDtFQUNuRUMsT0FBTyxFQUFFLDRCQUE0QjtFQUNyQ0Msc0JBQXNCLEVBQUUsMkNBQTJDO0VBQ25FQyxZQUFZLEVBQUUsaUNBQWlDO0VBQy9DQyx1QkFBdUIsRUFBRSw0Q0FBNEM7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