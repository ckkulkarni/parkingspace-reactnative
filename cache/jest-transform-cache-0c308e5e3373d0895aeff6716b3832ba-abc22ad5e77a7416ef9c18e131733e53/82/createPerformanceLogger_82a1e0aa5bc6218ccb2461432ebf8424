f61c26f46244010468ea646a782615e0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPerformanceLogger;
exports.getCurrentTimestamp = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _global$nativeQPLTime;
var Systrace = require('../Performance/Systrace');
var infoLog = require('./infoLog');
var _cookies = {};
var PRINT_TO_CONSOLE = false;
var getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : global.performance.now.bind(global.performance);
exports.getCurrentTimestamp = getCurrentTimestamp;
var PerformanceLogger = function () {
  function PerformanceLogger() {
    (0, _classCallCheck2.default)(this, PerformanceLogger);
    this._timespans = {};
    this._extras = {};
    this._points = {};
    this._pointExtras = {};
    this._closed = false;
  }
  (0, _createClass2.default)(PerformanceLogger, [{
    key: "addTimespan",
    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);
        }
        return;
      }
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }
        return;
      }
      this._timespans[key] = {
        startTime: startTime,
        endTime: endTime,
        totalTime: endTime - (startTime || 0),
        startExtras: startExtras,
        endExtras: endExtras
      };
    }
  }, {
    key: "append",
    value: function append(performanceLogger) {
      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);
      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);
      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);
      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);
    }
  }, {
    key: "clear",
    value: function clear() {
      this._timespans = {};
      this._extras = {};
      this._points = {};
      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clear');
      }
    }
  }, {
    key: "clearCompleted",
    value: function clearCompleted() {
      for (var _key in this._timespans) {
        var _this$_timespans$_key;
        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {
          delete this._timespans[_key];
        }
      }
      this._extras = {};
      this._points = {};
      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clearCompleted');
      }
    }
  }, {
    key: "close",
    value: function close() {
      this._closed = true;
    }
  }, {
    key: "currentTimestamp",
    value: function currentTimestamp() {
      return getCurrentTimestamp();
    }
  }, {
    key: "getExtras",
    value: function getExtras() {
      return this._extras;
    }
  }, {
    key: "getPoints",
    value: function getPoints() {
      return this._points;
    }
  }, {
    key: "getPointExtras",
    value: function getPointExtras() {
      return this._pointExtras;
    }
  }, {
    key: "getTimespans",
    value: function getTimespans() {
      return this._timespans;
    }
  }, {
    key: "hasTimespan",
    value: function hasTimespan(key) {
      return !!this._timespans[key];
    }
  }, {
    key: "isClosed",
    value: function isClosed() {
      return this._closed;
    }
  }, {
    key: "logEverything",
    value: function logEverything() {
      if (PRINT_TO_CONSOLE) {
        for (var _key2 in this._timespans) {
          var _this$_timespans$_key2;
          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {
            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');
          }
        }
        infoLog(this._extras);
        for (var _key3 in this._points) {
          if (this._points[_key3] != null) {
            infoLog(_key3 + ': ' + this._points[_key3] + 'ms');
          }
        }
      }
    }
  }, {
    key: "markPoint",
    value: function markPoint(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);
        }
        return;
      }
      if (this._points[key] != null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);
        }
        return;
      }
      this._points[key] = timestamp;
      if (extras) {
        this._pointExtras[key] = extras;
      }
    }
  }, {
    key: "removeExtra",
    value: function removeExtra(key) {
      var value = this._extras[key];
      delete this._extras[key];
      return value;
    }
  }, {
    key: "setExtra",
    value: function setExtra(key, value) {
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);
        }
        return;
      }
      if (this._extras.hasOwnProperty(key)) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: this._extras[key],
            attemptedValue: value
          });
        }
        return;
      }
      this._extras[key] = value;
    }
  }, {
    key: "startTimespan",
    value: function startTimespan(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);
        }
        return;
      }
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }
        return;
      }
      this._timespans[key] = {
        startTime: timestamp,
        startExtras: extras
      };
      _cookies[key] = Systrace.beginAsyncEvent(key);
      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    }
  }, {
    key: "stopTimespan",
    value: function stopTimespan(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);
        }
        return;
      }
      var timespan = this._timespans[key];
      if (!timespan || timespan.startTime == null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }
        return;
      }
      if (timespan.endTime != null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }
        return;
      }
      timespan.endExtras = extras;
      timespan.endTime = timestamp;
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }
      if (_cookies[key] != null) {
        Systrace.endAsyncEvent(key, _cookies[key]);
        delete _cookies[key];
      }
    }
  }]);
  return PerformanceLogger;
}();
function createPerformanceLogger() {
  return new PerformanceLogger();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,