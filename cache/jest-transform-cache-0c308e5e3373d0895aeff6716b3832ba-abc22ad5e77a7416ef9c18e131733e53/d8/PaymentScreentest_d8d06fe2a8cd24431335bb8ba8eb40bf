48c9c1369d0a8c4f0833d230683efc53
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Payment Screen/Deregister Parking', function () {
  it('Shows time spent in parking', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var details = {
      reg: 'ABC123',
      time: new Date().toLocaleTimeString()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: {
          params: {
            details: details
          }
        }
      })),
      getByTestId = _render.getByTestId;
    var timer = new Date();
    timer.setHours(timer.getHours() - 1);
    details.time = timer.toISOString();
    jest.advanceTimersByTime(60 * 60 * 1000);
    var timeSpent = getByTestId('deregester-time-spent');
    console.log(timeSpent);
    yield (0, _reactNative.waitFor)(function () {
      return expect(timeSpent.props.children).toBe('Time Spent: 1 hours 0 minutes');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJ1c2VGYWtlVGltZXJzIiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicmVuZGVyIiwicGFyYW1zIiwiZ2V0QnlUZXN0SWQiLCJ0aW1lciIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJ0b0lTT1N0cmluZyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJ0aW1lU3BlbnQiLCJjb25zb2xlIiwibG9nIiwid2FpdEZvciIsImV4cGVjdCIsInByb3BzIiwiY2hpbGRyZW4iLCJ0b0JlIl0sInNvdXJjZXMiOlsiUGF5bWVudFNjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUGF5bWVudFNjcmVlbiBmcm9tICcuLi9QYXltZW50U2NyZWVuJztcclxuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5kZXNjcmliZSgnUGF5bWVudCBTY3JlZW4vRGVyZWdpc3RlciBQYXJraW5nJywgKCkgPT4ge1xyXG4gIGl0KCdTaG93cyB0aW1lIHNwZW50IGluIHBhcmtpbmcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuICAgIGNvbnN0IGRldGFpbHMgPSB7XHJcbiAgICAgIHJlZzogJ0FCQzEyMycsXHJcbiAgICAgIHRpbWU6IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17e3BhcmFtczoge2RldGFpbHN9fX0gLz4pO1xyXG4gICAgY29uc3QgdGltZXIgPSBuZXcgRGF0ZSgpO1xyXG4gICAgdGltZXIuc2V0SG91cnModGltZXIuZ2V0SG91cnMoKSAtIDEpO1xyXG4gICAgZGV0YWlscy50aW1lID0gdGltZXIudG9JU09TdHJpbmcoKTtcclxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg2MCAqIDYwICogMTAwMCk7XHJcbiAgICBjb25zdCB0aW1lU3BlbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZyh0aW1lU3BlbnQpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gICAgICBleHBlY3QodGltZVNwZW50LnByb3BzLmNoaWxkcmVuKS50b0JlKCdUaW1lIFNwZW50OiAxIGhvdXJzIDAgbWludXRlcycpLFxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBTUEsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQUFBO0FBWkg7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUF1RDtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFRdkQsSUFBTUcsVUFBVSxHQUFHLElBQUFMLHFCQUFhLEdBQWtDO0FBQ2xFTSxRQUFRLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtFQUNsREMsRUFBRSxDQUFDLDZCQUE2QixrQ0FBRSxhQUFZO0lBQzVDTixJQUFJLENBQUNPLGFBQWEsRUFBRTtJQUNwQixJQUFNQyxPQUFPLEdBQUc7TUFDZEMsR0FBRyxFQUFFLFFBQVE7TUFDYkMsSUFBSSxFQUFFLElBQUlDLElBQUksRUFBRSxDQUFDQyxrQkFBa0I7SUFDckMsQ0FBQztJQUNELGNBQXNCLElBQUFDLG1CQUFNLEVBQUMscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUU7VUFBQ0MsTUFBTSxFQUFFO1lBQUNOLE9BQU8sRUFBUEE7VUFBTztRQUFDO01BQUUsRUFBRyxDQUFDO01BQXBFTyxXQUFXLFdBQVhBLFdBQVc7SUFDbEIsSUFBTUMsS0FBSyxHQUFHLElBQUlMLElBQUksRUFBRTtJQUN4QkssS0FBSyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQ0UsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDVixPQUFPLENBQUNFLElBQUksR0FBR00sS0FBSyxDQUFDRyxXQUFXLEVBQUU7SUFDbENuQixJQUFJLENBQUNvQixtQkFBbUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztJQUN4QyxJQUFNQyxTQUFTLEdBQUdOLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQztJQUN0RE8sT0FBTyxDQUFDQyxHQUFHLENBQUNGLFNBQVMsQ0FBQztJQUN0QixNQUFNLElBQUFHLG9CQUFPLEVBQUM7TUFBQSxPQUNaQyxNQUFNLENBQUNKLFNBQVMsQ0FBQ0ssS0FBSyxDQUFDQyxRQUFRLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLCtCQUErQixDQUFDO0lBQUEsRUFDdkU7RUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMifQ==