33578914e124c87e46d576b4fa526374
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  var mockMarkSpaceAsUnoccupied = jest.fn();
  var mockRoute = {
    params: {
      details: {
        reg: 'ABC123',
        time: '2022-02-21T15:00:00.000Z'
      },
      space: 'A1',
      markSpaceAsUnoccupied: mockMarkSpaceAsUnoccupied
    }
  };
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn(function () {
      return Promise.resolve({
        ok: true
      });
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('deregester-payment-button');
    });
    _reactNative.fireEvent.press(getByTestId('deregester-payment-button'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledTimes(1);
    });
    expect(mockMarkSpaceAsUnoccupied).toHaveBeenCalledWith(1);
    expect(getByTestId('alert-message').props.message).toEqual('Payment Sucessful');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIm1vY2tNYXJrU3BhY2VBc1Vub2NjdXBpZWQiLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJkZXRhaWxzIiwicmVnIiwidGltZSIsInNwYWNlIiwibWFya1NwYWNlQXNVbm9jY3VwaWVkIiwiaXQiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsImdsb2JhbCIsImZldGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvayIsIndhaXRGb3IiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibWVzc2FnZSIsInRvRXF1YWwiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXIsIHVzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55O1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5jb25zdCBjYWxjdWxhdGVDaGFyZ2VzTW9jayA9IGplc3QuZm4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBjb25zdCBtb2NrTWFya1NwYWNlQXNVbm9jY3VwaWVkID0gamVzdC5mbigpO1xyXG4gIGNvbnN0IG1vY2tSb3V0ZSA9IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgcmVnOiAnQUJDMTIzJyxcclxuICAgICAgICB0aW1lOiAnMjAyMi0wMi0yMVQxNTowMDowMC4wMDBaJyxcclxuICAgICAgfSxcclxuICAgICAgc3BhY2U6ICdBMScsXHJcbiAgICAgIG1hcmtTcGFjZUFzVW5vY2N1cGllZDogbW9ja01hcmtTcGFjZUFzVW5vY2N1cGllZCxcclxuICAgIH0sXHJcbiAgfTtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT5cclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICBvazogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFBheW1lbnRTY3JlZW4gcm91dGU9e21vY2tSb3V0ZX0gLz4pO1xyXG5cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItcGF5bWVudC1idXR0b24nKSk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItcGF5bWVudC1idXR0b24nKSk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gICAgICBleHBlY3QobW9ja01hcmtTcGFjZUFzVW5vY2N1cGllZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpLFxyXG4gICAgKTtcclxuICAgIGV4cGVjdChtb2NrTWFya1NwYWNlQXNVbm9jY3VwaWVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYWxlcnQtbWVzc2FnZScpLnByb3BzLm1lc3NhZ2UpLnRvRXF1YWwoXHJcbiAgICAgICdQYXltZW50IFN1Y2Vzc2Z1bCcsXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFPQSxjQUFLQSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ25CRyxNQUFNLEVBQUVKLElBQUksQ0FBQ0MsRUFBRTtJQUNqQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDO0FBQUE7QUFkSDtBQUNBO0FBQ0E7QUFDQTtBQUFvRDtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFhcEQsSUFBTUksb0JBQW9CLEdBQUdMLElBQUksQ0FB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