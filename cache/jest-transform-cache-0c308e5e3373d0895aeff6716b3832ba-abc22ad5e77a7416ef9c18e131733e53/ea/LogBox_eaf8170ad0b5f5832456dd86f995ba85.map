{"version":3,"names":["LogBox","__DEV__","LogBoxData","require","parseLogBoxLog","parseInterpolation","originalConsoleError","originalConsoleWarn","consoleErrorImpl","consoleWarnImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","warn","registerError","registerWarning","Platform","isTesting","setDisabled","RCTLog","setWarningHandler","uninstall","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isRCTLogAdviceWarning","args","startsWith","isWarningModuleWarning","isLogBoxErrorMessage","String","category","message","componentStack","isMessageIgnored","content","level","err","reportLogBoxError","format","replace","filterResult","checkWarningFilter","suppressCompletely","suppressDialog_LEGACY","forceDialogImmediately","finalFormat","interpolated","module","exports"],"sources":["LogBox.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IgnorePattern, LogData} from './Data/LogBoxData';\nimport type {ExtendedExceptionData} from './Data/parseLogBoxLog';\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\n\nexport type {LogData, ExtendedExceptionData, IgnorePattern};\n\nlet LogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;\n  ignoreAllLogs(?boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');\n\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl: (...args: Array<mixed>) => void;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        // $FlowExpectedError[cannot-write]\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        // $FlowExpectedError[cannot-write]\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args: Array<mixed>) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args: Array<mixed>) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args: Array<mixed>): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    } else {\n      // Be sure to pass LogBox warnings through.\n      originalConsoleWarn(...args);\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack} = parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError(...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      let level = 'error';\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack} = parseLogBoxLog(args);\n\n      // Interpolate the message so they are formatted for adb and other CLIs.\n      // This is different than the message.content above because it includes component stacks.\n      const interpolated = parseInterpolation(args);\n      originalConsoleError(interpolated.message.content);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {\n      // Do nothing.\n    },\n\n    uninstall(): void {\n      // Do nothing.\n    },\n\n    isInstalled(): boolean {\n      return false;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      // Do nothing.\n    },\n\n    clearAllLogs(): void {\n      // Do nothing.\n    },\n\n    addLog(log: LogData): void {\n      // Do nothing.\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      // Do nothing.\n    },\n  };\n}\n\nmodule.exports = (LogBox: ILogBox);\n"],"mappings":"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"}