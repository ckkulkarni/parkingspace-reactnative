c7ec3bac862d51fcef0d1eff992e26d7
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
var navigation = (0, _native.useNavigation)();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    var markSpaceAsUnoccupiedMock = jest.fn();
    var goBackSpy = jest.spyOn(_native.NavigationContainer.prototype, 'goBack');
    var route = {
      params: {
        details: {
          reg: 'ABC123',
          time: '2022-02-22T10:00:00.000Z'
        },
        space: 1
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        markSpaceAsUnoccupied: markSpaceAsUnoccupiedMock
      })),
      getByTestId = _render3.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(markSpaceAsUnoccupiedMock).toHaveBeenCalled();
      expect(goBackSpy).toHaveBeenCalled();
    });
    goBackSpy.mockRestore();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJuYXZpZ2F0aW9uIiwiZGVzY3JpYmUiLCJpdCIsImRldGFpbHMiLCJyZWciLCJ0aW1lIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwicm91dGUiLCJwYXJhbXMiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsInRpbWVTcGVudEVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJjaGlsZHJlbiIsImV4cGVjdCIsInRvSGF2ZVRleHRDb250ZW50IiwicGFya2luZ0NoYXJnZUVsZW1lbnQiLCJtYXJrU3BhY2VBc1Vub2NjdXBpZWRNb2NrIiwiZ29CYWNrU3B5Iiwic3B5T24iLCJOYXZpZ2F0aW9uQ29udGFpbmVyIiwicHJvdG90eXBlIiwic3BhY2UiLCJnb0JhY2tCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9ja1Jlc3RvcmUiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXIsIHVzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuY29uc3QgY2FsY3VsYXRlQ2hhcmdlc01vY2sgPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2sgPSBqZXN0LmZuKCk7XHJcbiAgICBjb25zdCBnb0JhY2tTcHkgPSBqZXN0LnNweU9uKE5hdmlnYXRpb25Db250YWluZXIucHJvdG90eXBlLCAnZ29CYWNrJyk7XHJcblxyXG4gICAgY29uc3Qgcm91dGUgPSB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgIHJlZzogJ0FCQzEyMycsXHJcbiAgICAgICAgICB0aW1lOiAnMjAyMi0wMi0yMlQxMDowMDowMC4wMDBaJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNwYWNlOiAxLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxyXG4gICAgICA8UGF5bWVudFNjcmVlblxyXG4gICAgICAgIHJvdXRlPXtyb3V0ZX1cclxuICAgICAgICBtYXJrU3BhY2VBc1Vub2NjdXBpZWQ9e21hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2t9XHJcbiAgICAgIC8+LFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBnb0JhY2tCdXR0b24gPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci1iYWNrJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ29CYWNrQnV0dG9uKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KG1hcmtTcGFjZUFzVW5vY2N1cGllZE1vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgZXhwZWN0KGdvQmFja1NweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ29CYWNrU3B5Lm1vY2tSZXN0b3JlKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQU1BLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDbkJHLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFO0lBQ2pCLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQWJIO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBNEU7QUFBQTtFQUFBO0lBQUE7RUFBQTtJQUFBO0VBQUE7RUFBQTtBQUFBO0FBUzVFLElBQU1JLG9CQUFvQixHQUFHTCxJQUFJLENBQUNDLEVBQUUsRUFBRTtBQUN0QyxJQUFNSyxVQUFVLEdBQUcsSUFBQVAscUJBQWEsR0FBa0M7QUFDbEVRLFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0VBQ2xEQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsWUFBTTtJQUNsQyxJQUFNQyxPQUFPLEdBQUc7TUFDZEMsR0FBRyxFQUFFLFFBQVE7TUFDYkMsSUFBSSxFQUFFLElBQUlDLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDQyxXQUFXO0lBQ3pELENBQUM7SUFDRCxJQUFNQyxLQUFLLEdBQUc7TUFBQ0MsTUFBTSxFQUFFO1FBQUNQLE9BQU8sRUFBUEE7TUFBTztJQUFDLENBQUM7SUFDakMsY0FBc0IsSUFBQVEsbUJBQU0sRUFBQyxxQkFBQyxzQkFBYTtRQUFDLEtBQUssRUFBRUY7TUFBTSxFQUFHLENBQUM7TUFBdERHLFdBQVcsV0FBWEEsV0FBVztJQUNsQixJQUFNQyxnQkFBZ0IsR0FBR0QsV0FBVyxDQUFDLHVCQUF1QixDQUFDO0lBQzdERSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRUYsZ0JBQWdCLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BFQyxNQUFNLENBQUNMLGdCQUFnQixDQUFDLENBQUNNLGlCQUFpQixDQUFDLCtCQUErQixDQUFDO0VBQzdFLENBQUMsQ0FBQztFQUNGakIsRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQU07SUFDL0IsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLENBQUNBLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQ0MsV0FBVztJQUN6RCxDQUFDO0lBQ0QsSUFBTUMsS0FBSyxHQUFHO01BQUNDLE1BQU0sRUFBRTtRQUFDUCxPQUFPLEVBQVBBO01BQU87SUFBQyxDQUFDO0lBQ2pDLGVBQXNCLElBQUFRLG1CQUFNLEVBQUMscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUVGO01BQU0sRUFBRyxDQUFDO01BQXRERyxXQUFXLFlBQVhBLFdBQVc7SUFDbEIsSUFBTVEsb0JBQW9CLEdBQUdSLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztJQUM3RE0sTUFBTSxDQUFDRSxvQkFBb0IsQ0FBQyxDQUFDRCxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQztFQUN4RSxDQUFDLENBQUM7RUFDRmpCLEVBQUUsQ0FBQyxtRUFBbUUsa0NBQUUsYUFBWTtJQUNsRixJQUFNbUIseUJBQXlCLEdBQUczQixJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUMzQyxJQUFNMkIsU0FBUyxHQUFHNUIsSUFBSSxDQUFDNkIsS0FBSyxDQUFDQywyQkFBbUIsQ0FBQ0MsU0FBUyxFQUFFLFFBQVEsQ0FBQztJQUVyRSxJQUFNaEIsS0FBSyxHQUFHO01BQ1pDLE1BQU0sRUFBRTtRQUNOUCxPQUFPLEVBQUU7VUFDUEMsR0FBRyxFQUFFLFFBQVE7VUFDYkMsSUFBSSxFQUFFO1FBQ1IsQ0FBQztRQUNEcUIsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFDO0lBRUQsZUFBc0IsSUFBQWYsbUJBQU0sRUFDMUIscUJBQUMsc0JBQWE7UUFDWixLQUFLLEVBQUVGLEtBQU07UUFDYixxQkFBcUIsRUFBRVk7TUFBMEIsRUFDakQsQ0FDSDtNQUxNVCxXQUFXLFlBQVhBLFdBQVc7SUFPbEIsSUFBTWUsWUFBWSxHQUFHZixXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDbkRnQixzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztJQUU3QixNQUFNLElBQUFHLG9CQUFPLEVBQUMsWUFBTTtNQUNsQlosTUFBTSxDQUFDRyx5QkFBeUIsQ0FBQyxDQUFDVSxnQkFBZ0IsRUFBRTtNQUNwRGIsTUFBTSxDQUFDSSxTQUFTLENBQUMsQ0FBQ1MsZ0JBQWdCLEVBQUU7SUFDdEMsQ0FBQyxDQUFDO0lBRUZULFNBQVMsQ0FBQ1UsV0FBVyxFQUFFO0VBQ3pCLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyJ9