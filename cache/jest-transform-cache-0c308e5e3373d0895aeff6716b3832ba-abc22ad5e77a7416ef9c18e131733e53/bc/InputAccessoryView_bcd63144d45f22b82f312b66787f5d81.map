{"version":3,"names":["InputAccessoryView","Platform","OS","React","Children","count","props","children","style","styles","container","nativeID","backgroundColor","console","warn","Component","StyleSheet","create","position","module","exports"],"sources":["InputAccessoryView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport StyleSheet, {\n  type ColorValue,\n  type ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport RCTInputAccessoryViewNativeComponent from './RCTInputAccessoryViewNativeComponent';\nimport * as React from 'react';\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = $ReadOnly<{|\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: ?string,\n  style?: ?ViewStyleProp,\n  backgroundColor?: ?ColorValue,\n|}>;\n\nclass InputAccessoryView extends React.Component<Props> {\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      if (React.Children.count(this.props.children) === 0) {\n        return null;\n      }\n\n      return (\n        <RCTInputAccessoryViewNativeComponent\n          style={[this.props.style, styles.container]}\n          nativeID={this.props.nativeID}\n          backgroundColor={this.props.backgroundColor}>\n          {this.props.children}\n        </RCTInputAccessoryViewNativeComponent>\n      );\n    } else {\n      console.warn('<InputAccessoryView> is only supported on iOS.');\n      return null;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nmodule.exports = InputAccessoryView;\n"],"mappings":";;;;;;AAUA;AAIA;AACA;AACA;AAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,IAuEzBA,kBAAkB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACtB,kBAAqB;MACnB,IAAIC,iBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QACzB,IAAIC,KAAK,CAACC,QAAQ,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACnD,OAAO,IAAI;QACb;QAEA,OACE,qBAAC,6CAAoC;UACnC,KAAK,EAAE,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,EAAEC,MAAM,CAACC,SAAS,CAAE;UAC5C,QAAQ,EAAE,IAAI,CAACJ,KAAK,CAACK,QAAS;UAC9B,eAAe,EAAE,IAAI,CAACL,KAAK,CAACM,eAAgB;UAAA,UAC3C,IAAI,CAACN,KAAK,CAACC;QAAQ,EACiB;MAE3C,CAAC,MAAM;QACLM,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAC;QAC9D,OAAO,IAAI;MACb;IACF;EAAC;EAAA;AAAA,EAnB8BX,KAAK,CAACY,SAAS;AAsBhD,IAAMN,MAAM,GAAGO,mBAAU,CAACC,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGpB,kBAAkB"}