76417983c350d90f861fbc1d94686862
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require("./RCTInputAccessoryViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var InputAccessoryView = function (_React$Component) {
  (0, _inherits2.default)(InputAccessoryView, _React$Component);
  var _super = _createSuper(InputAccessoryView);
  function InputAccessoryView() {
    (0, _classCallCheck2.default)(this, InputAccessoryView);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(InputAccessoryView, [{
    key: "render",
    value: function render() {
      if (_Platform.default.OS === 'ios') {
        if (React.Children.count(this.props.children) === 0) {
          return null;
        }
        return (0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor,
          children: this.props.children
        });
      } else {
        console.warn('<InputAccessoryView> is only supported on iOS.');
        return null;
      }
    }
  }]);
  return InputAccessoryView;
}(React.Component);
var styles = _StyleSheet.default.create({
  container: {
    position: 'absolute'
  }
});
module.exports = InputAccessoryView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnB1dEFjY2Vzc29yeVZpZXciLCJQbGF0Zm9ybSIsIk9TIiwiUmVhY3QiLCJDaGlsZHJlbiIsImNvdW50IiwicHJvcHMiLCJjaGlsZHJlbiIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwibmF0aXZlSUQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb25zb2xlIiwid2FybiIsIkNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJJbnB1dEFjY2Vzc29yeVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFN0eWxlU2hlZXQsIHtcbiAgdHlwZSBDb2xvclZhbHVlLFxuICB0eXBlIFZpZXdTdHlsZVByb3AsXG59IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCBSQ1RJbnB1dEFjY2Vzc29yeVZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9SQ1RJbnB1dEFjY2Vzc29yeVZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIE5vdGU6IGlPUyBvbmx5XG4gKlxuICogQSBjb21wb25lbnQgd2hpY2ggZW5hYmxlcyBjdXN0b21pemF0aW9uIG9mIHRoZSBrZXlib2FyZCBpbnB1dCBhY2Nlc3Nvcnkgdmlldy5cbiAqIFRoZSBpbnB1dCBhY2Nlc3NvcnkgdmlldyBpcyBkaXNwbGF5ZWQgYWJvdmUgdGhlIGtleWJvYXJkIHdoZW5ldmVyIGEgVGV4dElucHV0XG4gKiBoYXMgZm9jdXMuIFRoaXMgY29tcG9uZW50IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBjdXN0b20gdG9vbGJhcnMuXG4gKlxuICogVG8gdXNlIHRoaXMgY29tcG9uZW50IHdyYXAgeW91ciBjdXN0b20gdG9vbGJhciB3aXRoIHRoZVxuICogSW5wdXRBY2Nlc3NvcnlWaWV3IGNvbXBvbmVudCwgYW5kIHNldCBhIG5hdGl2ZUlELiBUaGVuLCBwYXNzIHRoYXQgbmF0aXZlSURcbiAqIGFzIHRoZSBpbnB1dEFjY2Vzc29yeVZpZXdJRCBvZiB3aGF0ZXZlciBUZXh0SW5wdXQgeW91IGRlc2lyZS4gQSBzaW1wbGVcbiAqIGV4YW1wbGU6XG4gKlxuICogYGBgUmVhY3ROYXRpdmVXZWJQbGF5ZXJcbiAqIGltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBBcHBSZWdpc3RyeSwgVGV4dElucHV0LCBJbnB1dEFjY2Vzc29yeVZpZXcsIEJ1dHRvbiB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlbGVzc1RleHRJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gKiAgICAgc3VwZXIocHJvcHMpO1xuICogICAgIHRoaXMuc3RhdGUgPSB7dGV4dDogJ1BsYWNlaG9sZGVyIFRleHQnfTtcbiAqICAgfVxuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIGNvbnN0IGlucHV0QWNjZXNzb3J5Vmlld0lEID0gXCJ1bmlxdWVJRFwiO1xuICogICAgIHJldHVybiAoXG4gKiAgICAgICA8Vmlldz5cbiAqICAgICAgICAgPFNjcm9sbFZpZXcga2V5Ym9hcmREaXNtaXNzTW9kZT1cImludGVyYWN0aXZlXCI+XG4gKiAgICAgICAgICAgPFRleHRJbnB1dFxuICogICAgICAgICAgICAgc3R5bGU9e3tcbiAqICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gKiAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDUwLFxuICogICAgICAgICAgICAgfX1cbiAqICAgICAgICAgICAgIGlucHV0QWNjZXNzb3J5Vmlld0lEPWlucHV0QWNjZXNzb3J5Vmlld0lEXG4gKiAgICAgICAgICAgICBvbkNoYW5nZVRleHQ9e3RleHQgPT4gdGhpcy5zZXRTdGF0ZSh7dGV4dH0pfVxuICogICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGV4dH1cbiAqICAgICAgICAgICAvPlxuICogICAgICAgICA8L1Njcm9sbFZpZXc+XG4gKiAgICAgICAgIDxJbnB1dEFjY2Vzc29yeVZpZXcgbmF0aXZlSUQ9aW5wdXRBY2Nlc3NvcnlWaWV3SUQ+XG4gKiAgICAgICAgICAgPEJ1dHRvblxuICogICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7dGV4dDogJ1BsYWNlaG9sZGVyIFRleHQnfSl9XG4gKiAgICAgICAgICAgICB0aXRsZT1cIlJlc2V0IFRleHRcIlxuICogICAgICAgICAgIC8+XG4gKiAgICAgICAgIDwvSW5wdXRBY2Nlc3NvcnlWaWV3PlxuICogICAgICAgPC9WaWV3PlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiAvLyBza2lwIHRoaXMgbGluZSBpZiB1c2luZyBDcmVhdGUgUmVhY3QgTmF0aXZlIEFwcFxuICogQXBwUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ0F3ZXNvbWVQcm9qZWN0JywgKCkgPT4gVXNlbGVzc1RleHRJbnB1dCk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYWxzbyBiZSB1c2VkIHRvIGNyZWF0ZSBzdGlja3kgdGV4dCBpbnB1dHMgKHRleHQgaW5wdXRzXG4gKiB3aGljaCBhcmUgYW5jaG9yZWQgdG8gdGhlIHRvcCBvZiB0aGUga2V5Ym9hcmQpLiBUbyBkbyB0aGlzLCB3cmFwIGFcbiAqIFRleHRJbnB1dCB3aXRoIHRoZSBJbnB1dEFjY2Vzc29yeVZpZXcgY29tcG9uZW50LCBhbmQgZG9uJ3Qgc2V0IGEgbmF0aXZlSUQuXG4gKiBGb3IgYW4gZXhhbXBsZSwgbG9vayBhdCBJbnB1dEFjY2Vzc29yeVZpZXdFeGFtcGxlLmpzIGluIFJOVGVzdGVyLlxuICovXG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgK2NoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICAvKipcbiAgICogQW4gSUQgd2hpY2ggaXMgdXNlZCB0byBhc3NvY2lhdGUgdGhpcyBgSW5wdXRBY2Nlc3NvcnlWaWV3YCB0b1xuICAgKiBzcGVjaWZpZWQgVGV4dElucHV0KHMpLlxuICAgKi9cbiAgbmF0aXZlSUQ/OiA/c3RyaW5nLFxuICBzdHlsZT86ID9WaWV3U3R5bGVQcm9wLFxuICBiYWNrZ3JvdW5kQ29sb3I/OiA/Q29sb3JWYWx1ZSxcbnx9PjtcblxuY2xhc3MgSW5wdXRBY2Nlc3NvcnlWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSQ1RJbnB1dEFjY2Vzc29yeVZpZXdOYXRpdmVDb21wb25lbnRcbiAgICAgICAgICBzdHlsZT17W3RoaXMucHJvcHMuc3R5bGUsIHN0eWxlcy5jb250YWluZXJdfVxuICAgICAgICAgIG5hdGl2ZUlEPXt0aGlzLnByb3BzLm5hdGl2ZUlEfVxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj17dGhpcy5wcm9wcy5iYWNrZ3JvdW5kQ29sb3J9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICA8L1JDVElucHV0QWNjZXNzb3J5Vmlld05hdGl2ZUNvbXBvbmVudD5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignPElucHV0QWNjZXNzb3J5Vmlldz4gaXMgb25seSBzdXBwb3J0ZWQgb24gaU9TLicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnB1dEFjY2Vzc29yeVZpZXc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBO0FBSUE7QUFDQTtBQUNBO0FBQStCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQXVFekJBLGtCQUFrQjtFQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUE7RUFBQTtFQUFBO0lBQUE7SUFBQSxPQUN0QixrQkFBcUI7TUFDbkIsSUFBSUMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssRUFBRTtRQUN6QixJQUFJQyxLQUFLLENBQUNDLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7VUFDbkQsT0FBTyxJQUFJO1FBQ2I7UUFFQSxPQUNFLHFCQUFDLDZDQUFvQztVQUNuQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUNELEtBQUssQ0FBQ0UsS0FBSyxFQUFFQyxNQUFNLENBQUNDLFNBQVMsQ0FBRTtVQUM1QyxRQUFRLEVBQUUsSUFBSSxDQUFDSixLQUFLLENBQUNLLFFBQVM7VUFDOUIsZUFBZSxFQUFFLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxlQUFnQjtVQUFBLFVBQzNDLElBQUksQ0FBQ04sS0FBSyxDQUFDQztRQUFRLEVBQ2lCO01BRTNDLENBQUMsTUFBTTtRQUNMTSxPQUFPLENBQUNDLElBQUksQ0FBQyxnREFBZ0QsQ0FBQztRQUM5RCxPQUFPLElBQUk7TUFDYjtJQUNGO0VBQUM7RUFBQTtBQUFBLEVBbkI4QlgsS0FBSyxDQUFDWSxTQUFTO0FBc0JoRCxJQUFNTixNQUFNLEdBQUdPLG1CQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQlAsU0FBUyxFQUFFO0lBQ1RRLFFBQVEsRUFBRTtFQUNaO0FBQ0YsQ0FBQyxDQUFDO0FBRUZDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsa0JBQWtCIn0=