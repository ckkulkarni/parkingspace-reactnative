9805c8416f564607cbeb7859185193ce
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _NativePushNotificationManagerIOS = _interopRequireDefault(require("./NativePushNotificationManagerIOS"));
var _invariant = _interopRequireDefault(require("invariant"));
var PushNotificationEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativePushNotificationManagerIOS.default);
var _notifHandlers = new Map();
var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
var PushNotificationIOS = function () {
  function PushNotificationIOS(nativeNotif) {
    var _this = this;
    (0, _classCallCheck2.default)(this, PushNotificationIOS);
    this._data = void 0;
    this._alert = void 0;
    this._sound = void 0;
    this._category = void 0;
    this._contentAvailable = void 0;
    this._badgeCount = void 0;
    this._notificationId = void 0;
    this._isRemote = void 0;
    this._remoteNotificationCompleteCallbackCalled = void 0;
    this._threadID = void 0;
    this._data = {};
    this._remoteNotificationCompleteCallbackCalled = false;
    this._isRemote = nativeNotif.remote;
    if (this._isRemote) {
      this._notificationId = nativeNotif.notificationId;
    }
    if (nativeNotif.remote) {
      Object.keys(nativeNotif).forEach(function (notifKey) {
        var notifVal = nativeNotif[notifKey];
        if (notifKey === 'aps') {
          _this._alert = notifVal.alert;
          _this._sound = notifVal.sound;
          _this._badgeCount = notifVal.badge;
          _this._category = notifVal.category;
          _this._contentAvailable = notifVal['content-available'];
          _this._threadID = notifVal['thread-id'];
        } else {
          _this._data[notifKey] = notifVal;
        }
      });
    } else {
      this._badgeCount = nativeNotif.applicationIconBadgeNumber;
      this._sound = nativeNotif.soundName;
      this._alert = nativeNotif.alertBody;
      this._data = nativeNotif.userInfo;
      this._category = nativeNotif.category;
    }
  }
  (0, _createClass2.default)(PushNotificationIOS, [{
    key: "finish",
    value: function finish(fetchResult) {
      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
        return;
      }
      this._remoteNotificationCompleteCallbackCalled = true;
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
    }
  }, {
    key: "getMessage",
    value: function getMessage() {
      return this._alert;
    }
  }, {
    key: "getSound",
    value: function getSound() {
      return this._sound;
    }
  }, {
    key: "getCategory",
    value: function getCategory() {
      return this._category;
    }
  }, {
    key: "getAlert",
    value: function getAlert() {
      return this._alert;
    }
  }, {
    key: "getContentAvailable",
    value: function getContentAvailable() {
      return this._contentAvailable;
    }
  }, {
    key: "getBadgeCount",
    value: function getBadgeCount() {
      return this._badgeCount;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this._data;
    }
  }, {
    key: "getThreadID",
    value: function getThreadID() {
      return this._threadID;
    }
  }], [{
    key: "presentLocalNotification",
    value: function presentLocalNotification(details) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
    }
  }, {
    key: "scheduleLocalNotification",
    value: function scheduleLocalNotification(details) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
    }
  }, {
    key: "cancelAllLocalNotifications",
    value: function cancelAllLocalNotifications() {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
    }
  }, {
    key: "removeAllDeliveredNotifications",
    value: function removeAllDeliveredNotifications() {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
    }
  }, {
    key: "getDeliveredNotifications",
    value: function getDeliveredNotifications(callback) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
    }
  }, {
    key: "removeDeliveredNotifications",
    value: function removeDeliveredNotifications(identifiers) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
    }
  }, {
    key: "setApplicationIconBadgeNumber",
    value: function setApplicationIconBadgeNumber(number) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
    }
  }, {
    key: "getApplicationIconBadgeNumber",
    value: function getApplicationIconBadgeNumber(callback) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
    }
  }, {
    key: "cancelLocalNotifications",
    value: function cancelLocalNotifications(userInfo) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
    }
  }, {
    key: "getScheduledLocalNotifications",
    value: function getScheduledLocalNotifications(callback) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, handler) {
      (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener;
      if (type === 'notification') {
        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'localNotification') {
        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'register') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
          handler(registrationInfo.deviceToken);
        });
      } else if (type === 'registrationError') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
          handler(errorInfo);
        });
      }
      _notifHandlers.set(type, listener);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, handler) {
      (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener = _notifHandlers.get(type);
      if (!listener) {
        return;
      }
      listener.remove();
      _notifHandlers.delete(type);
    }
  }, {
    key: "requestPermissions",
    value: function requestPermissions(permissions) {
      var requestedPermissions = {
        alert: true,
        badge: true,
        sound: true
      };
      if (permissions) {
        requestedPermissions = {
          alert: !!permissions.alert,
          badge: !!permissions.badge,
          sound: !!permissions.sound
        };
      }
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
    }
  }, {
    key: "abandonPermissions",
    value: function abandonPermissions() {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.abandonPermissions();
    }
  }, {
    key: "checkPermissions",
    value: function checkPermissions(callback) {
      (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.checkPermissions(callback);
    }
  }, {
    key: "getInitialNotification",
    value: function getInitialNotification() {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      return _NativePushNotificationManagerIOS.default.getInitialNotification().then(function (notification) {
        return notification && new PushNotificationIOS(notification);
      });
    }
  }, {
    key: "getAuthorizationStatus",
    value: function getAuthorizationStatus(callback) {
      (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
      _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
    }
  }]);
  return PushNotificationIOS;
}();
PushNotificationIOS.FetchResult = {
  NewData: 'UIBackgroundFetchResultNewData',
  NoData: 'UIBackgroundFetchResultNoData',
  ResultFailed: 'UIBackgroundFetchResultFailed'
};
module.exports = PushNotificationIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQdXNoTm90aWZpY2F0aW9uRW1pdHRlciIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsIlBsYXRmb3JtIiwiT1MiLCJOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyIsIl9ub3RpZkhhbmRsZXJzIiwiTWFwIiwiREVWSUNFX05PVElGX0VWRU5UIiwiTk9USUZfUkVHSVNURVJfRVZFTlQiLCJOT1RJRl9SRUdJU1RSQVRJT05fRVJST1JfRVZFTlQiLCJERVZJQ0VfTE9DQUxfTk9USUZfRVZFTlQiLCJQdXNoTm90aWZpY2F0aW9uSU9TIiwibmF0aXZlTm90aWYiLCJfZGF0YSIsIl9hbGVydCIsIl9zb3VuZCIsIl9jYXRlZ29yeSIsIl9jb250ZW50QXZhaWxhYmxlIiwiX2JhZGdlQ291bnQiLCJfbm90aWZpY2F0aW9uSWQiLCJfaXNSZW1vdGUiLCJfcmVtb3RlTm90aWZpY2F0aW9uQ29tcGxldGVDYWxsYmFja0NhbGxlZCIsIl90aHJlYWRJRCIsInJlbW90ZSIsIm5vdGlmaWNhdGlvbklkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJub3RpZktleSIsIm5vdGlmVmFsIiwiYWxlcnQiLCJzb3VuZCIsImJhZGdlIiwiY2F0ZWdvcnkiLCJhcHBsaWNhdGlvbkljb25CYWRnZU51bWJlciIsInNvdW5kTmFtZSIsImFsZXJ0Qm9keSIsInVzZXJJbmZvIiwiZmV0Y2hSZXN1bHQiLCJpbnZhcmlhbnQiLCJvbkZpbmlzaFJlbW90ZU5vdGlmaWNhdGlvbiIsImRldGFpbHMiLCJwcmVzZW50TG9jYWxOb3RpZmljYXRpb24iLCJzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uIiwiY2FuY2VsQWxsTG9jYWxOb3RpZmljYXRpb25zIiwicmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsImNhbGxiYWNrIiwiZ2V0RGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsImlkZW50aWZpZXJzIiwicmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsIm51bWJlciIsInNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyIiwiZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnMiLCJnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMiLCJ0eXBlIiwiaGFuZGxlciIsImxpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJub3RpZkRhdGEiLCJyZWdpc3RyYXRpb25JbmZvIiwiZGV2aWNlVG9rZW4iLCJlcnJvckluZm8iLCJzZXQiLCJnZXQiLCJyZW1vdmUiLCJkZWxldGUiLCJwZXJtaXNzaW9ucyIsInJlcXVlc3RlZFBlcm1pc3Npb25zIiwicmVxdWVzdFBlcm1pc3Npb25zIiwiYWJhbmRvblBlcm1pc3Npb25zIiwiY2hlY2tQZXJtaXNzaW9ucyIsImdldEluaXRpYWxOb3RpZmljYXRpb24iLCJ0aGVuIiwibm90aWZpY2F0aW9uIiwiZ2V0QXV0aG9yaXphdGlvblN0YXR1cyIsIkZldGNoUmVzdWx0IiwiTmV3RGF0YSIsIk5vRGF0YSIsIlJlc3VsdEZhaWxlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQdXNoTm90aWZpY2F0aW9uSU9TLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtFdmVudFN1YnNjcmlwdGlvbn0gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcblxuaW1wb3J0IE5hdGl2ZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TIGZyb20gJy4vTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG50eXBlIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25JT1NFdmVudERlZmluaXRpb25zID0ge1xuICByZW1vdGVOb3RpZmljYXRpb25SZWNlaXZlZDogW1xuICAgIHtcbiAgICAgIG5vdGlmaWNhdGlvbklkOiBzdHJpbmcsXG4gICAgICByZW1vdGU6IGJvb2xlYW4sXG4gICAgICAuLi5cbiAgICB9LFxuICBdLFxuICByZW1vdGVOb3RpZmljYXRpb25zUmVnaXN0ZXJlZDogW1xuICAgIHtcbiAgICAgIGRldmljZVRva2VuPzogP3N0cmluZyxcbiAgICAgIC4uLlxuICAgIH0sXG4gIF0sXG4gIHJlbW90ZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbkVycm9yOiBbXG4gICAge1xuICAgICAgbWVzc2FnZTogc3RyaW5nLFxuICAgICAgY29kZTogbnVtYmVyLFxuICAgICAgZGV0YWlsczogey4uLn0sXG4gICAgfSxcbiAgXSxcbiAgbG9jYWxOb3RpZmljYXRpb25SZWNlaXZlZDogW3suLi59XSxcbn07XG5cbmNvbnN0IFB1c2hOb3RpZmljYXRpb25FbWl0dGVyID1cbiAgbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcjxOYXRpdmVQdXNoTm90aWZpY2F0aW9uSU9TRXZlbnREZWZpbml0aW9ucz4oXG4gICAgLy8gVDg4NzE1MDYzOiBOYXRpdmVFdmVudEVtaXR0ZXIgb25seSB1c2VkIHRoaXMgcGFyYW1ldGVyIG9uIGlPUy4gTm93IGl0IHVzZXMgaXQgb24gYWxsIHBsYXRmb3Jtcywgc28gdGhpcyBjb2RlIHdhcyBtb2RpZmllZCBhdXRvbWF0aWNhbGx5IHRvIHByZXNlcnZlIGl0cyBiZWhhdmlvclxuICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSB0aGUgbmF0aXZlIG1vZHVsZSBvbiBvdGhlciBwbGF0Zm9ybXMsIHBsZWFzZSByZW1vdmUgdGhpcyBjb25kaXRpb24gYW5kIHRlc3QgaXRzIGJlaGF2aW9yXG4gICAgUGxhdGZvcm0uT1MgIT09ICdpb3MnID8gbnVsbCA6IE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICApO1xuXG5jb25zdCBfbm90aWZIYW5kbGVycyA9IG5ldyBNYXA8c3RyaW5nLCB2b2lkIHwgRXZlbnRTdWJzY3JpcHRpb24+KCk7XG5cbmNvbnN0IERFVklDRV9OT1RJRl9FVkVOVCA9ICdyZW1vdGVOb3RpZmljYXRpb25SZWNlaXZlZCc7XG5jb25zdCBOT1RJRl9SRUdJU1RFUl9FVkVOVCA9ICdyZW1vdGVOb3RpZmljYXRpb25zUmVnaXN0ZXJlZCc7XG5jb25zdCBOT1RJRl9SRUdJU1RSQVRJT05fRVJST1JfRVZFTlQgPSAncmVtb3RlTm90aWZpY2F0aW9uUmVnaXN0cmF0aW9uRXJyb3InO1xuY29uc3QgREVWSUNFX0xPQ0FMX05PVElGX0VWRU5UID0gJ2xvY2FsTm90aWZpY2F0aW9uUmVjZWl2ZWQnO1xuXG5leHBvcnQgdHlwZSBDb250ZW50QXZhaWxhYmxlID0gMSB8IG51bGwgfCB2b2lkO1xuXG5leHBvcnQgdHlwZSBGZXRjaFJlc3VsdCA9IHtcbiAgTmV3RGF0YTogc3RyaW5nLFxuICBOb0RhdGE6IHN0cmluZyxcbiAgUmVzdWx0RmFpbGVkOiBzdHJpbmcsXG4gIC4uLlxufTtcblxuLyoqXG4gKiBBbiBldmVudCBlbWl0dGVkIGJ5IFB1c2hOb3RpZmljYXRpb25JT1MuXG4gKi9cbmV4cG9ydCB0eXBlIFB1c2hOb3RpZmljYXRpb25FdmVudE5hbWUgPSAkS2V5czx7XG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIGEgcmVtb3RlIG5vdGlmaWNhdGlvbiBpcyByZWNlaXZlZC4gVGhlIGhhbmRsZXIgd2lsbCBiZSBpbnZva2VkXG4gICAqIHdpdGggYW4gaW5zdGFuY2Ugb2YgYFB1c2hOb3RpZmljYXRpb25JT1NgLlxuICAgKi9cbiAgbm90aWZpY2F0aW9uOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIGEgbG9jYWwgbm90aWZpY2F0aW9uIGlzIHJlY2VpdmVkLiBUaGUgaGFuZGxlciB3aWxsIGJlIGludm9rZWRcbiAgICogd2l0aCBhbiBpbnN0YW5jZSBvZiBgUHVzaE5vdGlmaWNhdGlvbklPU2AuXG4gICAqL1xuICBsb2NhbE5vdGlmaWNhdGlvbjogc3RyaW5nLFxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgdXNlciByZWdpc3RlcnMgZm9yIHJlbW90ZSBub3RpZmljYXRpb25zLiBUaGUgaGFuZGxlciB3aWxsIGJlXG4gICAqIGludm9rZWQgd2l0aCBhIGhleCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZXZpY2VUb2tlbi5cbiAgICovXG4gIHJlZ2lzdGVyOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGZhaWxzIHRvIHJlZ2lzdGVyIGZvciByZW1vdGUgbm90aWZpY2F0aW9ucy4gVHlwaWNhbGx5XG4gICAqIG9jY3VycyB3aGVuIEFQTlMgaXMgaGF2aW5nIGlzc3Vlcywgb3IgdGhlIGRldmljZSBpcyBhIHNpbXVsYXRvci4gVGhlXG4gICAqIGhhbmRsZXIgd2lsbCBiZSBpbnZva2VkIHdpdGgge21lc3NhZ2U6IHN0cmluZywgY29kZTogbnVtYmVyLCBkZXRhaWxzOiBhbnl9LlxuICAgKi9cbiAgcmVnaXN0cmF0aW9uRXJyb3I6IHN0cmluZyxcbiAgLi4uXG59PjtcblxuLyoqXG4gKlxuICogSGFuZGxlIHB1c2ggbm90aWZpY2F0aW9ucyBmb3IgeW91ciBhcHAsIGluY2x1ZGluZyBwZXJtaXNzaW9uIGhhbmRsaW5nIGFuZFxuICogaWNvbiBiYWRnZSBudW1iZXIuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvc1xuICovXG5jbGFzcyBQdXNoTm90aWZpY2F0aW9uSU9TIHtcbiAgX2RhdGE6IE9iamVjdDtcbiAgX2FsZXJ0OiBzdHJpbmcgfCBPYmplY3Q7XG4gIF9zb3VuZDogc3RyaW5nO1xuICBfY2F0ZWdvcnk6IHN0cmluZztcbiAgX2NvbnRlbnRBdmFpbGFibGU6IENvbnRlbnRBdmFpbGFibGU7XG4gIF9iYWRnZUNvdW50OiBudW1iZXI7XG4gIF9ub3RpZmljYXRpb25JZDogc3RyaW5nO1xuICBfaXNSZW1vdGU6IGJvb2xlYW47XG4gIF9yZW1vdGVOb3RpZmljYXRpb25Db21wbGV0ZUNhbGxiYWNrQ2FsbGVkOiBib29sZWFuO1xuICBfdGhyZWFkSUQ6IHN0cmluZztcblxuICBzdGF0aWMgRmV0Y2hSZXN1bHQ6IEZldGNoUmVzdWx0ID0ge1xuICAgIE5ld0RhdGE6ICdVSUJhY2tncm91bmRGZXRjaFJlc3VsdE5ld0RhdGEnLFxuICAgIE5vRGF0YTogJ1VJQmFja2dyb3VuZEZldGNoUmVzdWx0Tm9EYXRhJyxcbiAgICBSZXN1bHRGYWlsZWQ6ICdVSUJhY2tncm91bmRGZXRjaFJlc3VsdEZhaWxlZCcsXG4gIH07XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlcyB0aGUgbG9jYWxOb3RpZmljYXRpb24gZm9yIGltbWVkaWF0ZSBwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjcHJlc2VudGxvY2Fsbm90aWZpY2F0aW9uXG4gICAqL1xuICBzdGF0aWMgcHJlc2VudExvY2FsTm90aWZpY2F0aW9uKGRldGFpbHM6IE9iamVjdCk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLnByZXNlbnRMb2NhbE5vdGlmaWNhdGlvbihkZXRhaWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXMgdGhlIGxvY2FsTm90aWZpY2F0aW9uIGZvciBmdXR1cmUgcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI3NjaGVkdWxlbG9jYWxub3RpZmljYXRpb25cbiAgICovXG4gIHN0YXRpYyBzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uKGRldGFpbHM6IE9iamVjdCk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLnNjaGVkdWxlTG9jYWxOb3RpZmljYXRpb24oZGV0YWlscyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgc2NoZWR1bGVkIGxvY2FsTm90aWZpY2F0aW9ucy5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNjYW5jZWxhbGxsb2NhbG5vdGlmaWNhdGlvbnNcbiAgICovXG4gIHN0YXRpYyBjYW5jZWxBbGxMb2NhbE5vdGlmaWNhdGlvbnMoKTogdm9pZCB7XG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIgaXMgbm90IGF2YWlsYWJsZS4nLFxuICAgICk7XG4gICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MuY2FuY2VsQWxsTG9jYWxOb3RpZmljYXRpb25zKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBkZWxpdmVyZWQgbm90aWZpY2F0aW9ucyBmcm9tIE5vdGlmaWNhdGlvbiBDZW50ZXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjcmVtb3ZlYWxsZGVsaXZlcmVkbm90aWZpY2F0aW9uc1xuICAgKi9cbiAgc3RhdGljIHJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMoKTogdm9pZCB7XG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIgaXMgbm90IGF2YWlsYWJsZS4nLFxuICAgICk7XG4gICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MucmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9ucygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIHlvdSB3aXRoIGEgbGlzdCBvZiB0aGUgYXBw4oCZcyBub3RpZmljYXRpb25zIHRoYXQgYXJlIHN0aWxsIGRpc3BsYXllZCBpbiBOb3RpZmljYXRpb24gQ2VudGVyLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI2dldGRlbGl2ZXJlZG5vdGlmaWNhdGlvbnNcbiAgICovXG4gIHN0YXRpYyBnZXREZWxpdmVyZWROb3RpZmljYXRpb25zKFxuICAgIGNhbGxiYWNrOiAobm90aWZpY2F0aW9uczogQXJyYXk8T2JqZWN0PikgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIgaXMgbm90IGF2YWlsYWJsZS4nLFxuICAgICk7XG4gICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MuZ2V0RGVsaXZlcmVkTm90aWZpY2F0aW9ucyhjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIG5vdGlmaWNhdGlvbnMgZnJvbSBOb3RpZmljYXRpb24gQ2VudGVyXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjcmVtb3ZlZGVsaXZlcmVkbm90aWZpY2F0aW9uc1xuICAgKi9cbiAgc3RhdGljIHJlbW92ZURlbGl2ZXJlZE5vdGlmaWNhdGlvbnMoaWRlbnRpZmllcnM6IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcbiAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5yZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zKGlkZW50aWZpZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBiYWRnZSBudW1iZXIgZm9yIHRoZSBhcHAgaWNvbiBvbiB0aGUgaG9tZSBzY3JlZW4uXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3Mjc2V0YXBwbGljYXRpb25pY29uYmFkZ2VudW1iZXJcbiAgICovXG4gIHN0YXRpYyBzZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcihudW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLnNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyKG51bWJlcik7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBiYWRnZSBudW1iZXIgZm9yIHRoZSBhcHAgaWNvbiBvbiB0aGUgaG9tZSBzY3JlZW4uXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjZ2V0YXBwbGljYXRpb25pY29uYmFkZ2VudW1iZXJcbiAgICovXG4gIHN0YXRpYyBnZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcihjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcbiAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5nZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcihjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGxvY2FsIG5vdGlmaWNhdGlvbnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjY2FuY2VsbG9jYWxub3RpZmljYXRpb25cbiAgICovXG4gIHN0YXRpYyBjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnModXNlckluZm86IE9iamVjdCk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLmNhbmNlbExvY2FsTm90aWZpY2F0aW9ucyh1c2VySW5mbyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbG9jYWwgbm90aWZpY2F0aW9ucyB0aGF0IGFyZSBjdXJyZW50bHkgc2NoZWR1bGVkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI2dldHNjaGVkdWxlZGxvY2Fsbm90aWZpY2F0aW9uc1xuICAgKi9cbiAgc3RhdGljIGdldFNjaGVkdWxlZExvY2FsTm90aWZpY2F0aW9ucyhjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcbiAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5nZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgbGlzdGVuZXIgdG8gcmVtb3RlIG9yIGxvY2FsIG5vdGlmaWNhdGlvbiBldmVudHMgd2hpbGUgdGhlIGFwcFxuICAgKiBpcyBydW5uaW5nIGluIHRoZSBmb3JlZ3JvdW5kIG9yIHRoZSBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI2FkZGV2ZW50bGlzdGVuZXJcbiAgICovXG4gIHN0YXRpYyBhZGRFdmVudExpc3RlbmVyKFxuICAgIHR5cGU6IFB1c2hOb3RpZmljYXRpb25FdmVudE5hbWUsXG4gICAgaGFuZGxlcjogRnVuY3Rpb24sXG4gICk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGUgPT09ICdub3RpZmljYXRpb24nIHx8XG4gICAgICAgIHR5cGUgPT09ICdyZWdpc3RlcicgfHxcbiAgICAgICAgdHlwZSA9PT0gJ3JlZ2lzdHJhdGlvbkVycm9yJyB8fFxuICAgICAgICB0eXBlID09PSAnbG9jYWxOb3RpZmljYXRpb24nLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25JT1Mgb25seSBzdXBwb3J0cyBgbm90aWZpY2F0aW9uYCwgYHJlZ2lzdGVyYCwgYHJlZ2lzdHJhdGlvbkVycm9yYCwgYW5kIGBsb2NhbE5vdGlmaWNhdGlvbmAgZXZlbnRzJyxcbiAgICApO1xuICAgIGxldCBsaXN0ZW5lcjtcbiAgICBpZiAodHlwZSA9PT0gJ25vdGlmaWNhdGlvbicpIHtcbiAgICAgIGxpc3RlbmVyID0gUHVzaE5vdGlmaWNhdGlvbkVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICAgICAgIERFVklDRV9OT1RJRl9FVkVOVCxcbiAgICAgICAgbm90aWZEYXRhID0+IHtcbiAgICAgICAgICBoYW5kbGVyKG5ldyBQdXNoTm90aWZpY2F0aW9uSU9TKG5vdGlmRGF0YSkpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdsb2NhbE5vdGlmaWNhdGlvbicpIHtcbiAgICAgIGxpc3RlbmVyID0gUHVzaE5vdGlmaWNhdGlvbkVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICAgICAgIERFVklDRV9MT0NBTF9OT1RJRl9FVkVOVCxcbiAgICAgICAgbm90aWZEYXRhID0+IHtcbiAgICAgICAgICBoYW5kbGVyKG5ldyBQdXNoTm90aWZpY2F0aW9uSU9TKG5vdGlmRGF0YSkpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZWdpc3RlcicpIHtcbiAgICAgIGxpc3RlbmVyID0gUHVzaE5vdGlmaWNhdGlvbkVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICAgICAgIE5PVElGX1JFR0lTVEVSX0VWRU5ULFxuICAgICAgICByZWdpc3RyYXRpb25JbmZvID0+IHtcbiAgICAgICAgICBoYW5kbGVyKHJlZ2lzdHJhdGlvbkluZm8uZGV2aWNlVG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZWdpc3RyYXRpb25FcnJvcicpIHtcbiAgICAgIGxpc3RlbmVyID0gUHVzaE5vdGlmaWNhdGlvbkVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICAgICAgIE5PVElGX1JFR0lTVFJBVElPTl9FUlJPUl9FVkVOVCxcbiAgICAgICAgZXJyb3JJbmZvID0+IHtcbiAgICAgICAgICBoYW5kbGVyKGVycm9ySW5mbyk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgICBfbm90aWZIYW5kbGVycy5zZXQodHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVyLiBEbyB0aGlzIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGAgdG8gcHJldmVudFxuICAgKiBtZW1vcnkgbGVha3MuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjcmVtb3ZlZXZlbnRsaXN0ZW5lclxuICAgKi9cbiAgc3RhdGljIHJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgdHlwZTogUHVzaE5vdGlmaWNhdGlvbkV2ZW50TmFtZSxcbiAgICBoYW5kbGVyOiBGdW5jdGlvbixcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZSA9PT0gJ25vdGlmaWNhdGlvbicgfHxcbiAgICAgICAgdHlwZSA9PT0gJ3JlZ2lzdGVyJyB8fFxuICAgICAgICB0eXBlID09PSAncmVnaXN0cmF0aW9uRXJyb3InIHx8XG4gICAgICAgIHR5cGUgPT09ICdsb2NhbE5vdGlmaWNhdGlvbicsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbklPUyBvbmx5IHN1cHBvcnRzIGBub3RpZmljYXRpb25gLCBgcmVnaXN0ZXJgLCBgcmVnaXN0cmF0aW9uRXJyb3JgLCBhbmQgYGxvY2FsTm90aWZpY2F0aW9uYCBldmVudHMnLFxuICAgICk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBfbm90aWZIYW5kbGVycy5nZXQodHlwZSk7XG4gICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaXN0ZW5lci5yZW1vdmUoKTtcbiAgICBfbm90aWZIYW5kbGVycy5kZWxldGUodHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgbm90aWZpY2F0aW9uIHBlcm1pc3Npb25zIGZyb20gaU9TLCBwcm9tcHRpbmcgdGhlIHVzZXInc1xuICAgKiBkaWFsb2cgYm94LiBCeSBkZWZhdWx0LCBpdCB3aWxsIHJlcXVlc3QgYWxsIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9ucywgYnV0XG4gICAqIGEgc3Vic2V0IG9mIHRoZXNlIGNhbiBiZSByZXF1ZXN0ZWQgYnkgcGFzc2luZyBhIG1hcCBvZiByZXF1ZXN0ZWRcbiAgICogcGVybWlzc2lvbnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjcmVxdWVzdHBlcm1pc3Npb25zXG4gICAqL1xuICBzdGF0aWMgcmVxdWVzdFBlcm1pc3Npb25zKHBlcm1pc3Npb25zPzoge1xuICAgIGFsZXJ0PzogYm9vbGVhbixcbiAgICBiYWRnZT86IGJvb2xlYW4sXG4gICAgc291bmQ/OiBib29sZWFuLFxuICAgIC4uLlxuICB9KTogUHJvbWlzZTx7XG4gICAgYWxlcnQ6IGJvb2xlYW4sXG4gICAgYmFkZ2U6IGJvb2xlYW4sXG4gICAgc291bmQ6IGJvb2xlYW4sXG4gICAgLi4uXG4gIH0+IHtcbiAgICBsZXQgcmVxdWVzdGVkUGVybWlzc2lvbnMgPSB7XG4gICAgICBhbGVydDogdHJ1ZSxcbiAgICAgIGJhZGdlOiB0cnVlLFxuICAgICAgc291bmQ6IHRydWUsXG4gICAgfTtcbiAgICBpZiAocGVybWlzc2lvbnMpIHtcbiAgICAgIHJlcXVlc3RlZFBlcm1pc3Npb25zID0ge1xuICAgICAgICBhbGVydDogISFwZXJtaXNzaW9ucy5hbGVydCxcbiAgICAgICAgYmFkZ2U6ICEhcGVybWlzc2lvbnMuYmFkZ2UsXG4gICAgICAgIHNvdW5kOiAhIXBlcm1pc3Npb25zLnNvdW5kLFxuICAgICAgfTtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXJJT1MsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIgaXMgbm90IGF2YWlsYWJsZS4nLFxuICAgICk7XG4gICAgcmV0dXJuIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLnJlcXVlc3RQZXJtaXNzaW9ucyhcbiAgICAgIHJlcXVlc3RlZFBlcm1pc3Npb25zLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBmb3IgYWxsIHJlbW90ZSBub3RpZmljYXRpb25zIHJlY2VpdmVkIHZpYSBBcHBsZSBQdXNoIE5vdGlmaWNhdGlvbiBzZXJ2aWNlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI2FiYW5kb25wZXJtaXNzaW9uc1xuICAgKi9cbiAgc3RhdGljIGFiYW5kb25QZXJtaXNzaW9ucygpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcbiAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5hYmFuZG9uUGVybWlzc2lvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWUgd2hhdCBwdXNoIHBlcm1pc3Npb25zIGFyZSBjdXJyZW50bHkgZW5hYmxlZC4gYGNhbGxiYWNrYCB3aWxsIGJlXG4gICAqIGludm9rZWQgd2l0aCBhIGBwZXJtaXNzaW9uc2Agb2JqZWN0LlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wdXNobm90aWZpY2F0aW9uaW9zI2NoZWNrcGVybWlzc2lvbnNcbiAgICovXG4gIHN0YXRpYyBjaGVja1Blcm1pc3Npb25zKGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIGludmFyaWFudCh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicsICdNdXN0IHByb3ZpZGUgYSB2YWxpZCBjYWxsYmFjaycpO1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLmNoZWNrUGVybWlzc2lvbnMoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gZWl0aGVyIHRoZSBub3RpZmljYXRpb25cbiAgICogb2JqZWN0IGlmIHRoZSBhcHAgd2FzIGxhdW5jaGVkIGJ5IGEgcHVzaCBub3RpZmljYXRpb24sIG9yIGBudWxsYCBvdGhlcndpc2UuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjZ2V0aW5pdGlhbG5vdGlmaWNhdGlvblxuICAgKi9cbiAgc3RhdGljIGdldEluaXRpYWxOb3RpZmljYXRpb24oKTogUHJvbWlzZTw/UHVzaE5vdGlmaWNhdGlvbklPUz4ge1xuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25NYW5hZ2VyIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICApO1xuICAgIHJldHVybiBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5nZXRJbml0aWFsTm90aWZpY2F0aW9uKCkudGhlbihcbiAgICAgIG5vdGlmaWNhdGlvbiA9PiB7XG4gICAgICAgIHJldHVybiBub3RpZmljYXRpb24gJiYgbmV3IFB1c2hOb3RpZmljYXRpb25JT1Mobm90aWZpY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG5vdGlmaWNhdGlvbiBhdXRob3JpemF0aW9uIHN0YXR1cy5cbiAgICovXG4gIHN0YXRpYyBnZXRBdXRob3JpemF0aW9uU3RhdHVzKFxuICAgIGNhbGxiYWNrOiAoYXV0aG9yaXphdGlvblN0YXR1czogbnVtYmVyKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcblxuICAgIE5hdGl2ZVB1c2hOb3RpZmljYXRpb25NYW5hZ2VySU9TLmdldEF1dGhvcml6YXRpb25TdGF0dXMoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSB3aWxsIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgYFB1c2hOb3RpZmljYXRpb25JT1NgIHlvdXJzZWxmLlxuICAgKiBMaXN0ZW5pbmcgdG8gdGhlIGBub3RpZmljYXRpb25gIGV2ZW50IGFuZCBpbnZva2luZ1xuICAgKiBgZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbmAgaXMgc3VmZmljaWVudFxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IobmF0aXZlTm90aWY6IE9iamVjdCkge1xuICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB0aGlzLl9yZW1vdGVOb3RpZmljYXRpb25Db21wbGV0ZUNhbGxiYWNrQ2FsbGVkID0gZmFsc2U7XG4gICAgdGhpcy5faXNSZW1vdGUgPSBuYXRpdmVOb3RpZi5yZW1vdGU7XG4gICAgaWYgKHRoaXMuX2lzUmVtb3RlKSB7XG4gICAgICB0aGlzLl9ub3RpZmljYXRpb25JZCA9IG5hdGl2ZU5vdGlmLm5vdGlmaWNhdGlvbklkO1xuICAgIH1cblxuICAgIGlmIChuYXRpdmVOb3RpZi5yZW1vdGUpIHtcbiAgICAgIC8vIEV4dHJhY3QgZGF0YSBmcm9tIEFwcGxlJ3MgYGFwc2AgZGljdCBhcyBkZWZpbmVkOlxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvaW9zL2RvY3VtZW50YXRpb24vTmV0d29ya2luZ0ludGVybmV0L0NvbmNlcHR1YWwvUmVtb3RlTm90aWZpY2F0aW9uc1BHL0NoYXB0ZXJzL0FwcGxlUHVzaFNlcnZpY2VcbiAgICAgIE9iamVjdC5rZXlzKG5hdGl2ZU5vdGlmKS5mb3JFYWNoKG5vdGlmS2V5ID0+IHtcbiAgICAgICAgY29uc3Qgbm90aWZWYWwgPSBuYXRpdmVOb3RpZltub3RpZktleV07XG4gICAgICAgIGlmIChub3RpZktleSA9PT0gJ2FwcycpIHtcbiAgICAgICAgICB0aGlzLl9hbGVydCA9IG5vdGlmVmFsLmFsZXJ0O1xuICAgICAgICAgIHRoaXMuX3NvdW5kID0gbm90aWZWYWwuc291bmQ7XG4gICAgICAgICAgdGhpcy5fYmFkZ2VDb3VudCA9IG5vdGlmVmFsLmJhZGdlO1xuICAgICAgICAgIHRoaXMuX2NhdGVnb3J5ID0gbm90aWZWYWwuY2F0ZWdvcnk7XG4gICAgICAgICAgdGhpcy5fY29udGVudEF2YWlsYWJsZSA9IG5vdGlmVmFsWydjb250ZW50LWF2YWlsYWJsZSddO1xuICAgICAgICAgIHRoaXMuX3RocmVhZElEID0gbm90aWZWYWxbJ3RocmVhZC1pZCddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RhdGFbbm90aWZLZXldID0gbm90aWZWYWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMb2NhbCBub3RpZmljYXRpb25zIGFyZW4ndCBiZWluZyBzZW50IGRvd24gd2l0aCBgYXBzYCBkaWN0LlxuICAgICAgdGhpcy5fYmFkZ2VDb3VudCA9IG5hdGl2ZU5vdGlmLmFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyO1xuICAgICAgdGhpcy5fc291bmQgPSBuYXRpdmVOb3RpZi5zb3VuZE5hbWU7XG4gICAgICB0aGlzLl9hbGVydCA9IG5hdGl2ZU5vdGlmLmFsZXJ0Qm9keTtcbiAgICAgIHRoaXMuX2RhdGEgPSBuYXRpdmVOb3RpZi51c2VySW5mbztcbiAgICAgIHRoaXMuX2NhdGVnb3J5ID0gbmF0aXZlTm90aWYuY2F0ZWdvcnk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBmb3IgcmVtb3RlIG5vdGlmaWNhdGlvbnMgdGhhdCBoYXZlIGJlZW4gcmVjZWl2ZWQgdmlhOlxuICAgKiBgYXBwbGljYXRpb246ZGlkUmVjZWl2ZVJlbW90ZU5vdGlmaWNhdGlvbjpmZXRjaENvbXBsZXRpb25IYW5kbGVyOmBcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNmaW5pc2hcbiAgICovXG4gIGZpbmlzaChmZXRjaFJlc3VsdDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuX2lzUmVtb3RlIHx8XG4gICAgICAhdGhpcy5fbm90aWZpY2F0aW9uSWQgfHxcbiAgICAgIHRoaXMuX3JlbW90ZU5vdGlmaWNhdGlvbkNvbXBsZXRlQ2FsbGJhY2tDYWxsZWRcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcmVtb3RlTm90aWZpY2F0aW9uQ29tcGxldGVDYWxsYmFja0NhbGxlZCA9IHRydWU7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uTWFuYWdlciBpcyBub3QgYXZhaWxhYmxlLicsXG4gICAgKTtcbiAgICBOYXRpdmVQdXNoTm90aWZpY2F0aW9uTWFuYWdlcklPUy5vbkZpbmlzaFJlbW90ZU5vdGlmaWNhdGlvbihcbiAgICAgIHRoaXMuX25vdGlmaWNhdGlvbklkLFxuICAgICAgZmV0Y2hSZXN1bHQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhbGlhcyBmb3IgYGdldEFsZXJ0YCB0byBnZXQgdGhlIG5vdGlmaWNhdGlvbidzIG1haW4gbWVzc2FnZSBzdHJpbmdcbiAgICovXG4gIGdldE1lc3NhZ2UoKTogP3N0cmluZyB8ID9PYmplY3Qge1xuICAgIC8vIGFsaWFzIGJlY2F1c2UgXCJhbGVydFwiIGlzIGFuIGFtYmlndW91cyBuYW1lXG4gICAgcmV0dXJuIHRoaXMuX2FsZXJ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNvdW5kIHN0cmluZyBmcm9tIHRoZSBgYXBzYCBvYmplY3RcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNnZXRzb3VuZFxuICAgKi9cbiAgZ2V0U291bmQoKTogP3N0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNhdGVnb3J5IHN0cmluZyBmcm9tIHRoZSBgYXBzYCBvYmplY3RcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNnZXRjYXRlZ29yeVxuICAgKi9cbiAgZ2V0Q2F0ZWdvcnkoKTogP3N0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NhdGVnb3J5O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5vdGlmaWNhdGlvbidzIG1haW4gbWVzc2FnZSBmcm9tIHRoZSBgYXBzYCBvYmplY3RcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNnZXRhbGVydFxuICAgKi9cbiAgZ2V0QWxlcnQoKTogP3N0cmluZyB8ID9PYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9hbGVydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjb250ZW50LWF2YWlsYWJsZSBudW1iZXIgZnJvbSB0aGUgYGFwc2Agb2JqZWN0XG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjZ2V0Y29udGVudGF2YWlsYWJsZVxuICAgKi9cbiAgZ2V0Q29udGVudEF2YWlsYWJsZSgpOiBDb250ZW50QXZhaWxhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudEF2YWlsYWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBiYWRnZSBjb3VudCBudW1iZXIgZnJvbSB0aGUgYGFwc2Agb2JqZWN0XG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3B1c2hub3RpZmljYXRpb25pb3MjZ2V0YmFkZ2Vjb3VudFxuICAgKi9cbiAgZ2V0QmFkZ2VDb3VudCgpOiA/bnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYmFkZ2VDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBkYXRhIG9iamVjdCBvbiB0aGUgbm90aWZcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNnZXRkYXRhXG4gICAqL1xuICBnZXREYXRhKCk6ID9PYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRocmVhZCBJRCBvbiB0aGUgbm90aWZcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcHVzaG5vdGlmaWNhdGlvbmlvcyNnZXR0aHJlYWRpZFxuICAgKi9cbiAgZ2V0VGhyZWFkSUQoKTogP3N0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RocmVhZElEO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHVzaE5vdGlmaWNhdGlvbklPUztcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUEwQkEsSUFBTUEsdUJBQXVCLEdBQzNCLElBQUlDLDJCQUFrQixDQUdwQkMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtB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