2810b5566d0a97497d120b2e039b044b
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Payment Screen/Deregister Parking', function () {
  it('Shows time spent in parking', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var details = {
      reg: 'ABC123',
      time: new Date().toLocaleTimeString()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: {
          params: {
            details: details
          }
        }
      })),
      getByTestId = _render.getByTestId;
    var timer = new Date();
    timer.setHours(timer.getHours() - 1);
    details.time = timer.toLocaleTimeString();
    jest.advanceTimersByTime(60 * 60 * 1000);
    var timeSpent = getByTestId('deregester-time-spent');
    console.log(timeSpent.props);
    yield (0, _reactNative.waitFor)(function () {
      return expect(timeSpent.props.children).toBe('Time Spent: 1 hours 0 minutes');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJ1c2VGYWtlVGltZXJzIiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicmVuZGVyIiwicGFyYW1zIiwiZ2V0QnlUZXN0SWQiLCJ0aW1lciIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwidGltZVNwZW50IiwiY29uc29sZSIsImxvZyIsInByb3BzIiwid2FpdEZvciIsImV4cGVjdCIsImNoaWxkcmVuIiwidG9CZSJdLCJzb3VyY2VzIjpbIlBheW1lbnRTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBheW1lbnRTY3JlZW4gZnJvbSAnLi4vUGF5bWVudFNjcmVlbic7XHJcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3QnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnU2hvd3MgdGltZSBzcGVudCBpbiBwYXJraW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFBheW1lbnRTY3JlZW4gcm91dGU9e3twYXJhbXM6IHtkZXRhaWxzfX19IC8+KTtcclxuICAgIGNvbnN0IHRpbWVyID0gbmV3IERhdGUoKTtcclxuICAgIHRpbWVyLnNldEhvdXJzKHRpbWVyLmdldEhvdXJzKCkgLSAxKTtcclxuICAgIGRldGFpbHMudGltZSA9IHRpbWVyLnRvTG9jYWxlVGltZVN0cmluZygpO1xyXG5cclxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg2MCAqIDYwICogMTAwMCk7XHJcbiAgICBjb25zdCB0aW1lU3BlbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZyh0aW1lU3BlbnQucHJvcHMpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gICAgICBleHBlY3QodGltZVNwZW50LnByb3BzLmNoaWxkcmVuKS50b0JlKCdUaW1lIFNwZW50OiAxIGhvdXJzIDAgbWludXRlcycpLFxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBTUEsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQUFBO0FBWkg7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUF1RDtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFRdkQsSUFBTUcsVUFBVSxHQUFHLElBQUFMLHFCQUFhLEdBQWtDO0FBQ2xFTSxRQUFRLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtFQUNsREMsRUFBRSxDQUFDLDZCQUE2QixrQ0FBRSxhQUFZO0lBQzVDTixJQUFJLENBQUNPLGFBQWEsRUFBRTtJQUNwQixJQUFNQyxPQUFPLEdBQUc7TUFDZEMsR0FBRyxFQUFFLFFBQVE7TUFDYkMsSUFBSSxFQUFFLElBQUlDLElBQUksRUFBRSxDQUFDQyxrQkFBa0I7SUFDckMsQ0FBQztJQUNELGNBQXNCLElBQUFDLG1CQUFNLEVBQUMscUJBQUMsc0JBQWE7UUFBQyxLQUFLLEVBQUU7VUFBQ0MsTUFBTSxFQUFFO1lBQUNOLE9BQU8sRUFBUEE7VUFBTztRQUFDO01BQUUsRUFBRyxDQUFDO01BQXBFTyxXQUFXLFdBQVhBLFdBQVc7SUFDbEIsSUFBTUMsS0FBSyxHQUFHLElBQUlMLElBQUksRUFBRTtJQUN4QkssS0FBSyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQ0UsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDVixPQUFPLENBQUNFLElBQUksR0FBR00sS0FBSyxDQUFDSixrQkFBa0IsRUFBRTtJQUV6Q1osSUFBSSxDQUFDbUIsbUJBQW1CLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDeEMsSUFBTUMsU0FBUyxHQUFHTCxXQUFXLENBQUMsdUJBQXVCLENBQUM7SUFDdERNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixTQUFTLENBQUNHLEtBQUssQ0FBQztJQUM1QixNQUFNLElBQUFDLG9CQUFPLEVBQUM7TUFBQSxPQUNaQyxNQUFNLENBQUNMLFNBQVMsQ0FBQ0csS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLCtCQUErQixDQUFDO0lBQUEsRUFDdkU7RUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMifQ==