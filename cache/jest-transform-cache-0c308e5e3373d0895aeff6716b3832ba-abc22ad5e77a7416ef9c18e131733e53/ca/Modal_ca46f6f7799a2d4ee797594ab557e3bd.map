{"version":3,"names":["ScrollView","require","View","AppContainer","I18nManager","RootTagContext","StyleSheet","Platform","React","ModalEventEmitter","OS","NativeModalManager","NativeEventEmitter","uniqueModalIdentifier","confirmProps","props","__DEV__","presentationStyle","transparent","console","warn","Modal","_identifier","_eventSubscription","addListener","event","modalID","onDismiss","remove","visible","containerStyles","backgroundColor","animationType","innerChildren","context","children","hardwareAccelerated","onRequestClose","onShow","statusBarTranslucent","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","testID","container","Component","defaultProps","contextType","side","getConstants","isRTL","create","position","ExportedModal","ModalInjection","unstable_Modal","module","exports"],"sources":["Modal.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport type {RootTag} from '../ReactNative/RootTag';\nimport type {DirectEventHandler} from '../Types/CodegenTypes';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport {VirtualizedListContextResetter} from '../Lists/VirtualizedListContext.js';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport ModalInjection from './ModalInjection';\nimport NativeModalManager from './NativeModalManager';\nimport RCTModalHostView from './RCTModalHostViewNativeComponent';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst View = require('../Components/View/View');\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nconst {RootTagContext} = require('../ReactNative/RootTag');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\n\ntype ModalEventDefinitions = {\n  modalDismissed: [{modalID: number}],\n};\n\nconst ModalEventEmitter =\n  Platform.OS === 'ios' && NativeModalManager != null\n    ? new NativeEventEmitter<ModalEventDefinitions>(\n        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n        // If you want to use the native module on other platforms, please remove this condition and test its behavior\n        Platform.OS !== 'ios' ? null : NativeModalManager,\n      )\n    : null;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://reactnative.dev/docs/modal\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = $ReadOnly<{|\n  orientation: 'portrait' | 'landscape',\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  statusBarTranslucent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * This prop works only on Android.\n   *\n   * See https://reactnative.dev/docs/modal#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n|}>;\n\nfunction confirmProps(props: Props) {\n  if (__DEV__) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent === true\n    ) {\n      console.warn(\n        `Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n}\n\nclass Modal extends React.Component<Props> {\n  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextType: React.Context<RootTag> = RootTagContext;\n\n  _identifier: number;\n  _eventSubscription: ?EventSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    if (__DEV__) {\n      confirmProps(props);\n    }\n    this._identifier = uniqueModalIdentifier++;\n  }\n\n  componentDidMount() {\n    // 'modalDismissed' is for the old renderer in iOS only\n    if (ModalEventEmitter) {\n      this._eventSubscription = ModalEventEmitter.addListener(\n        'modalDismissed',\n        event => {\n          if (event.modalID === this._identifier && this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        },\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._eventSubscription) {\n      this._eventSubscription.remove();\n    }\n  }\n\n  componentDidUpdate() {\n    if (__DEV__) {\n      confirmProps(this.props);\n    }\n  }\n\n  render(): React.Node {\n    if (this.props.visible !== true) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor:\n        this.props.transparent === true ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType || 'none';\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent === true) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        onDismiss={() => {\n          if (this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        }}\n        visible={this.props.visible}\n        statusBarTranslucent={this.props.statusBarTranslucent}\n        identifier={this._identifier}\n        style={styles.modal}\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}\n        testID={this.props.testID}>\n        <VirtualizedListContextResetter>\n          <ScrollView.Context.Provider value={null}>\n            <View\n              style={[styles.container, containerStyles]}\n              collapsable={false}>\n              {innerChildren}\n            </View>\n          </ScrollView.Context.Provider>\n        </VirtualizedListContextResetter>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.111 was deployed. To see\n     * the error, delete this comment and run Flow. */\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nconst ExportedModal: React.AbstractComponent<\n  React.ElementConfig<typeof Modal>,\n> = ModalInjection.unstable_Modal ?? Modal;\n\nmodule.exports = ExportedModal;\n"],"mappings":";;;;;;;AAcA;AACA;AAEA;AACA;AACA;AAAiE;AAAA;AAAA;AAAA;AAEjE,IAAMA,UAAU,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AACjE,IAAMC,IAAI,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAC/C,IAAME,YAAY,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAC3D,IAAMG,WAAW,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AACzD,eAAyBA,OAAO,CAAC,wBAAwB,CAAC;EAAnDI,cAAc,YAAdA,cAAc;AACrB,IAAMC,UAAU,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AACtD,IAAMM,QAAQ,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACjD,IAAMO,KAAK,GAAGP,OAAO,CAAC,OAAO,CAAC;AAM9B,IAAMQ,iBAAiB,GACrBF,QAAQ,CAACG,EAAE,KAAK,KAAK,IAAIC,2BAAkB,IAAI,IAAI,GAC/C,IAAIC,2BAAkB,CAGpBL,QAAQ,CAACG,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGC,2BAAkB,CAClD,GACD,IAAI;AAYV,IAAIE,qBAAqB,GAAG,CAAC;AA4G7B,SAASC,YAAY,CAACC,KAAY,EAAE;EAClC,IAAIC,OAAO,EAAE;IACX,IACED,KAAK,CAACE,iBAAiB,IACvBF,KAAK,CAACE,iBAAiB,KAAK,gBAAgB,IAC5CF,KAAK,CAACG,WAAW,KAAK,IAAI,EAC1B;MACAC,OAAO,CAACC,IAAI,kBACKL,KAAK,CAACE,iBAAiB,oEACvC;IACH;EACF;AACF;AAAC,IAEKI,KAAK;EAAA;EAAA;EAWT,eAAYN,KAAY,EAAE;IAAA;IAAA;IACxB,0BAAMA,KAAK;IAAE,MAJfO,WAAW;IAAA,MACXC,kBAAkB;IAIhB,IAAIP,OAAO,EAAE;MACXF,YAAY,CAACC,KAAK,CAAC;IACrB;IACA,MAAKO,WAAW,GAAGT,qBAAqB,EAAE;IAAC;EAC7C;EAAC;IAAA;IAAA,OAED,6BAAoB;MAAA;MAElB,IAAIJ,iBAAiB,EAAE;QACrB,IAAI,CAACc,kBAAkB,GAAGd,iBAAiB,CAACe,WAAW,CACrD,gBAAgB,EAChB,UAAAC,KAAK,EAAI;UACP,IAAIA,KAAK,CAACC,OAAO,KAAK,MAAI,CAACJ,WAAW,IAAI,MAAI,CAACP,KAAK,CAACY,SAAS,EAAE;YAC9D,MAAI,CAACZ,KAAK,CAACY,SAAS,EAAE;UACxB;QACF,CAAC,CACF;MACH;IACF;EAAC;IAAA;IAAA,OAED,gCAAuB;MACrB,IAAI,IAAI,CAACJ,kBAAkB,EAAE;QAC3B,IAAI,CAACA,kBAAkB,CAACK,MAAM,EAAE;MAClC;IACF;EAAC;IAAA;IAAA,OAED,8BAAqB;MACnB,IAAIZ,OAAO,EAAE;QACXF,YAAY,CAAC,IAAI,CAACC,KAAK,CAAC;MAC1B;IACF;EAAC;IAAA;IAAA,OAED,kBAAqB;MAAA;MACnB,IAAI,IAAI,CAACA,KAAK,CAACc,OAAO,KAAK,IAAI,EAAE;QAC/B,OAAO,IAAI;MACb;MAEA,IAAMC,eAAe,GAAG;QACtBC,eAAe,EACb,IAAI,CAAChB,KAAK,CAACG,WAAW,KAAK,IAAI,GAAG,aAAa,GAAG;MACtD,CAAC;MAED,IAAIc,aAAa,GAAG,IAAI,CAACjB,KAAK,CAACiB,aAAa,IAAI,MAAM;MAEtD,IAAIf,iBAAiB,GAAG,IAAI,CAACF,KAAK,CAACE,iBAAiB;MACpD,IAAI,CAACA,iBAAiB,EAAE;QACtBA,iBAAiB,GAAG,YAAY;QAChC,IAAI,IAAI,CAACF,KAAK,CAACG,WAAW,KAAK,IAAI,EAAE;UACnCD,iBAAiB,GAAG,gBAAgB;QACtC;MACF;MAEA,IAAMgB,aAAa,GAAGjB,OAAO,GAC3B,qBAAC,YAAY;QAAC,OAAO,EAAE,IAAI,CAACkB,OAAQ;QAAA,UAAE,IAAI,CAACnB,KAAK,CAACoB;MAAQ,EAAgB,GAEzE,IAAI,CAACpB,KAAK,CAACoB,QACZ;MAED,OACE,qBAAC,wCAAgB;QACf,aAAa,EAAEH,aAAc;QAC7B,iBAAiB,EAAEf,iBAAkB;QACrC,WAAW,EAAE,IAAI,CAACF,KAAK,CAACG,WAAY;QACpC,mBAAmB,EAAE,IAAI,CAACH,KAAK,CAACqB,mBAAoB;QACpD,cAAc,EAAE,IAAI,CAACrB,KAAK,CAACsB,cAAe;QAC1C,MAAM,EAAE,IAAI,CAACtB,KAAK,CAACuB,MAAO;QAC1B,SAAS,EAAE,qBAAM;UACf,IAAI,MAAI,CAACvB,KAAK,CAACY,SAAS,EAAE;YACxB,MAAI,CAACZ,KAAK,CAACY,SAAS,EAAE;UACxB;QACF,CAAE;QACF,OAAO,EAAE,IAAI,CAACZ,KAAK,CAACc,OAAQ;QAC5B,oBAAoB,EAAE,IAAI,CAACd,KAAK,CAACwB,oBAAqB;QACtD,UAAU,EAAE,IAAI,CAACjB,WAAY;QAC7B,KAAK,EAAEkB,MAAM,CAACC,KAAM;QAEpB,yBAAyB,EAAE,IAAI,CAACC,mBAAoB;QACpD,qBAAqB,EAAE,IAAI,CAAC3B,KAAK,CAAC4B,qBAAsB;QACxD,mBAAmB,EAAE,IAAI,CAAC5B,KAAK,CAAC6B,mBAAoB;QACpD,MAAM,EAAE,IAAI,CAAC7B,KAAK,CAAC8B,MAAO;QAAA,UAC1B,qBAAC,sDAA8B;UAAA,UAC7B,qBAAC,UAAU,CAAC,OAAO,CAAC,QAAQ;YAAC,KAAK,EAAE,IAAK;YAAA,UACvC,qBAAC,IAAI;cACH,KAAK,EAAE,CAACL,MAAM,CAACM,SAAS,EAAEhB,eAAe,CAAE;cAC3C,WAAW,EAAE,KAAM;cAAA,UAClBG;YAAa;UACT;QACqB;MACC,EAChB;IAEvB;EAAC;IAAA;IAAA,OAGD,+BAA+B;MAC7B,OAAO,IAAI;IACb;EAAC;EAAA;AAAA,EA7GiBzB,KAAK,CAACuC,SAAS;AAA7B1B,KAAK,CACF2B,YAAY,GAAuD;EACxEnB,OAAO,EAAE,IAAI;EACbO,mBAAmB,EAAE;AACvB,CAAC;AAJGf,KAAK,CAMF4B,WAAW,GAA2B5C,cAAc;AA0G7D,IAAM6C,IAAI,GAAG9C,WAAW,CAAC+C,YAAY,EAAE,CAACC,KAAK,GAAG,OAAO,GAAG,MAAM;AAChE,IAAMZ,MAAM,GAAGlC,UAAU,CAAC+C,MAAM,CAAC;EAC/BZ,KAAK,EAAE;IACLa,QAAQ,EAAE;EACZ,CAAC;EACDR,SAAS,8DAINI,IAAI,EAAG,CAAC,oDACJ,CAAC,qDACA,CAAC;AAEX,CAAC,CAAC;AAEF,IAAMK,aAEL,4BAAGC,uBAAc,CAACC,cAAc,oCAAIpC,KAAK;AAE1CqC,MAAM,CAACC,OAAO,GAAGJ,aAAa"}