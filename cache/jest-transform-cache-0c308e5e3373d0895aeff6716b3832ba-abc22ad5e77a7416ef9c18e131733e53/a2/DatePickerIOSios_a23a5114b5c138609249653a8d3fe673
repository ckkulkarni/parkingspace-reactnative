2cdc06e621a458f803918404adc3be4e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _View = _interopRequireDefault(require("../View/View"));
var _RCTDatePickerNativeComponent = _interopRequireWildcard(require("./RCTDatePickerNativeComponent"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DatePickerIOS = function (_React$Component) {
  (0, _inherits2.default)(DatePickerIOS, _React$Component);
  var _super = _createSuper(DatePickerIOS);
  function DatePickerIOS() {
    var _this;
    (0, _classCallCheck2.default)(this, DatePickerIOS);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this._picker = null;
    _this._onChange = function (event) {
      var nativeTimeStamp = event.nativeEvent.timestamp;
      _this.props.onDateChange && _this.props.onDateChange(new Date(nativeTimeStamp));
      _this.props.onChange && _this.props.onChange(event);
      _this.forceUpdate();
    };
    return _this;
  }
  (0, _createClass2.default)(DatePickerIOS, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.date) {
        var propsTimeStamp = this.props.date.getTime();
        if (this._picker) {
          _RCTDatePickerNativeComponent.Commands.setNativeDate(this._picker, propsTimeStamp);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props$mode,
        _this2 = this;
      var props = this.props;
      var mode = (_props$mode = props.mode) != null ? _props$mode : 'datetime';
      (0, _invariant.default)(props.date || props.initialDate, 'A selected date or initial date should be specified.');
      return (0, _jsxRuntime.jsx)(_View.default, {
        style: props.style,
        children: (0, _jsxRuntime.jsx)(_RCTDatePickerNativeComponent.default, {
          testID: props.testID,
          ref: function ref(picker) {
            _this2._picker = picker;
          },
          style: getHeight(props.pickerStyle, mode),
          date: props.date ? props.date.getTime() : props.initialDate ? props.initialDate.getTime() : undefined,
          locale: props.locale != null && props.locale !== '' ? props.locale : undefined,
          maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,
          minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,
          mode: mode,
          minuteInterval: props.minuteInterval,
          timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          },
          pickerStyle: props.pickerStyle
        })
      });
    }
  }]);
  return DatePickerIOS;
}(React.Component);
var inlineHeightForDatePicker = 318.5;
var inlineHeightForTimePicker = 49.5;
var compactHeight = 40;
var spinnerHeight = 216;
var styles = _StyleSheet.default.create({
  datePickerIOS: {
    height: spinnerHeight
  },
  datePickerIOSCompact: {
    height: compactHeight
  },
  datePickerIOSInline: {
    height: inlineHeightForDatePicker + inlineHeightForTimePicker * 2
  },
  datePickerIOSInlineDate: {
    height: inlineHeightForDatePicker + inlineHeightForTimePicker
  },
  datePickerIOSInlineTime: {
    height: inlineHeightForTimePicker
  }
});
function getHeight(pickerStyle, mode) {
  if (pickerStyle === 'compact') {
    return styles.datePickerIOSCompact;
  }
  if (pickerStyle === 'inline') {
    switch (mode) {
      case 'date':
        return styles.datePickerIOSInlineDate;
      case 'time':
        return styles.datePickerIOSInlineTime;
      default:
        return styles.datePickerIOSInline;
    }
  }
  return styles.datePickerIOS;
}
module.exports = DatePickerIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,