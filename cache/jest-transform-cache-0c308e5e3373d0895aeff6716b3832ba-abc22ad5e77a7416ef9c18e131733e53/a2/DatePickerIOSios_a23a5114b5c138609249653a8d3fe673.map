{"version":3,"names":["DatePickerIOS","_picker","_onChange","event","nativeTimeStamp","nativeEvent","timestamp","props","onDateChange","Date","onChange","forceUpdate","date","propsTimeStamp","getTime","DatePickerCommands","setNativeDate","mode","invariant","initialDate","style","testID","picker","getHeight","pickerStyle","undefined","locale","maximumDate","minimumDate","minuteInterval","timeZoneOffsetInMinutes","React","Component","inlineHeightForDatePicker","inlineHeightForTimePicker","compactHeight","spinnerHeight","styles","StyleSheet","create","datePickerIOS","height","datePickerIOSCompact","datePickerIOSInline","datePickerIOSInlineDate","datePickerIOSInlineTime","module","exports"],"sources":["DatePickerIOS.ios.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// This is a controlled component version of RCTDatePickerIOS.\n\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {DatePickerIOSType} from './DatePickerIOS.flow';\n\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport View from '../View/View';\nimport RCTDatePickerNativeComponent, {\n  Commands as DatePickerCommands,\n} from './RCTDatePickerNativeComponent';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\ntype Event = SyntheticEvent<\n  $ReadOnly<{|\n    timestamp: number,\n  |}>,\n>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The currently selected date.\n   */\n  date?: ?Date,\n\n  /**\n   * Provides an initial value that will change when the user starts selecting\n   * a date. It is useful for simple use-cases where you do not want to deal\n   * with listening to events and updating the date prop to keep the\n   * controlled state in sync. The controlled state has known bugs which\n   * causes it to go out of sync with native. The initialDate prop is intended\n   * to allow you to have native be source of truth.\n   */\n  initialDate?: ?Date,\n\n  /**\n   * The date picker locale.\n   */\n  locale?: ?string,\n\n  /**\n   * Maximum date.\n   *\n   * Restricts the range of possible date/time values.\n   */\n  maximumDate?: ?Date,\n\n  /**\n   * Minimum date.\n   *\n   * Restricts the range of possible date/time values.\n   */\n  minimumDate?: ?Date,\n\n  /**\n   * The interval at which minutes can be selected.\n   */\n  minuteInterval?: ?(1 | 2 | 3 | 4 | 5 | 6 | 10 | 12 | 15 | 20 | 30),\n\n  /**\n   * The date picker mode.\n   */\n  mode?: ?('date' | 'time' | 'datetime'),\n\n  /**\n   * Date change handler.\n   *\n   * This is called when the user changes the date or time in the UI.\n   * The first and only argument is an Event. For getting the date the picker\n   * was changed to, use onDateChange instead.\n   */\n  onChange?: ?(event: Event) => void,\n\n  /**\n   * Date change handler.\n   *\n   * This is called when the user changes the date or time in the UI.\n   * The first and only argument is a Date object representing the new\n   * date and time.\n   */\n  onDateChange: (date: Date) => void,\n\n  /**\n   * Timezone offset in minutes.\n   *\n   * By default, the date picker will use the device's timezone. With this\n   * parameter, it is possible to force a certain timezone offset. For\n   * instance, to show times in Pacific Standard Time, pass -7 * 60.\n   */\n  timeZoneOffsetInMinutes?: ?number,\n\n  /**\n   * The date picker style\n   * This is only available on devices with iOS 14.0 and later.\n   * 'spinner' is the default style if this prop isn't set.\n   */\n  pickerStyle?: ?('compact' | 'spinner' | 'inline'),\n|}>;\n\n/**\n * Use `DatePickerIOS` to render a date/time picker (selector) on iOS.  This is\n * a controlled component, so you must hook in to the `onDateChange` callback\n * and update the `date` prop in order for the component to update, otherwise\n * the user's change will be reverted immediately to reflect `props.date` as the\n * source of truth.\n */\nclass DatePickerIOS extends React.Component<Props> {\n  _picker: ?React.ElementRef<typeof RCTDatePickerNativeComponent> = null;\n\n  componentDidUpdate() {\n    if (this.props.date) {\n      const propsTimeStamp = this.props.date.getTime();\n      if (this._picker) {\n        DatePickerCommands.setNativeDate(this._picker, propsTimeStamp);\n      }\n    }\n  }\n\n  _onChange = (event: Event) => {\n    const nativeTimeStamp = event.nativeEvent.timestamp;\n    this.props.onDateChange &&\n      this.props.onDateChange(new Date(nativeTimeStamp));\n    this.props.onChange && this.props.onChange(event);\n    this.forceUpdate();\n  };\n\n  render(): React.Node {\n    const props = this.props;\n    const mode = props.mode ?? 'datetime';\n    invariant(\n      props.date || props.initialDate,\n      'A selected date or initial date should be specified.',\n    );\n    return (\n      <View style={props.style}>\n        <RCTDatePickerNativeComponent\n          testID={props.testID}\n          ref={picker => {\n            this._picker = picker;\n          }}\n          style={getHeight(props.pickerStyle, mode)}\n          date={\n            props.date\n              ? props.date.getTime()\n              : props.initialDate\n              ? props.initialDate.getTime()\n              : undefined\n          }\n          locale={\n            props.locale != null && props.locale !== ''\n              ? props.locale\n              : undefined\n          }\n          maximumDate={\n            props.maximumDate ? props.maximumDate.getTime() : undefined\n          }\n          minimumDate={\n            props.minimumDate ? props.minimumDate.getTime() : undefined\n          }\n          mode={mode}\n          minuteInterval={props.minuteInterval}\n          timeZoneOffsetInMinutes={props.timeZoneOffsetInMinutes}\n          onChange={this._onChange}\n          onStartShouldSetResponder={() => true}\n          onResponderTerminationRequest={() => false}\n          pickerStyle={props.pickerStyle}\n        />\n      </View>\n    );\n  }\n}\n\nconst inlineHeightForDatePicker = 318.5;\nconst inlineHeightForTimePicker = 49.5;\nconst compactHeight = 40;\nconst spinnerHeight = 216;\n\nconst styles = StyleSheet.create({\n  datePickerIOS: {\n    height: spinnerHeight,\n  },\n  datePickerIOSCompact: {\n    height: compactHeight,\n  },\n  datePickerIOSInline: {\n    height: inlineHeightForDatePicker + inlineHeightForTimePicker * 2,\n  },\n  datePickerIOSInlineDate: {\n    height: inlineHeightForDatePicker + inlineHeightForTimePicker,\n  },\n  datePickerIOSInlineTime: {\n    height: inlineHeightForTimePicker,\n  },\n});\n\nfunction getHeight(\n  pickerStyle: ?(\n    | 'compact'\n    | 'inline'\n    | 'spinner'\n    | $TEMPORARY$string<'compact'>\n    | $TEMPORARY$string<'inline'>\n    | $TEMPORARY$string<'spinner'>\n  ),\n  mode:\n    | 'date'\n    | 'datetime'\n    | 'time'\n    | $TEMPORARY$string<'date'>\n    | $TEMPORARY$string<'datetime'>\n    | $TEMPORARY$string<'time'>,\n) {\n  if (pickerStyle === 'compact') {\n    return styles.datePickerIOSCompact;\n  }\n  if (pickerStyle === 'inline') {\n    switch (mode) {\n      case 'date':\n        return styles.datePickerIOSInlineDate;\n      case 'time':\n        return styles.datePickerIOSInlineTime;\n      default:\n        return styles.datePickerIOSInline;\n    }\n  }\n  return styles.datePickerIOS;\n}\n\nmodule.exports = (DatePickerIOS: DatePickerIOSType);\n"],"mappings":"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"}