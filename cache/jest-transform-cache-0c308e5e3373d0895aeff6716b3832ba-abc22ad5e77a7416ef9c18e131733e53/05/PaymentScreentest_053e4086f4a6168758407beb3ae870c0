e547b6a597121e7a4c51c136fac12c62
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn(function () {
      return Promise.resolve({
        ok: true
      });
    });
    var markSpaceAsUnoccupied = jest.fn();
    var navigation = {
      goBack: jest.fn()
    };
    var details = {
      reg: 'AB12CDE',
      time: new Date().toISOString()
    };
    var route = {
      params: {
        details: details,
        markSpaceAsUnoccupied: markSpaceAsUnoccupied,
        space: 1,
        spaces: [1, 2, 3]
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render3.getByTestId,
      queryByText = _render3.queryByText;
    var buttonPress = getByTestId('deregester-payment-button');
    console.log(buttonPress.props);
    yield (0, _reactNative.waitFor)(function () {
      return expect(queryByText('Payment Sucessful')).not.toBeNull();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FsY3VsYXRlQ2hhcmdlc01vY2siLCJkZXNjcmliZSIsIml0IiwiZGV0YWlscyIsInJlZyIsInRpbWUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJyb3V0ZSIsInBhcmFtcyIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidGltZVNwZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyIsImNoaWxkcmVuIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJwYXJraW5nQ2hhcmdlRWxlbWVudCIsImdsb2JhbCIsImZldGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvayIsIm1hcmtTcGFjZUFzVW5vY2N1cGllZCIsIm5hdmlnYXRpb24iLCJzcGFjZSIsInNwYWNlcyIsInF1ZXJ5QnlUZXh0IiwiYnV0dG9uUHJlc3MiLCJ3YWl0Rm9yIiwibm90IiwidG9CZU51bGwiXSwic291cmNlcyI6WyJQYXltZW50U2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gJy4uL1BheW1lbnRTY3JlZW4nO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXIsIHVzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55O1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5jb25zdCBjYWxjdWxhdGVDaGFyZ2VzTW9jayA9IGplc3QuZm4oKTtcclxuZGVzY3JpYmUoJ1BheW1lbnQgU2NyZWVuL0RlcmVnaXN0ZXIgUGFya2luZycsICgpID0+IHtcclxuICBpdCgnRGlzcGxheXMgdGhlIHRpbWUgc3BlbnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHRpbWVTcGVudEVsZW1lbnQgPSBnZXRCeVRlc3RJZCgnZGVyZWdlc3Rlci10aW1lLXNwZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNwZW50RWxlbWVudDonLCB0aW1lU3BlbnRFbGVtZW50LnByb3BzLmNoaWxkcmVuWzFdKTtcclxuICAgIGV4cGVjdCh0aW1lU3BlbnRFbGVtZW50KS50b0hhdmVUZXh0Q29udGVudCgnVGltZSBTcGVudDogMSBob3VycyAwIG1pbnV0ZXMnKTtcclxuICB9KTtcclxuICBpdCgnU2hvd3MgcGFya2luZyBjaGFyZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQkMxMjMnLFxyXG4gICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSB7cGFyYW1zOiB7ZGV0YWlsc319O1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8UGF5bWVudFNjcmVlbiByb3V0ZT17cm91dGV9IC8+KTtcclxuICAgIGNvbnN0IHBhcmtpbmdDaGFyZ2VFbGVtZW50ID0gZ2V0QnlUZXN0SWQoJ2RlcmVnZXN0ZXItY2hhcmdlJyk7XHJcbiAgICBleHBlY3QocGFya2luZ0NoYXJnZUVsZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdQYXJraW5nIENoYXJnZXM6ICQxMCcpO1xyXG4gIH0pO1xyXG4gIGl0KCdjYWxscyBtYXJrU3BhY2VBc1Vub2NjdXBpZWQgYW5kIG5hdmlnYXRlcyBiYWNrIHRvIHByZXZpb3VzIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT5cclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICBvazogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgY29uc3QgbWFya1NwYWNlQXNVbm9jY3VwaWVkID0gamVzdC5mbigpO1xyXG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IHtnb0JhY2s6IGplc3QuZm4oKX07XHJcbiAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICByZWc6ICdBQjEyQ0RFJyxcclxuICAgICAgdGltZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJvdXRlID0ge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBkZXRhaWxzLFxyXG4gICAgICAgIG1hcmtTcGFjZUFzVW5vY2N1cGllZCxcclxuICAgICAgICBzcGFjZTogMSxcclxuICAgICAgICBzcGFjZXM6IFsxLCAyLCAzXSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0fSA9IHJlbmRlcihcclxuICAgICAgPFBheW1lbnRTY3JlZW4gcm91dGU9e3JvdXRlfSBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9ufSAvPixcclxuICAgICk7XHJcbiAgICBjb25zdCBidXR0b25QcmVzcyA9IGdldEJ5VGVzdElkKCdkZXJlZ2VzdGVyLXBheW1lbnQtYnV0dG9uJyk7XHJcbiAgICBjb25zb2xlLmxvZyhidXR0b25QcmVzcy5wcm9wcyk7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+XHJcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnUGF5bWVudCBTdWNlc3NmdWwnKSkubm90LnRvQmVOdWxsKCksXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFPQSxjQUFLQSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ25CRyxNQUFNLEVBQUVKLElBQUksQ0FBQ0MsRUFBRTtJQUNqQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDO0FBQUE7QUFkSDtBQUNBO0FBQ0E7QUFDQTtBQUFvRDtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFhcEQsSUFBTUksb0JBQW9CLEdBQUdMLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0FBQ3RDSyxRQUFRLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtFQUNsREMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQU07SUFDbEMsSUFBTUMsT0FBTyxHQUFHO01BQ2RDLEdBQUcsRUFBRSxRQUFRO01BQ2JDLElBQUksRUFBRSxJQUFJQyxJQUFJLENB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