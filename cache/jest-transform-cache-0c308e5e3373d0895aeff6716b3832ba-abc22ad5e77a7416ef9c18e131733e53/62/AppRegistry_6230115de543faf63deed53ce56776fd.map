{"version":3,"names":["runnables","runCount","sections","taskProviders","Map","taskCancelProviders","componentProviderInstrumentationHook","component","wrapperComponentProvider","showArchitectureIndicator","AppRegistry","setWrapperComponentProvider","provider","enableArchitectureIndicator","enabled","registerConfig","config","forEach","appConfig","run","registerRunnable","appKey","invariant","registerComponent","section","componentProvider","scopedPerformanceLogger","createPerformanceLogger","appParameters","displayMode","concurrentRootEnabled","initialProps","concurrentRoot","renderApplication","rootTag","fabric","coerceDisplayMode","registerSection","getAppKeys","Object","keys","getSectionKeys","getSections","getRunnable","getRegistry","setComponentProviderInstrumentationHook","hook","runApplication","logParams","__DEV__","JSON","stringify","msg","infoLog","BugReporting","addSource","SceneTracker","setActiveScene","name","setSurfaceProps","unmountApplicationComponentAtRootTag","unmountComponentAtNodeAndRemoveContainer","registerHeadlessTask","taskKey","taskProvider","registerCancellableHeadlessTask","taskCancelProvider","has","console","warn","set","startHeadlessTask","taskId","data","get","NativeHeadlessJsTaskSupport","notifyTaskFinished","then","catch","reason","error","HeadlessJsTaskError","notifyTaskRetry","retryPosted","cancelHeadlessTask","Error","global","RN$Bridgeless","BatchedBridge","registerCallableModule","LogBoxInspector","require","default","NoOp","module","exports"],"sources":["AppRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {RootTag} from '../Types/RootTagTypes';\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\n\nimport BatchedBridge from '../BatchedBridge/BatchedBridge';\nimport BugReporting from '../BugReporting/BugReporting';\nimport createPerformanceLogger from '../Utilities/createPerformanceLogger';\nimport infoLog from '../Utilities/infoLog';\nimport SceneTracker from '../Utilities/SceneTracker';\nimport {coerceDisplayMode} from './DisplayMode';\nimport HeadlessJsTaskError from './HeadlessJsTaskError';\nimport NativeHeadlessJsTaskSupport from './NativeHeadlessJsTaskSupport';\nimport renderApplication from './renderApplication';\nimport {unmountComponentAtNodeAndRemoveContainer} from './RendererProxy';\nimport invariant from 'invariant';\n\ntype Task = (taskData: any) => Promise<void>;\nexport type TaskProvider = () => Task;\ntype TaskCanceller = () => void;\ntype TaskCancelProvider = () => TaskCanceller;\n\nexport type ComponentProvider = () => React$ComponentType<any>;\nexport type ComponentProviderInstrumentationHook = (\n  component: ComponentProvider,\n  scopedPerformanceLogger: IPerformanceLogger,\n) => React$ComponentType<any>;\nexport type AppConfig = {\n  appKey: string,\n  component?: ComponentProvider,\n  run?: Function,\n  section?: boolean,\n  ...\n};\nexport type Runnable = {\n  component?: ComponentProvider,\n  run: Function,\n  ...\n};\nexport type Runnables = {[appKey: string]: Runnable, ...};\nexport type Registry = {\n  sections: Array<string>,\n  runnables: Runnables,\n  ...\n};\nexport type WrapperComponentProvider = (\n  appParameters: any,\n) => React$ComponentType<any>;\n\nconst runnables: Runnables = {};\nlet runCount = 1;\nconst sections: Runnables = {};\nconst taskProviders: Map<string, TaskProvider> = new Map();\nconst taskCancelProviders: Map<string, TaskCancelProvider> = new Map();\nlet componentProviderInstrumentationHook: ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => component();\n\nlet wrapperComponentProvider: ?WrapperComponentProvider;\nlet showArchitectureIndicator = false;\n\n/**\n * `AppRegistry` is the JavaScript entry point to running all React Native apps.\n *\n * See https://reactnative.dev/docs/appregistry\n */\nconst AppRegistry = {\n  setWrapperComponentProvider(provider: WrapperComponentProvider) {\n    wrapperComponentProvider = provider;\n  },\n\n  enableArchitectureIndicator(enabled: boolean): void {\n    showArchitectureIndicator = enabled;\n  },\n\n  registerConfig(config: Array<AppConfig>): void {\n    config.forEach(appConfig => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(\n          appConfig.component != null,\n          'AppRegistry.registerConfig(...): Every config is expected to set ' +\n            'either `run` or `component`, but `%s` has neither.',\n          appConfig.appKey,\n        );\n        AppRegistry.registerComponent(\n          appConfig.appKey,\n          appConfig.component,\n          appConfig.section,\n        );\n      }\n    });\n  },\n\n  /**\n   * Registers an app's root component.\n   *\n   * See https://reactnative.dev/docs/appregistry#registercomponent\n   */\n  registerComponent(\n    appKey: string,\n    componentProvider: ComponentProvider,\n    section?: boolean,\n  ): string {\n    let scopedPerformanceLogger = createPerformanceLogger();\n    runnables[appKey] = {\n      componentProvider,\n      run: (appParameters, displayMode) => {\n        const concurrentRootEnabled =\n          appParameters.initialProps?.concurrentRoot ||\n          appParameters.concurrentRoot;\n        renderApplication(\n          componentProviderInstrumentationHook(\n            componentProvider,\n            scopedPerformanceLogger,\n          ),\n          appParameters.initialProps,\n          appParameters.rootTag,\n          wrapperComponentProvider && wrapperComponentProvider(appParameters),\n          appParameters.fabric,\n          showArchitectureIndicator,\n          scopedPerformanceLogger,\n          appKey === 'LogBox',\n          appKey,\n          coerceDisplayMode(displayMode),\n          concurrentRootEnabled,\n        );\n      },\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n\n  registerRunnable(appKey: string, run: Function): string {\n    runnables[appKey] = {run};\n    return appKey;\n  },\n\n  registerSection(appKey: string, component: ComponentProvider): void {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n\n  getAppKeys(): Array<string> {\n    return Object.keys(runnables);\n  },\n\n  getSectionKeys(): Array<string> {\n    return Object.keys(sections);\n  },\n\n  getSections(): Runnables {\n    return {\n      ...sections,\n    };\n  },\n\n  getRunnable(appKey: string): ?Runnable {\n    return runnables[appKey];\n  },\n\n  getRegistry(): Registry {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: {...runnables},\n    };\n  },\n\n  setComponentProviderInstrumentationHook(\n    hook: ComponentProviderInstrumentationHook,\n  ) {\n    componentProviderInstrumentationHook = hook;\n  },\n\n  /**\n   * Loads the JavaScript bundle and runs the app.\n   *\n   * See https://reactnative.dev/docs/appregistry#runapplication\n   */\n  runApplication(\n    appKey: string,\n    appParameters: any,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const logParams = __DEV__\n        ? '\" with ' + JSON.stringify(appParameters)\n        : '';\n      const msg = 'Running \"' + appKey + logParams;\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.runApplication' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    SceneTracker.setActiveScene({name: appKey});\n    runnables[appKey].run(appParameters, displayMode);\n  },\n\n  /**\n   * Update initial props for a surface that's already rendered\n   */\n  setSurfaceProps(\n    appKey: string,\n    appParameters: any,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const msg =\n        'Updating props for Surface \"' +\n        appKey +\n        '\" with ' +\n        JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.setSurfaceProps' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    runnables[appKey].run(appParameters, displayMode);\n  },\n\n  /**\n   * Stops an application when a view should be destroyed.\n   *\n   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag\n   */\n  unmountApplicationComponentAtRootTag(rootTag: RootTag): void {\n    unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n\n  /**\n   * Register a headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry#registerheadlesstask\n   */\n  registerHeadlessTask(taskKey: string, taskProvider: TaskProvider): void {\n    // $FlowFixMe[object-this-reference]\n    this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {\n      /* Cancel is no-op */\n    });\n  },\n\n  /**\n   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask\n   */\n  registerCancellableHeadlessTask(\n    taskKey: string,\n    taskProvider: TaskProvider,\n    taskCancelProvider: TaskCancelProvider,\n  ): void {\n    if (taskProviders.has(taskKey)) {\n      console.warn(\n        `registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`,\n      );\n    }\n    taskProviders.set(taskKey, taskProvider);\n    taskCancelProviders.set(taskKey, taskCancelProvider);\n  },\n\n  /**\n   * Only called from native code. Starts a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry#startheadlesstask\n   */\n  startHeadlessTask(taskId: number, taskKey: string, data: any): void {\n    const taskProvider = taskProviders.get(taskKey);\n    if (!taskProvider) {\n      console.warn(`No task registered for key ${taskKey}`);\n      if (NativeHeadlessJsTaskSupport) {\n        NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      }\n      return;\n    }\n    taskProvider()(data)\n      .then(() => {\n        if (NativeHeadlessJsTaskSupport) {\n          NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n        }\n      })\n      .catch(reason => {\n        console.error(reason);\n\n        if (\n          NativeHeadlessJsTaskSupport &&\n          reason instanceof HeadlessJsTaskError\n        ) {\n          NativeHeadlessJsTaskSupport.notifyTaskRetry(taskId).then(\n            retryPosted => {\n              if (!retryPosted) {\n                NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n              }\n            },\n          );\n        }\n      });\n  },\n\n  /**\n   * Only called from native code. Cancels a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask\n   */\n  cancelHeadlessTask(taskId: number, taskKey: string): void {\n    const taskCancelProvider = taskCancelProviders.get(taskKey);\n    if (!taskCancelProvider) {\n      throw new Error(`No task canceller registered for key '${taskKey}'`);\n    }\n    taskCancelProvider()();\n  },\n};\n\nif (!(global.RN$Bridgeless === true)) {\n  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);\n\n  if (__DEV__) {\n    const LogBoxInspector =\n      require('../LogBox/LogBoxInspectorContainer').default;\n    AppRegistry.registerComponent('LogBox', () => LogBoxInspector);\n  } else {\n    AppRegistry.registerComponent(\n      'LogBox',\n      () =>\n        function NoOp() {\n          return null;\n        },\n    );\n  }\n}\n\nmodule.exports = AppRegistry;\n"],"mappings":"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"}