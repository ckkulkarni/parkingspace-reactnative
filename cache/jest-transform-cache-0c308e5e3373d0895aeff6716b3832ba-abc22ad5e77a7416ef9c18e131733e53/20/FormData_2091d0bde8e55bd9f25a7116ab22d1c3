de2ff2af4018ffaf8e00380d8ac5c8e3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var FormData = function () {
  function FormData() {
    (0, _classCallCheck2.default)(this, FormData);
    this._parts = void 0;
    this._parts = [];
  }
  (0, _createClass2.default)(FormData, [{
    key: "append",
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: "getAll",
    value: function getAll(key) {
      return this._parts.filter(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
          name = _ref2[0];
        return name === key;
      }).map(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          value = _ref4[1];
        return value;
      });
    }
  }, {
    key: "getParts",
    value: function getParts() {
      return this._parts.map(function (_ref5) {
        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
          name = _ref6[0],
          value = _ref6[1];
        var contentDisposition = 'form-data; name="' + name + '"';
        var headers = {
          'content-disposition': contentDisposition
        };
        if (typeof value === 'object' && !Array.isArray(value) && value) {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return Object.assign({}, value, {
            headers: headers,
            fieldName: name
          });
        }
        return {
          string: String(value),
          headers: headers,
          fieldName: name
        };
      });
    }
  }]);
  return FormData;
}();
module.exports = FormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGb3JtRGF0YSIsIl9wYXJ0cyIsImtleSIsInZhbHVlIiwicHVzaCIsImZpbHRlciIsIm5hbWUiLCJtYXAiLCJjb250ZW50RGlzcG9zaXRpb24iLCJoZWFkZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwidHlwZSIsImZpZWxkTmFtZSIsInN0cmluZyIsIlN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJGb3JtRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG50eXBlIEZvcm1EYXRhVmFsdWUgPSBzdHJpbmcgfCB7bmFtZT86IHN0cmluZywgdHlwZT86IHN0cmluZywgdXJpOiBzdHJpbmd9O1xudHlwZSBGb3JtRGF0YU5hbWVWYWx1ZVBhaXIgPSBbc3RyaW5nLCBGb3JtRGF0YVZhbHVlXTtcblxudHlwZSBIZWFkZXJzID0ge1tuYW1lOiBzdHJpbmddOiBzdHJpbmcsIC4uLn07XG50eXBlIEZvcm1EYXRhUGFydCA9XG4gIHwge1xuICAgICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgICBoZWFkZXJzOiBIZWFkZXJzLFxuICAgICAgLi4uXG4gICAgfVxuICB8IHtcbiAgICAgIHVyaTogc3RyaW5nLFxuICAgICAgaGVhZGVyczogSGVhZGVycyxcbiAgICAgIG5hbWU/OiBzdHJpbmcsXG4gICAgICB0eXBlPzogc3RyaW5nLFxuICAgICAgLi4uXG4gICAgfTtcblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgWE1MSHR0cFJlcXVlc3QyIEZvcm1EYXRhIEFQSSwgYWxsb3dpbmcgbXVsdGlwYXJ0IFBPU1QgcmVxdWVzdHNcbiAqIHdpdGggbWl4ZWQgZGF0YSAoc3RyaW5nLCBuYXRpdmUgZmlsZXMpIHRvIGJlIHN1Ym1pdHRlZCB2aWEgWE1MSHR0cFJlcXVlc3QuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIHZhciBwaG90byA9IHtcbiAqICAgICB1cmk6IHVyaUZyb21DYW1lcmFSb2xsLFxuICogICAgIHR5cGU6ICdpbWFnZS9qcGVnJyxcbiAqICAgICBuYW1lOiAncGhvdG8uanBnJyxcbiAqICAgfTtcbiAqXG4gKiAgIHZhciBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gKiAgIGJvZHkuYXBwZW5kKCdhdXRoVG9rZW4nLCAnc2VjcmV0Jyk7XG4gKiAgIGJvZHkuYXBwZW5kKCdwaG90bycsIHBob3RvKTtcbiAqICAgYm9keS5hcHBlbmQoJ3RpdGxlJywgJ0EgYmVhdXRpZnVsIHBob3RvIScpO1xuICpcbiAqICAgeGhyLm9wZW4oJ1BPU1QnLCBzZXJ2ZXJVUkwpO1xuICogICB4aHIuc2VuZChib2R5KTtcbiAqL1xuY2xhc3MgRm9ybURhdGEge1xuICBfcGFydHM6IEFycmF5PEZvcm1EYXRhTmFtZVZhbHVlUGFpcj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGFydHMgPSBbXTtcbiAgfVxuXG4gIGFwcGVuZChrZXk6IHN0cmluZywgdmFsdWU6IEZvcm1EYXRhVmFsdWUpIHtcbiAgICAvLyBUaGUgWE1MSHR0cFJlcXVlc3Qgc3BlYyBkb2Vzbid0IHNwZWNpZnkgaWYgZHVwbGljYXRlIGtleXMgYXJlIGFsbG93ZWQuXG4gICAgLy8gTUROIHNheXMgdGhhdCBhbnkgbmV3IHZhbHVlcyBzaG91bGQgYmUgYXBwZW5kZWQgdG8gZXhpc3RpbmcgdmFsdWVzLlxuICAgIC8vIEluIGFueSBjYXNlLCBtYWpvciBicm93c2VycyBhbGxvdyBkdXBsaWNhdGUga2V5cywgc28gdGhhdCdzIHdoYXQgd2UnbGwgZG9cbiAgICAvLyB0b28uIFRoZXknbGwgc2ltcGx5IGdldCBhcHBlbmRlZCBhcyBhZGRpdGlvbmFsIGZvcm0gZGF0YSBwYXJ0cyBpbiB0aGVcbiAgICAvLyByZXF1ZXN0IGJvZHksIGxlYXZpbmcgdGhlIHNlcnZlciB0byBkZWFsIHdpdGggdGhlbS5cbiAgICB0aGlzLl9wYXJ0cy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH1cblxuICBnZXRBbGwoa2V5OiBzdHJpbmcpOiBBcnJheTxGb3JtRGF0YVZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnRzXG4gICAgICAuZmlsdGVyKChbbmFtZV0pID0+IG5hbWUgPT09IGtleSlcbiAgICAgIC5tYXAoKFssIHZhbHVlXSkgPT4gdmFsdWUpO1xuICB9XG5cbiAgZ2V0UGFydHMoKTogQXJyYXk8Rm9ybURhdGFQYXJ0PiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnRzLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgY29udGVudERpc3Bvc2l0aW9uID0gJ2Zvcm0tZGF0YTsgbmFtZT1cIicgKyBuYW1lICsgJ1wiJztcblxuICAgICAgY29uc3QgaGVhZGVyczogSGVhZGVycyA9IHsnY29udGVudC1kaXNwb3NpdGlvbic6IGNvbnRlbnREaXNwb3NpdGlvbn07XG5cbiAgICAgIC8vIFRoZSBib2R5IHBhcnQgaXMgYSBcImJsb2JcIiwgd2hpY2ggaW4gUmVhY3QgTmF0aXZlIGp1c3QgbWVhbnNcbiAgICAgIC8vIGFuIG9iamVjdCB3aXRoIGEgYHVyaWAgYXR0cmlidXRlLiBPcHRpb25hbGx5LCBpdCBjYW4gYWxzb1xuICAgICAgLy8gaGF2ZSBhIGBuYW1lYCBhbmQgYHR5cGVgIGF0dHJpYnV0ZSB0byBzcGVjaWZ5IGZpbGVuYW1lIGFuZFxuICAgICAgLy8gY29udGVudCB0eXBlIChjZi4gd2ViIEJsb2IgaW50ZXJmYWNlLilcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddICs9ICc7IGZpbGVuYW1lPVwiJyArIHZhbHVlLm5hbWUgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IHZhbHVlLnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsuLi52YWx1ZSwgaGVhZGVycywgZmllbGROYW1lOiBuYW1lfTtcbiAgICAgIH1cbiAgICAgIC8vIENvbnZlcnQgbm9uLW9iamVjdCB2YWx1ZXMgdG8gc3RyaW5ncyBhcyBwZXIgRm9ybURhdGEuYXBwZW5kKCkgc3BlY1xuICAgICAgcmV0dXJuIHtzdHJpbmc6IFN0cmluZyh2YWx1ZSksIGhlYWRlcnMsIGZpZWxkTmFtZTogbmFtZX07XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRGF0YTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQztBQUFBO0FBQUE7QUFBQTtBQUFBLElBd0NQQSxRQUFRO0VBR1osb0JBQWM7SUFBQTtJQUFBLEtBRmRDLE1BQU07SUFHSixJQUFJLENBQUNBLE1BQU0sR0FBRyxFQUFFO0VBQ2xCO0VBQUM7SUFBQTtJQUFBLE9BRUQsZ0JBQU9DLEdBQVcsRUFBRUMsS0FBb0IsRUFBRTtNQU14QyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csSUFBSSxDQUFDLENBQUNGLEdBQUcsRUFBRUMsS0FBSyxDQUFDLENBQUM7SUFDaEM7RUFBQztJQUFBO0lBQUEsT0FFRCxnQkFBT0QsR0FBVyxFQUF3QjtNQUN4QyxPQUFPLElBQUksQ0FBQ0QsTUFBTSxDQUNmSSxNQUFNLENBQUM7UUFBQTtVQUFFQyxJQUFJO1FBQUEsT0FBTUEsSUFBSSxLQUFLSixHQUFHO01BQUEsRUFBQyxDQUNoQ0ssR0FBRyxDQUFDO1FBQUE7VUFBSUosS0FBSztRQUFBLE9BQU1BLEtBQUs7TUFBQSxFQUFDO0lBQzlCO0VBQUM7SUFBQTtJQUFBLE9BRUQsb0JBQWdDO01BQzlCLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUNNLEdBQUcsQ0FBQyxpQkFBbUI7UUFBQTtVQUFqQkQsSUFBSTtVQUFFSCxLQUFLO1FBQ2xDLElBQU1LLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHRixJQUFJLEdBQUcsR0FBRztRQUUzRCxJQUFNRyxPQUFnQixHQUFHO1VBQUMscUJBQXFCLEVBQUVEO1FBQWtCLENBQUM7UUFNcEUsSUFBSSxPQUFPTCxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUNPLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUixLQUFLLENBQUMsSUFBSUEsS0FBSyxFQUFFO1VBQy9ELElBQUksT0FBT0EsS0FBSyxDQUFDRyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2xDRyxPQUFPLENBQUMscUJBQXFCLENBQUMsSUFBSSxjQUFjLEdBQUdOLEtBQUssQ0FBQ0csSUFBSSxHQUFHLEdBQUc7VUFDckU7VUFDQSxJQUFJLE9BQU9ILEtBQUssQ0FBQ1MsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNsQ0gsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHTixLQUFLLENBQUNTLElBQUk7VUFDdEM7VUFDQSx5QkFBV1QsS0FBSztZQUFFTSxPQUFPLEVBQVBBLE9BQU87WUFBRUksU0FBUyxFQUFFUDtVQUFJO1FBQzVDO1FBRUEsT0FBTztVQUFDUSxNQUFNLEVBQUVDLE1BQU0sQ0FBQ1osS0FBSyxDQUFDO1VBQUVNLE9BQU8sRUFBUEEsT0FBTztVQUFFSSxTQUFTLEVBQUVQO1FBQUksQ0FBQztNQUMxRCxDQUFDLENBQUM7SUFDSjtFQUFDO0VBQUE7QUFBQTtBQUdIVSxNQUFNLENBQUNDLE9BQU8sR0FBR2pCLFFBQVEifQ==