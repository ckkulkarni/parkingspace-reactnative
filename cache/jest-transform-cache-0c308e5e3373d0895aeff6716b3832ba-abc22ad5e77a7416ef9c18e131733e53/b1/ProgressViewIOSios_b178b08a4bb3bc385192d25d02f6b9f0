0c0d73b68ee91576a8f0a260f5039f62
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _RCTProgressViewNativeComponent = _interopRequireDefault(require("./RCTProgressViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ProgressViewIOS = function ProgressViewIOS(props, forwardedRef) {
  return (0, _jsxRuntime.jsx)(_RCTProgressViewNativeComponent.default, Object.assign({}, props, {
    style: [styles.progressView, props.style],
    ref: forwardedRef
  }));
};
var styles = _StyleSheet.default.create({
  progressView: {
    height: 2
  }
});
var ProgressViewIOSWithRef = React.forwardRef(ProgressViewIOS);
module.exports = ProgressViewIOSWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9ncmVzc1ZpZXdJT1MiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsInN0eWxlcyIsInByb2dyZXNzVmlldyIsInN0eWxlIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImhlaWdodCIsIlByb2dyZXNzVmlld0lPU1dpdGhSZWYiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUHJvZ3Jlc3NWaWV3SU9TLmlvcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge0ltYWdlU291cmNlfSBmcm9tICcuLi8uLi9JbWFnZS9JbWFnZVNvdXJjZSc7XG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuXG5pbXBvcnQgU3R5bGVTaGVldCwge3R5cGUgQ29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCBSQ1RQcm9ncmVzc1ZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9SQ1RQcm9ncmVzc1ZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlZpZXdQcm9wcyxcblxuICAvKipcbiAgICogVGhlIHByb2dyZXNzIGJhciBzdHlsZS5cbiAgICovXG4gIHByb2dyZXNzVmlld1N0eWxlPzogPygnZGVmYXVsdCcgfCAnYmFyJyksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9ncmVzcyB2YWx1ZSAoYmV0d2VlbiAwIGFuZCAxKS5cbiAgICovXG4gIHByb2dyZXNzPzogP251bWJlcixcblxuICAvKipcbiAgICogVGhlIHRpbnQgY29sb3Igb2YgdGhlIHByb2dyZXNzIGJhciBpdHNlbGYuXG4gICAqL1xuICBwcm9ncmVzc1RpbnRDb2xvcj86ID9Db2xvclZhbHVlLFxuXG4gIC8qKlxuICAgKiBUaGUgdGludCBjb2xvciBvZiB0aGUgcHJvZ3Jlc3MgYmFyIHRyYWNrLlxuICAgKi9cbiAgdHJhY2tUaW50Q29sb3I/OiA/Q29sb3JWYWx1ZSxcblxuICAvKipcbiAgICogQSBzdHJldGNoYWJsZSBpbWFnZSB0byBkaXNwbGF5IGFzIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqL1xuICBwcm9ncmVzc0ltYWdlPzogP0ltYWdlU291cmNlLFxuXG4gIC8qKlxuICAgKiBBIHN0cmV0Y2hhYmxlIGltYWdlIHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqL1xuICB0cmFja0ltYWdlPzogP0ltYWdlU291cmNlLFxufH0+O1xuXG4vKipcbiAqIFVzZSBgUHJvZ3Jlc3NWaWV3SU9TYCB0byByZW5kZXIgYSBVSVByb2dyZXNzVmlldyBvbiBpT1MuXG4gKi9cbmNvbnN0IFByb2dyZXNzVmlld0lPUyA9IChcbiAgcHJvcHM6IFByb3BzLFxuICBmb3J3YXJkZWRSZWY/OiA/UmVhY3QuUmVmPHR5cGVvZiBSQ1RQcm9ncmVzc1ZpZXdOYXRpdmVDb21wb25lbnQ+LFxuKSA9PiAoXG4gIDxSQ1RQcm9ncmVzc1ZpZXdOYXRpdmVDb21wb25lbnRcbiAgICB7Li4ucHJvcHN9XG4gICAgc3R5bGU9e1tzdHlsZXMucHJvZ3Jlc3NWaWV3LCBwcm9wcy5zdHlsZV19XG4gICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gIC8+XG4pO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHByb2dyZXNzVmlldzoge1xuICAgIGhlaWdodDogMixcbiAgfSxcbn0pO1xuXG5jb25zdCBQcm9ncmVzc1ZpZXdJT1NXaXRoUmVmID0gUmVhY3QuZm9yd2FyZFJlZihQcm9ncmVzc1ZpZXdJT1MpO1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIChQcm9ncmVzc1ZpZXdJT1NXaXRoUmVmOiB0eXBlb2YgUkNUUHJvZ3Jlc3NWaWV3TmF0aXZlQ29tcG9uZW50KTtcbiJdLCJtYXBwaW5ncyI6IjtBQWFBO0FBQ0E7QUFDQTtBQUErQjtBQUFBO0FBQUE7QUF1Qy9CLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBZSxDQUNuQkMsS0FBWSxFQUNaQyxZQUFnRTtFQUFBLE9BRWhFLHFCQUFDLHVDQUE4QixvQkFDekJELEtBQUs7SUFDVCxLQUFLLEVBQUUsQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLEVBQUVILEtBQUssQ0FBQ0ksS0FBSyxDQUFFO0lBQzFDLEdBQUcsRUFBRUg7RUFBYSxHQUNsQjtBQUFBLENBQ0g7QUFFRCxJQUFNQyxNQUFNLEdBQUdHLG1CQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQkgsWUFBWSxFQUFFO0lBQ1pJLE1BQU0sRUFBRTtFQUNWO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsSUFBTUMsc0JBQXNCLEdBQUdDLEtBQUssQ0FBQ0MsVUFBVSxDQUFDWCxlQUFlLENBQUM7QUFFaEVZLE1BQU0sQ0FBQ0MsT0FBTyxHQUNYSixzQkFBOEQifQ==