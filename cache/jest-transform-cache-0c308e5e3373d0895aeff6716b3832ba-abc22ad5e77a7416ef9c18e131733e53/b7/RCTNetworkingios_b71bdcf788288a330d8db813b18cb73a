b568814af2ebb690cf23e19e9cf0933c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _convertRequestBody = _interopRequireDefault(require("./convertRequestBody"));
var _NativeNetworkingIOS = _interopRequireDefault(require("./NativeNetworkingIOS"));
var RCTNetworking = {
  addListener: function addListener(eventType, listener, context) {
    return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
  },
  sendRequest: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
    var body = (0, _convertRequestBody.default)(data);
    _NativeNetworkingIOS.default.sendRequest({
      method: method,
      url: url,
      data: Object.assign({}, body, {
        trackingName: trackingName
      }),
      headers: headers,
      responseType: responseType,
      incrementalUpdates: incrementalUpdates,
      timeout: timeout,
      withCredentials: withCredentials
    }, callback);
  },
  abortRequest: function abortRequest(requestId) {
    _NativeNetworkingIOS.default.abortRequest(requestId);
  },
  clearCookies: function clearCookies(callback) {
    _NativeNetworkingIOS.default.clearCookies(callback);
  }
};
module.exports = RCTNetworking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSQ1ROZXR3b3JraW5nIiwiYWRkTGlzdGVuZXIiLCJldmVudFR5cGUiLCJsaXN0ZW5lciIsImNvbnRleHQiLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJzZW5kUmVxdWVzdCIsIm1ldGhvZCIsInRyYWNraW5nTmFtZSIsInVybCIsImhlYWRlcnMiLCJkYXRhIiwicmVzcG9uc2VUeXBlIiwiaW5jcmVtZW50YWxVcGRhdGVzIiwidGltZW91dCIsImNhbGxiYWNrIiwid2l0aENyZWRlbnRpYWxzIiwiYm9keSIsImNvbnZlcnRSZXF1ZXN0Qm9keSIsIk5hdGl2ZU5ldHdvcmtpbmdJT1MiLCJhYm9ydFJlcXVlc3QiLCJyZXF1ZXN0SWQiLCJjbGVhckNvb2tpZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUkNUTmV0d29ya2luZy5pb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFJDVERldmljZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvUkNURGV2aWNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7dHlwZSBFdmVudFN1YnNjcmlwdGlvbn0gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCBjb252ZXJ0UmVxdWVzdEJvZHksIHt0eXBlIFJlcXVlc3RCb2R5fSBmcm9tICcuL2NvbnZlcnRSZXF1ZXN0Qm9keSc7XG5pbXBvcnQgTmF0aXZlTmV0d29ya2luZ0lPUyBmcm9tICcuL05hdGl2ZU5ldHdvcmtpbmdJT1MnO1xuaW1wb3J0IHt0eXBlIE5hdGl2ZVJlc3BvbnNlVHlwZX0gZnJvbSAnLi9YTUxIdHRwUmVxdWVzdCc7XG5cbnR5cGUgUkNUTmV0d29ya2luZ0V2ZW50RGVmaW5pdGlvbnMgPSAkUmVhZE9ubHk8e1xuICBkaWRTZW5kTmV0d29ya0RhdGE6IFtcbiAgICBbXG4gICAgICBudW1iZXIsIC8vIHJlcXVlc3RJZFxuICAgICAgbnVtYmVyLCAvLyBwcm9ncmVzc1xuICAgICAgbnVtYmVyLCAvLyB0b3RhbFxuICAgIF0sXG4gIF0sXG4gIGRpZFJlY2VpdmVOZXR3b3JrUmVzcG9uc2U6IFtcbiAgICBbXG4gICAgICBudW1iZXIsIC8vIHJlcXVlc3RJZFxuICAgICAgbnVtYmVyLCAvLyBzdGF0dXNcbiAgICAgID97W3N0cmluZ106IHN0cmluZ30sIC8vIHJlc3BvbnNlSGVhZGVyc1xuICAgICAgP3N0cmluZywgLy8gcmVzcG9uc2VVUkxcbiAgICBdLFxuICBdLFxuICBkaWRSZWNlaXZlTmV0d29ya0RhdGE6IFtcbiAgICBbXG4gICAgICBudW1iZXIsIC8vIHJlcXVlc3RJZFxuICAgICAgc3RyaW5nLCAvLyByZXNwb25zZVxuICAgIF0sXG4gIF0sXG4gIGRpZFJlY2VpdmVOZXR3b3JrSW5jcmVtZW50YWxEYXRhOiBbXG4gICAgW1xuICAgICAgbnVtYmVyLCAvLyByZXF1ZXN0SWRcbiAgICAgIHN0cmluZywgLy8gcmVzcG9uc2VUZXh0XG4gICAgICBudW1iZXIsIC8vIHByb2dyZXNzXG4gICAgICBudW1iZXIsIC8vIHRvdGFsXG4gICAgXSxcbiAgXSxcbiAgZGlkUmVjZWl2ZU5ldHdvcmtEYXRhUHJvZ3Jlc3M6IFtcbiAgICBbXG4gICAgICBudW1iZXIsIC8vIHJlcXVlc3RJZFxuICAgICAgbnVtYmVyLCAvLyBsb2FkZWRcbiAgICAgIG51bWJlciwgLy8gdG90YWxcbiAgICBdLFxuICBdLFxuICBkaWRDb21wbGV0ZU5ldHdvcmtSZXNwb25zZTogW1xuICAgIFtcbiAgICAgIG51bWJlciwgLy8gcmVxdWVzdElkXG4gICAgICBzdHJpbmcsIC8vIGVycm9yXG4gICAgICBib29sZWFuLCAvLyB0aW1lT3V0RXJyb3JcbiAgICBdLFxuICBdLFxufT47XG5cbmNvbnN0IFJDVE5ldHdvcmtpbmcgPSB7XG4gIGFkZExpc3RlbmVyPEs6ICRLZXlzPFJDVE5ldHdvcmtpbmdFdmVudERlZmluaXRpb25zPj4oXG4gICAgZXZlbnRUeXBlOiBLLFxuICAgIGxpc3RlbmVyOiAoLi4uJEVsZW1lbnRUeXBlPFJDVE5ldHdvcmtpbmdFdmVudERlZmluaXRpb25zLCBLPikgPT4gbWl4ZWQsXG4gICAgY29udGV4dD86IG1peGVkLFxuICApOiBFdmVudFN1YnNjcmlwdGlvbiB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICByZXR1cm4gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIGNvbnRleHQpO1xuICB9LFxuXG4gIHNlbmRSZXF1ZXN0KFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHRyYWNraW5nTmFtZTogc3RyaW5nLFxuICAgIHVybDogc3RyaW5nLFxuICAgIGhlYWRlcnM6IHsuLi59LFxuICAgIGRhdGE6IFJlcXVlc3RCb2R5LFxuICAgIHJlc3BvbnNlVHlwZTogTmF0aXZlUmVzcG9uc2VUeXBlLFxuICAgIGluY3JlbWVudGFsVXBkYXRlczogYm9vbGVhbixcbiAgICB0aW1lb3V0OiBudW1iZXIsXG4gICAgY2FsbGJhY2s6IChyZXF1ZXN0SWQ6IG51bWJlcikgPT4gdm9pZCxcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW4sXG4gICkge1xuICAgIGNvbnN0IGJvZHkgPSBjb252ZXJ0UmVxdWVzdEJvZHkoZGF0YSk7XG4gICAgTmF0aXZlTmV0d29ya2luZ0lPUy5zZW5kUmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGE6IHsuLi5ib2R5LCB0cmFja2luZ05hbWV9LFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICByZXNwb25zZVR5cGUsXG4gICAgICAgIGluY3JlbWVudGFsVXBkYXRlcyxcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzLFxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICk7XG4gIH0sXG5cbiAgYWJvcnRSZXF1ZXN0KHJlcXVlc3RJZDogbnVtYmVyKSB7XG4gICAgTmF0aXZlTmV0d29ya2luZ0lPUy5hYm9ydFJlcXVlc3QocmVxdWVzdElkKTtcbiAgfSxcblxuICBjbGVhckNvb2tpZXMoY2FsbGJhY2s6IChyZXN1bHQ6IGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgICBOYXRpdmVOZXR3b3JraW5nSU9TLmNsZWFyQ29va2llcyhjYWxsYmFjayk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJDVE5ldHdvcmtpbmc7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUM7QUFFYjtBQUVBO0FBQ0E7QUFpREEsSUFBTUEsYUFBYSxHQUFHO0VBQ3BCQyxXQUFXLHVCQUNUQyxTQUFZLEVBQ1pDLFFBQXNFLEVBQ3RFQyxPQUFlLEVBQ0k7SUFFbkIsT0FBT0MsOEJBQXFCLENBQUNKLFdBQVcsQ0FBQ0MsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sQ0FBQztFQUN4RSxDQUFDO0VBRURFLFdBQVcsdUJBQ1RDLE1BQWMsRUFDZEMsWUFBb0IsRUFDcEJDLEdBQVcsRUFDWEMsT0FBYyxFQUNkQyxJQUFpQixFQUNqQkMsWUFBZ0MsRUFDaENDLGtCQUEyQixFQUMzQkMsT0FBZSxFQUNmQyxRQUFxQyxFQUNyQ0MsZUFBd0IsRUFDeEI7SUFDQSxJQUFNQyxJQUFJLEdBQUcsSUFBQUMsMkJBQWtCLEVBQUNQLElBQUksQ0FBQztJQUNyQ1EsNEJBQW1CLENBQUNiLFdBQVcsQ0FDN0I7TUFDRUMsTUFBTSxFQUFOQSxNQUFNO01BQ05FLEdBQUcsRUFBSEEsR0FBRztNQUNIRSxJQUFJLG9CQUFNTSxJQUFJO1FBQUVULFlBQVksRUFBWkE7TUFBWSxFQUFDO01BQzdCRSxPQUFPLEVBQVBBLE9BQU87TUFDUEUsWUFBWSxFQUFaQSxZQUFZO01BQ1pDLGtCQUFrQixFQUFsQkEsa0JBQWtCO01BQ2xCQyxPQUFPLEVBQVBBLE9BQU87TUFDUEUsZUFBZSxFQUFmQTtJQUNGLENBQUMsRUFDREQsUUFBUSxDQUNUO0VBQ0gsQ0FBQztFQUVESyxZQUFZLHdCQUFDQyxTQUFpQixFQUFFO0lBQzlCRiw0QkFBbUIsQ0FBQ0MsWUFBWSxDQUFDQyxTQUFTLENBQUM7RUFDN0MsQ0FBQztFQUVEQyxZQUFZLHdCQUFDUCxRQUFtQyxFQUFFO0lBQ2hESSw0QkFBbUIsQ0FBQ0csWUFBWSxDQUFDUCxRQUFRLENBQUM7RUFDNUM7QUFDRixDQUFDO0FBRURRLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHeEIsYUFBYSJ9