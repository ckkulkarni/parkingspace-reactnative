11e516e9bfd8fbf0f8e3b894ce9420d4
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _PaymentScreen = _interopRequireDefault(require("../PaymentScreen"));
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var calculateChargesMock = jest.fn();
describe('Payment Screen/Deregister Parking', function () {
  var mockFetch;
  var originalFetch = global.fetch;
  var space = 1;
  beforeAll(function () {
    mockFetch = jest.fn().mockResolvedValueOnce({
      ok: true,
      json: function json() {
        return Promise.resolve({});
      }
    });
    global.fetch = mockFetch;
  });
  afterEach(function () {
    jest.resetAllMocks();
  });
  afterAll(function () {
    global.fetch = originalFetch;
  });
  it('Displays the time spent', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render.getByTestId;
    var timeSpentElement = getByTestId('deregester-time-spent');
    console.log('timeSpentElement:', timeSpentElement.props.children[1]);
    expect(timeSpentElement).toHaveTextContent('Time Spent: 1 hours 0 minutes');
  });
  it('Shows parking charge', function () {
    var details = {
      reg: 'ABC123',
      time: new Date(Date.now() - 60 * 60 * 1000).toISOString()
    };
    var route = {
      params: {
        details: details
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route
      })),
      getByTestId = _render2.getByTestId;
    var parkingChargeElement = getByTestId('deregester-charge');
    expect(parkingChargeElement).toHaveTextContent('Parking Charges: $10');
  });
  it('calls markSpaceAsUnoccupied and navigates back to previous screen', (0, _asyncToGenerator2.default)(function* () {
    var markSpaceAsUnoccupiedMock = jest.fn();
    var navigation = {
      goBack: jest.fn()
    };
    var route = {
      params: {
        details: {
          reg: 'ABC123',
          time: '2022-02-22T10:00:00.000Z'
        },
        space: 1,
        spaces: [],
        markSpaceAsUnoccupied: markSpaceAsUnoccupiedMock
      }
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render3.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    _reactNative.fireEvent.press(goBackButton);
    expect(markSpaceAsUnoccupiedMock).toHaveBeenCalledWith('1');
    expect(navigation.goBack).toHaveBeenCalledTimes(1);
  }));
  it('navigates back when the "Go Back" button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var navigation = {
      navigate: jest.fn(),
      goBack: jest.fn()
    };
    var route = {
      params: {
        details: {},
        markSpaceAsUnoccupied: jest.fn()
      }
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PaymentScreen.default, {
        route: route,
        navigation: navigation
      })),
      getByTestId = _render4.getByTestId;
    var goBackButton = getByTestId('deregester-back');
    console.log(goBackButton);
    _reactNative.fireEvent.press(goBackButton);
    expect(navigation.goBack()).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,