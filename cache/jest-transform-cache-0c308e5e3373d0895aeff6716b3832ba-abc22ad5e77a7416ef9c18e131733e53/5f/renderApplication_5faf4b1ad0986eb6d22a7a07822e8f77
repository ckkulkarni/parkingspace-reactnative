12bfff081e236cbc20ed477e515e6f97
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderApplication;
var _GlobalPerformanceLogger = _interopRequireDefault(require("../Utilities/GlobalPerformanceLogger"));
var _PerformanceLoggerContext = _interopRequireDefault(require("../Utilities/PerformanceLoggerContext"));
var _AppContainer = _interopRequireDefault(require("./AppContainer"));
var _DisplayMode = _interopRequireDefault(require("./DisplayMode"));
var _getCachedComponentWithDebugName = _interopRequireDefault(require("./getCachedComponentWithDebugName"));
var Renderer = _interopRequireWildcard(require("./RendererProxy"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
require("../Utilities/BackHandler");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
  (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
  var renderable = (0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
    value: performanceLogger,
    children: (0, _jsxRuntime.jsx)(_AppContainer.default, {
      rootTag: rootTag,
      fabric: fabric,
      showArchitectureIndicator: showArchitectureIndicator,
      WrapperComponent: WrapperComponent,
      initialProps: initialProps != null ? initialProps : Object.freeze({}),
      internal_excludeLogBox: isLogBox,
      children: (0, _jsxRuntime.jsx)(RootComponent, Object.assign({}, initialProps, {
        rootTag: rootTag
      }))
    })
  });
  if (__DEV__ && debugName) {
    var RootComponentWithMeaningfulName = (0, _getCachedComponentWithDebugName.default)(debugName + "(RootComponent)");
    renderable = (0, _jsxRuntime.jsx)(RootComponentWithMeaningfulName, {
      children: renderable
    });
  }
  if (useOffscreen && displayMode != null) {
    var Offscreen = React.unstable_Offscreen;
    renderable = (0, _jsxRuntime.jsx)(Offscreen, {
      mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
      children: renderable
    });
  }
  performanceLogger.startTimespan('renderApplication_React_render');
  performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
  performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
  Renderer.renderElement({
    element: renderable,
    rootTag: rootTag,
    useFabric: Boolean(fabric),
    useConcurrentRoot: Boolean(useConcurrentRoot)
  });
  performanceLogger.stopTimespan('renderApplication_React_render');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXJBcHBsaWNhdGlvbiIsIlJvb3RDb21wb25lbnQiLCJpbml0aWFsUHJvcHMiLCJyb290VGFnIiwiV3JhcHBlckNvbXBvbmVudCIsImZhYnJpYyIsInNob3dBcmNoaXRlY3R1cmVJbmRpY2F0b3IiLCJzY29wZWRQZXJmb3JtYW5jZUxvZ2dlciIsImlzTG9nQm94IiwiZGVidWdOYW1lIiwiZGlzcGxheU1vZGUiLCJ1c2VDb25jdXJyZW50Um9vdCIsInVzZU9mZnNjcmVlbiIsImludmFyaWFudCIsInBlcmZvcm1hbmNlTG9nZ2VyIiwiR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJyZW5kZXJhYmxlIiwiT2JqZWN0IiwiZnJlZXplIiwiX19ERVZfXyIsIlJvb3RDb21wb25lbnRXaXRoTWVhbmluZ2Z1bE5hbWUiLCJnZXRDYWNoZWRDb21wb25lbnRXaXRoRGVidWdOYW1lIiwiT2Zmc2NyZWVuIiwiUmVhY3QiLCJ1bnN0YWJsZV9PZmZzY3JlZW4iLCJEaXNwbGF5TW9kZSIsIlZJU0lCTEUiLCJzdGFydFRpbWVzcGFuIiwic2V0RXh0cmEiLCJSZW5kZXJlciIsImlzUHJvZmlsaW5nUmVuZGVyZXIiLCJyZW5kZXJFbGVtZW50IiwiZWxlbWVudCIsInVzZUZhYnJpYyIsIkJvb2xlYW4iLCJzdG9wVGltZXNwYW4iXSwic291cmNlcyI6WyJyZW5kZXJBcHBsaWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SVBlcmZvcm1hbmNlTG9nZ2VyfSBmcm9tICcuLi9VdGlsaXRpZXMvY3JlYXRlUGVyZm9ybWFuY2VMb2dnZXInO1xuXG5pbXBvcnQgR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIgZnJvbSAnLi4vVXRpbGl0aWVzL0dsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyJztcbmltcG9ydCBQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQgZnJvbSAnLi4vVXRpbGl0aWVzL1BlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dCc7XG5pbXBvcnQgQXBwQ29udGFpbmVyIGZyb20gJy4vQXBwQ29udGFpbmVyJztcbmltcG9ydCBEaXNwbGF5TW9kZSwge3R5cGUgRGlzcGxheU1vZGVUeXBlfSBmcm9tICcuL0Rpc3BsYXlNb2RlJztcbmltcG9ydCBnZXRDYWNoZWRDb21wb25lbnRXaXRoRGVidWdOYW1lIGZyb20gJy4vZ2V0Q2FjaGVkQ29tcG9uZW50V2l0aERlYnVnTmFtZSc7XG5pbXBvcnQgKiBhcyBSZW5kZXJlciBmcm9tICcuL1JlbmRlcmVyUHJveHknO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyByZXF1aXJlIEJhY2tIYW5kbGVyIHNvIGl0IHNldHMgdGhlIGRlZmF1bHQgaGFuZGxlciB0aGF0IGV4aXRzIHRoZSBhcHAgaWYgbm8gbGlzdGVuZXJzIHJlc3BvbmRcbmltcG9ydCAnLi4vVXRpbGl0aWVzL0JhY2tIYW5kbGVyJztcblxudHlwZSBPZmZzY3JlZW5UeXBlID0gUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8e1xuICBtb2RlOiAndmlzaWJsZScgfCAnaGlkZGVuJyxcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59PjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyQXBwbGljYXRpb248UHJvcHM6IE9iamVjdD4oXG4gIFJvb3RDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8UHJvcHM+LFxuICBpbml0aWFsUHJvcHM6IFByb3BzLFxuICByb290VGFnOiBhbnksXG4gIFdyYXBwZXJDb21wb25lbnQ/OiA/UmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBmYWJyaWM/OiBib29sZWFuLFxuICBzaG93QXJjaGl0ZWN0dXJlSW5kaWNhdG9yPzogYm9vbGVhbixcbiAgc2NvcGVkUGVyZm9ybWFuY2VMb2dnZXI/OiBJUGVyZm9ybWFuY2VMb2dnZXIsXG4gIGlzTG9nQm94PzogYm9vbGVhbixcbiAgZGVidWdOYW1lPzogc3RyaW5nLFxuICBkaXNwbGF5TW9kZT86ID9EaXNwbGF5TW9kZVR5cGUsXG4gIHVzZUNvbmN1cnJlbnRSb290PzogYm9vbGVhbixcbiAgdXNlT2Zmc2NyZWVuPzogYm9vbGVhbixcbikge1xuICBpbnZhcmlhbnQocm9vdFRhZywgJ0V4cGVjdCB0byBoYXZlIGEgdmFsaWQgcm9vdFRhZywgaW5zdGVhZCBnb3QgJywgcm9vdFRhZyk7XG5cbiAgY29uc3QgcGVyZm9ybWFuY2VMb2dnZXIgPSBzY29wZWRQZXJmb3JtYW5jZUxvZ2dlciA/PyBHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlcjtcblxuICBsZXQgcmVuZGVyYWJsZTogUmVhY3QuTWl4ZWRFbGVtZW50ID0gKFxuICAgIDxQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3BlcmZvcm1hbmNlTG9nZ2VyfT5cbiAgICAgIDxBcHBDb250YWluZXJcbiAgICAgICAgcm9vdFRhZz17cm9vdFRhZ31cbiAgICAgICAgZmFicmljPXtmYWJyaWN9XG4gICAgICAgIHNob3dBcmNoaXRlY3R1cmVJbmRpY2F0b3I9e3Nob3dBcmNoaXRlY3R1cmVJbmRpY2F0b3J9XG4gICAgICAgIFdyYXBwZXJDb21wb25lbnQ9e1dyYXBwZXJDb21wb25lbnR9XG4gICAgICAgIGluaXRpYWxQcm9wcz17aW5pdGlhbFByb3BzID8/IE9iamVjdC5mcmVlemUoe30pfVxuICAgICAgICBpbnRlcm5hbF9leGNsdWRlTG9nQm94PXtpc0xvZ0JveH0+XG4gICAgICAgIDxSb290Q29tcG9uZW50IHsuLi5pbml0aWFsUHJvcHN9IHJvb3RUYWc9e3Jvb3RUYWd9IC8+XG4gICAgICA8L0FwcENvbnRhaW5lcj5cbiAgICA8L1BlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcblxuICBpZiAoX19ERVZfXyAmJiBkZWJ1Z05hbWUpIHtcbiAgICBjb25zdCBSb290Q29tcG9uZW50V2l0aE1lYW5pbmdmdWxOYW1lID0gZ2V0Q2FjaGVkQ29tcG9uZW50V2l0aERlYnVnTmFtZShcbiAgICAgIGAke2RlYnVnTmFtZX0oUm9vdENvbXBvbmVudClgLFxuICAgICk7XG4gICAgcmVuZGVyYWJsZSA9IChcbiAgICAgIDxSb290Q29tcG9uZW50V2l0aE1lYW5pbmdmdWxOYW1lPlxuICAgICAgICB7cmVuZGVyYWJsZX1cbiAgICAgIDwvUm9vdENvbXBvbmVudFdpdGhNZWFuaW5nZnVsTmFtZT5cbiAgICApO1xuICB9XG5cbiAgaWYgKHVzZU9mZnNjcmVlbiAmJiBkaXNwbGF5TW9kZSAhPSBudWxsKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBjb25zdCBPZmZzY3JlZW46IE9mZnNjcmVlblR5cGUgPSBSZWFjdC51bnN0YWJsZV9PZmZzY3JlZW47XG5cbiAgICByZW5kZXJhYmxlID0gKFxuICAgICAgPE9mZnNjcmVlblxuICAgICAgICBtb2RlPXtkaXNwbGF5TW9kZSA9PT0gRGlzcGxheU1vZGUuVklTSUJMRSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nfT5cbiAgICAgICAge3JlbmRlcmFibGV9XG4gICAgICA8L09mZnNjcmVlbj5cbiAgICApO1xuICB9XG5cbiAgcGVyZm9ybWFuY2VMb2dnZXIuc3RhcnRUaW1lc3BhbigncmVuZGVyQXBwbGljYXRpb25fUmVhY3RfcmVuZGVyJyk7XG4gIHBlcmZvcm1hbmNlTG9nZ2VyLnNldEV4dHJhKFxuICAgICd1c2VkUmVhY3RDb25jdXJyZW50Um9vdCcsXG4gICAgdXNlQ29uY3VycmVudFJvb3QgPyAnMScgOiAnMCcsXG4gICk7XG4gIHBlcmZvcm1hbmNlTG9nZ2VyLnNldEV4dHJhKCd1c2VkUmVhY3RGYWJyaWMnLCBmYWJyaWMgPyAnMScgOiAnMCcpO1xuICBwZXJmb3JtYW5jZUxvZ2dlci5zZXRFeHRyYShcbiAgICAndXNlZFJlYWN0UHJvZmlsZXInLFxuICAgIFJlbmRlcmVyLmlzUHJvZmlsaW5nUmVuZGVyZXIoKSxcbiAgKTtcbiAgUmVuZGVyZXIucmVuZGVyRWxlbWVudCh7XG4gICAgZWxlbWVudDogcmVuZGVyYWJsZSxcbiAgICByb290VGFnLFxuICAgIHVzZUZhYnJpYzogQm9vbGVhbihmYWJyaWMpLFxuICAgIHVzZUNvbmN1cnJlbnRSb290OiBCb29sZWFuKHVzZUNvbmN1cnJlbnRSb290KSxcbiAgfSk7XG4gIHBlcmZvcm1hbmNlTG9nZ2VyLnN0b3BUaW1lc3BhbigncmVuZGVyQXBwbGljYXRpb25fUmVhY3RfcmVuZGVyJyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQWtDO0FBQUE7QUFBQTtBQU9uQixTQUFTQSxpQkFBaUIsQ0FDdkNDLGFBQXlDLEVBQ3pDQyxZQUFtQixFQUNuQkMsT0FBWSxFQUNaQyxnQkFBNEMsRUFDNUNDLE1BQWdCLEVBQ2hCQyx5QkFBbUMsRUFDbkNDLHVCQUE0QyxFQUM1Q0MsUUFBa0IsRUFDbEJDLFNBQWtCLEVBQ2xCQyxXQUE4QixFQUM5QkMsaUJBQTJCLEVBQzNCQyxZQUFzQixFQUN0QjtFQUNBLElBQUFDLGtCQUFTLEVBQUNWLE9BQU8sRUFBRSw4Q0FBOEMsRUFBRUEsT0FBTyxDQUFDO0VBRTNFLElBQU1XLGlCQUFpQixHQUFHUCx1QkFBdUIsV0FBdkJBLHVCQUF1QixHQUFJUSxnQ0FBdUI7RUFFNUUsSUFBSUMsVUFBOEIsR0FDaEMscUJBQUMsaUNBQXdCLENBQUMsUUFBUTtJQUFDLEtBQUssRUFBRUYsaUJBQWtCO0lBQUEsVUFDMUQscUJBQUMscUJBQVk7TUFDWCxPQUFPLEVBQUVYLE9BQVE7TUFDakIsTUFBTSxFQUFFRSxNQUFPO01BQ2YseUJBQXlCLEVBQUVDLHlCQUEwQjtNQUNyRCxnQkFBZ0IsRUFBRUYsZ0JBQWlCO01BQ25DLFlBQVksRUFBRUYsWUFBWSxXQUFaQSxZQUFZLEdBQUllLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFO01BQ2hELHNCQUFzQixFQUFFVixRQUFTO01BQUEsVUFDakMscUJBQUMsYUFBYSxvQkFBS04sWUFBWTtRQUFFLE9BQU8sRUFBRUM7TUFBUTtJQUFHO0VBQ3hDLEVBRWxCO0VBRUQsSUFBSWdCLE9BQU8sSUFBSVYsU0FBUyxFQUFFO0lBQ3hCLElBQU1XLCtCQUErQixHQUFHLElBQUFDLHdDQUErQixFQUNsRVosU0FBUyxxQkFDYjtJQUNETyxVQUFVLEdBQ1IscUJBQUMsK0JBQStCO01BQUEsVUFDN0JBO0lBQVUsRUFFZDtFQUNIO0VBRUEsSUFBSUosWUFBWSxJQUFJRixXQUFXLElBQUksSUFBSSxFQUFFO0lBR3ZDLElBQU1ZLFNBQXdCLEdBQUdDLEtBQUssQ0FBQ0Msa0JBQWtCO0lBRXpEUixVQUFVLEdBQ1IscUJBQUMsU0FBUztNQUNSLElBQUksRUFBRU4sV0FBVyxLQUFLZSxvQkFBVyxDQUFDQyxPQUFPLEdBQUcsU0FBUyxHQUFHLFFBQVM7TUFBQSxVQUNoRVY7SUFBVSxFQUVkO0VBQ0g7RUFFQUYsaUJBQWlCLENBQUNhLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQztFQUNqRWIsaUJBQWlCLENBQUNjLFFBQVEsQ0FDeEIseUJBQXlCLEVBQ3pCakIsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FDOUI7RUFDREcsaUJBQWlCLENBQUNjLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRXZCLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2pFUyxpQkFBaUIsQ0FBQ2MsUUFBUSxDQUN4QixtQkFBbUIsRUFDbkJDLFFBQVEsQ0FBQ0MsbUJBQW1CLEVBQUUsQ0FDL0I7RUFDREQsUUFBUSxDQUFDRSxhQUFhLENBQUM7SUFDckJDLE9BQU8sRUFBRWhCLFVBQVU7SUFDbkJiLE9BQU8sRUFBUEEsT0FBTztJQUNQOEIsU0FBUyxFQUFFQyxPQUFPLENBQUM3QixNQUFNLENBQUM7SUFDMUJNLGlCQUFpQixFQUFFdUIsT0FBTyxDQUFDdkIsaUJBQWlCO0VBQzlDLENBQUMsQ0FBQztFQUNGRyxpQkFBaUIsQ0FBQ3FCLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQztBQUNsRSJ9